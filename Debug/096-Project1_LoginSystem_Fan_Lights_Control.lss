
096-Project1_LoginSystem_Fan_Lights_Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000554e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000016a  00800060  0000554e  000055e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003e  008001ca  008001ca  0000574c  2**0
                  ALLOC
  3 .stab         00004a28  00000000  00000000  0000574c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001c5c  00000000  00000000  0000a174  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000bdd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000bf30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000c0bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000e104  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000f205  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00010188  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00010308  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  000105ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010e58  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 f7 0e 	jmp	0x1dee	; 0x1dee <__vector_1>
       8:	0c 94 2a 0f 	jmp	0x1e54	; 0x1e54 <__vector_2>
       c:	0c 94 5d 0f 	jmp	0x1eba	; 0x1eba <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 b0 1d 	jmp	0x3b60	; 0x3b60 <__vector_6>
      1c:	0c 94 ea 1c 	jmp	0x39d4	; 0x39d4 <__vector_7>
      20:	0c 94 4d 1d 	jmp	0x3a9a	; 0x3a9a <__vector_8>
      24:	0c 94 7f 1c 	jmp	0x38fe	; 0x38fe <__vector_9>
      28:	0c 94 29 1a 	jmp	0x3452	; 0x3452 <__vector_10>
      2c:	0c 94 d9 19 	jmp	0x33b2	; 0x33b2 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 4a 07 	jmp	0xe94	; 0xe94 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e4       	ldi	r30, 0x4E	; 78
      68:	f5 e5       	ldi	r31, 0x55	; 85
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3c       	cpi	r26, 0xCA	; 202
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	aa ec       	ldi	r26, 0xCA	; 202
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 30       	cpi	r26, 0x08	; 8
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <main>
      8a:	0c 94 a5 2a 	jmp	0x554a	; 0x554a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 6e 2a 	jmp	0x54dc	; 0x54dc <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad e9       	ldi	r26, 0x9D	; 157
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 8a 2a 	jmp	0x5514	; 0x5514 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 7a 2a 	jmp	0x54f4	; 0x54f4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 96 2a 	jmp	0x552c	; 0x552c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 7a 2a 	jmp	0x54f4	; 0x54f4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 96 2a 	jmp	0x552c	; 0x552c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 6e 2a 	jmp	0x54dc	; 0x54dc <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d e9       	ldi	r24, 0x9D	; 157
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 8a 2a 	jmp	0x5514	; 0x5514 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 76 2a 	jmp	0x54ec	; 0x54ec <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6d e9       	ldi	r22, 0x9D	; 157
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 92 2a 	jmp	0x5524	; 0x5524 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 7a 2a 	jmp	0x54f4	; 0x54f4 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 96 2a 	jmp	0x552c	; 0x552c <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 7a 2a 	jmp	0x54f4	; 0x54f4 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 96 2a 	jmp	0x552c	; 0x552c <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 7a 2a 	jmp	0x54f4	; 0x54f4 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 96 2a 	jmp	0x552c	; 0x552c <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 7e 2a 	jmp	0x54fc	; 0x54fc <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 9a 2a 	jmp	0x5534	; 0x5534 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <ADC_voidInit>:
static void (* ADC_pfNotificationFunction)(u16) = NULL;
static u8 ADC_u8BusyFlag = 0;


void ADC_voidInit(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	///VREF
	#if ADC_u8_INITIAL_VREF == ADC_u8_VREF_AREF
		CLR_BIT(ADC_u8_ADMUX_REG , ADC_u8_VREF1_BIT);
		CLR_BIT(ADC_u8_ADMUX_REG , ADC_u8_VREF0_BIT);
	#elif ADC_u8_INITIAL_VREF == ADC_u8_INITIAL_VREF_AVCC
		CLR_BIT(ADC_u8_ADMUX_REG , ADC_u8_VREF1_BIT);
     ca6:	a7 e2       	ldi	r26, 0x27	; 39
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e7 e2       	ldi	r30, 0x27	; 39
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	8f 77       	andi	r24, 0x7F	; 127
     cb2:	8c 93       	st	X, r24
		SET_BIT(ADC_u8_ADMUX_REG , ADC_u8_VREF0_BIT);
     cb4:	a7 e2       	ldi	r26, 0x27	; 39
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	e7 e2       	ldi	r30, 0x27	; 39
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	80 64       	ori	r24, 0x40	; 64
     cc0:	8c 93       	st	X, r24
		SET_BIT(ADC_u8_ADMUX_REG , ADC_u8_VREF0_BIT);
	#endif
	
	///Adjustment Direction*/
	#if ADC_u8_INITIAL_ADJUSTMENT_DIRECTION == ADC_u8_INITIAL_RIGHT_ADJUST
		CLR_BIT(ADC_u8_ADMUX_REG , ADC_u8_LEFT_ADJ_BIT);
     cc2:	a7 e2       	ldi	r26, 0x27	; 39
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e7 e2       	ldi	r30, 0x27	; 39
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	8f 7d       	andi	r24, 0xDF	; 223
     cce:	8c 93       	st	X, r24
	#elif ADC_u8_PRESCALER_SELECTION == ADC_u8_PRESCALER_32
		SET_BIT(ADC_u8_ADCSRA_REG , ADC_u8_PRESCALER0_BIT);
		CLR_BIT(ADC_u8_ADCSRA_REG , ADC_u8_PRESCALER1_BIT);
		SET_BIT(ADC_u8_ADCSRA_REG , ADC_u8_PRESCALER2_BIT);
	#elif ADC_u8_PRESCALER_SELECTION == ADC_u8_PRESCALER_64
		CLR_BIT(ADC_u8_ADCSRA_REG , ADC_u8_PRESCALER0_BIT);
     cd0:	a6 e2       	ldi	r26, 0x26	; 38
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	e6 e2       	ldi	r30, 0x26	; 38
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	8e 7f       	andi	r24, 0xFE	; 254
     cdc:	8c 93       	st	X, r24
		SET_BIT(ADC_u8_ADCSRA_REG , ADC_u8_PRESCALER1_BIT);
     cde:	a6 e2       	ldi	r26, 0x26	; 38
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e6 e2       	ldi	r30, 0x26	; 38
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	82 60       	ori	r24, 0x02	; 2
     cea:	8c 93       	st	X, r24
		SET_BIT(ADC_u8_ADCSRA_REG , ADC_u8_PRESCALER2_BIT);
     cec:	a6 e2       	ldi	r26, 0x26	; 38
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e6 e2       	ldi	r30, 0x26	; 38
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	84 60       	ori	r24, 0x04	; 4
     cf8:	8c 93       	st	X, r24
		SET_BIT(ADC_u8_ADCSRA_REG , ADC_u8_PRESCALER2_BIT);
	#endif
	//---------------------------------------------------------------------
	
		/*Enable ADC*/
	SET_BIT(ADC_u8_ADCSRA_REG , ADC_u8_ADC_ENABLE_BIT);
     cfa:	a6 e2       	ldi	r26, 0x26	; 38
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e6 e2       	ldi	r30, 0x26	; 38
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	80 68       	ori	r24, 0x80	; 128
     d06:	8c 93       	st	X, r24
	
}
     d08:	cf 91       	pop	r28
     d0a:	df 91       	pop	r29
     d0c:	08 95       	ret

00000d0e <ADC_u8GetDigitalValueSynchNonBlocking>:

/************************************************************************/

u8   ADC_u8GetDigitalValueSynchNonBlocking(u8 Copy_u8ChannelGainSelection , u16 * Copy_pu16DigitalValue)
{
     d0e:	df 93       	push	r29
     d10:	cf 93       	push	r28
     d12:	cd b7       	in	r28, 0x3d	; 61
     d14:	de b7       	in	r29, 0x3e	; 62
     d16:	28 97       	sbiw	r28, 0x08	; 8
     d18:	0f b6       	in	r0, 0x3f	; 63
     d1a:	f8 94       	cli
     d1c:	de bf       	out	0x3e, r29	; 62
     d1e:	0f be       	out	0x3f, r0	; 63
     d20:	cd bf       	out	0x3d, r28	; 61
     d22:	8e 83       	std	Y+6, r24	; 0x06
     d24:	78 87       	std	Y+8, r23	; 0x08
     d26:	6f 83       	std	Y+7, r22	; 0x07
	u8 Local_u8ErrorState = STD_TYPES_OK;
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_u32TimeOutCounter = 0;
     d2c:	19 82       	std	Y+1, r1	; 0x01
     d2e:	1a 82       	std	Y+2, r1	; 0x02
     d30:	1b 82       	std	Y+3, r1	; 0x03
     d32:	1c 82       	std	Y+4, r1	; 0x04
	
	if((Copy_u8ChannelGainSelection <= ADC_u8_TESTING_CHANNEL_WITH_0v) && (Copy_pu16DigitalValue != NULL))
     d34:	8e 81       	ldd	r24, Y+6	; 0x06
     d36:	80 32       	cpi	r24, 0x20	; 32
     d38:	08 f0       	brcs	.+2      	; 0xd3c <ADC_u8GetDigitalValueSynchNonBlocking+0x2e>
     d3a:	5b c0       	rjmp	.+182    	; 0xdf2 <ADC_u8GetDigitalValueSynchNonBlocking+0xe4>
     d3c:	8f 81       	ldd	r24, Y+7	; 0x07
     d3e:	98 85       	ldd	r25, Y+8	; 0x08
     d40:	00 97       	sbiw	r24, 0x00	; 0
     d42:	09 f4       	brne	.+2      	; 0xd46 <ADC_u8GetDigitalValueSynchNonBlocking+0x38>
     d44:	56 c0       	rjmp	.+172    	; 0xdf2 <ADC_u8GetDigitalValueSynchNonBlocking+0xe4>
	{
		/*Clear ADMUX0:4*/
		ADC_u8_ADMUX_REG &= 0b11100000;
     d46:	a7 e2       	ldi	r26, 0x27	; 39
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e7 e2       	ldi	r30, 0x27	; 39
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	80 7e       	andi	r24, 0xE0	; 224
     d52:	8c 93       	st	X, r24
		
		/*Choose Channel and gain*/
		ADC_u8_ADMUX_REG |= Copy_u8ChannelGainSelection;
     d54:	a7 e2       	ldi	r26, 0x27	; 39
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	e7 e2       	ldi	r30, 0x27	; 39
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	90 81       	ld	r25, Z
     d5e:	8e 81       	ldd	r24, Y+6	; 0x06
     d60:	89 2b       	or	r24, r25
     d62:	8c 93       	st	X, r24
		
		/*Start Conversion*/
		SET_BIT(ADC_u8_ADCSRA_REG , ADC_u8_START_CONVERSION_BIT);
     d64:	a6 e2       	ldi	r26, 0x26	; 38
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	e6 e2       	ldi	r30, 0x26	; 38
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	80 64       	ori	r24, 0x40	; 64
     d70:	8c 93       	st	X, r24
     d72:	0b c0       	rjmp	.+22     	; 0xd8a <ADC_u8GetDigitalValueSynchNonBlocking+0x7c>
		
		/*(Wait till flag = 1) && (Uing a time out counter to avoid the blocking state)*/		//Polling
		while((GET_BIT(ADC_u8_ADCSRA_REG , ADC_u8_INTERRUPT_FLAG_BIT)==0) && (Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE))
		{
			Local_u32TimeOutCounter++;
     d74:	89 81       	ldd	r24, Y+1	; 0x01
     d76:	9a 81       	ldd	r25, Y+2	; 0x02
     d78:	ab 81       	ldd	r26, Y+3	; 0x03
     d7a:	bc 81       	ldd	r27, Y+4	; 0x04
     d7c:	01 96       	adiw	r24, 0x01	; 1
     d7e:	a1 1d       	adc	r26, r1
     d80:	b1 1d       	adc	r27, r1
     d82:	89 83       	std	Y+1, r24	; 0x01
     d84:	9a 83       	std	Y+2, r25	; 0x02
     d86:	ab 83       	std	Y+3, r26	; 0x03
     d88:	bc 83       	std	Y+4, r27	; 0x04
		
		/*Start Conversion*/
		SET_BIT(ADC_u8_ADCSRA_REG , ADC_u8_START_CONVERSION_BIT);
		
		/*(Wait till flag = 1) && (Uing a time out counter to avoid the blocking state)*/		//Polling
		while((GET_BIT(ADC_u8_ADCSRA_REG , ADC_u8_INTERRUPT_FLAG_BIT)==0) && (Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE))
     d8a:	e6 e2       	ldi	r30, 0x26	; 38
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	82 95       	swap	r24
     d92:	8f 70       	andi	r24, 0x0F	; 15
     d94:	88 2f       	mov	r24, r24
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	81 70       	andi	r24, 0x01	; 1
     d9a:	90 70       	andi	r25, 0x00	; 0
     d9c:	00 97       	sbiw	r24, 0x00	; 0
     d9e:	61 f4       	brne	.+24     	; 0xdb8 <ADC_u8GetDigitalValueSynchNonBlocking+0xaa>
     da0:	89 81       	ldd	r24, Y+1	; 0x01
     da2:	9a 81       	ldd	r25, Y+2	; 0x02
     da4:	ab 81       	ldd	r26, Y+3	; 0x03
     da6:	bc 81       	ldd	r27, Y+4	; 0x04
     da8:	80 35       	cpi	r24, 0x50	; 80
     daa:	23 ec       	ldi	r18, 0xC3	; 195
     dac:	92 07       	cpc	r25, r18
     dae:	20 e0       	ldi	r18, 0x00	; 0
     db0:	a2 07       	cpc	r26, r18
     db2:	20 e0       	ldi	r18, 0x00	; 0
     db4:	b2 07       	cpc	r27, r18
     db6:	f0 f2       	brcs	.-68     	; 0xd74 <ADC_u8GetDigitalValueSynchNonBlocking+0x66>
		{
			Local_u32TimeOutCounter++;
		}
		
		if(GET_BIT(ADC_u8_ADCSRA_REG , ADC_u8_INTERRUPT_FLAG_BIT)!=0)			//If there are no problems, we'll continue the code
     db8:	e6 e2       	ldi	r30, 0x26	; 38
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 81       	ld	r24, Z
     dbe:	82 95       	swap	r24
     dc0:	8f 70       	andi	r24, 0x0F	; 15
     dc2:	88 2f       	mov	r24, r24
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	81 70       	andi	r24, 0x01	; 1
     dc8:	90 70       	andi	r25, 0x00	; 0
     dca:	88 23       	and	r24, r24
     dcc:	81 f0       	breq	.+32     	; 0xdee <ADC_u8GetDigitalValueSynchNonBlocking+0xe0>
		{
			/*Clear flag -- We've to clear the flag ourselves in the polling mode / In Interrupt mode it's cleared by the HW*/
			CLR_BIT(ADC_u8_ADCSRA_REG , ADC_u8_INTERRUPT_FLAG_BIT);
     dce:	a6 e2       	ldi	r26, 0x26	; 38
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	e6 e2       	ldi	r30, 0x26	; 38
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	80 81       	ld	r24, Z
     dd8:	8f 7e       	andi	r24, 0xEF	; 239
     dda:	8c 93       	st	X, r24
			
			/*Read digital output*/
			*Copy_pu16DigitalValue = ADC_u16_ADCLH_REG;
     ddc:	e4 e2       	ldi	r30, 0x24	; 36
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	80 81       	ld	r24, Z
     de2:	91 81       	ldd	r25, Z+1	; 0x01
     de4:	ef 81       	ldd	r30, Y+7	; 0x07
     de6:	f8 85       	ldd	r31, Y+8	; 0x08
     de8:	91 83       	std	Z+1, r25	; 0x01
     dea:	80 83       	st	Z, r24
     dec:	03 c0       	rjmp	.+6      	; 0xdf4 <ADC_u8GetDigitalValueSynchNonBlocking+0xe6>
		}
		
		else		//Means that there is a problem in the HW
		{
			Local_u8ErrorState = STD_TYPES_NOK;
     dee:	1d 82       	std	Y+5, r1	; 0x05
     df0:	01 c0       	rjmp	.+2      	; 0xdf4 <ADC_u8GetDigitalValueSynchNonBlocking+0xe6>
		}
	}
	
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     df2:	1d 82       	std	Y+5, r1	; 0x05
	}
	
	return Local_u8ErrorState;
     df4:	8d 81       	ldd	r24, Y+5	; 0x05
}
     df6:	28 96       	adiw	r28, 0x08	; 8
     df8:	0f b6       	in	r0, 0x3f	; 63
     dfa:	f8 94       	cli
     dfc:	de bf       	out	0x3e, r29	; 62
     dfe:	0f be       	out	0x3f, r0	; 63
     e00:	cd bf       	out	0x3d, r28	; 61
     e02:	cf 91       	pop	r28
     e04:	df 91       	pop	r29
     e06:	08 95       	ret

00000e08 <ADC_u8GetDigitalValueAsynch>:

/************************************************************************/

u8   ADC_u8GetDigitalValueAsynch(u8 Copy_u8ChannelGainSelection , void(* Copy_pfNotificationFunc)(u16))
{
     e08:	df 93       	push	r29
     e0a:	cf 93       	push	r28
     e0c:	00 d0       	rcall	.+0      	; 0xe0e <ADC_u8GetDigitalValueAsynch+0x6>
     e0e:	00 d0       	rcall	.+0      	; 0xe10 <ADC_u8GetDigitalValueAsynch+0x8>
     e10:	cd b7       	in	r28, 0x3d	; 61
     e12:	de b7       	in	r29, 0x3e	; 62
     e14:	8a 83       	std	Y+2, r24	; 0x02
     e16:	7c 83       	std	Y+4, r23	; 0x04
     e18:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	89 83       	std	Y+1, r24	; 0x01
	
	if((Copy_u8ChannelGainSelection <= ADC_u8_TESTING_CHANNEL_WITH_0v) && (Copy_pfNotificationFunc != NULL) && (ADC_u8BusyFlag == 0))
     e1e:	8a 81       	ldd	r24, Y+2	; 0x02
     e20:	80 32       	cpi	r24, 0x20	; 32
     e22:	78 f5       	brcc	.+94     	; 0xe82 <ADC_u8GetDigitalValueAsynch+0x7a>
     e24:	8b 81       	ldd	r24, Y+3	; 0x03
     e26:	9c 81       	ldd	r25, Y+4	; 0x04
     e28:	00 97       	sbiw	r24, 0x00	; 0
     e2a:	59 f1       	breq	.+86     	; 0xe82 <ADC_u8GetDigitalValueAsynch+0x7a>
     e2c:	80 91 cc 01 	lds	r24, 0x01CC
     e30:	88 23       	and	r24, r24
     e32:	39 f5       	brne	.+78     	; 0xe82 <ADC_u8GetDigitalValueAsynch+0x7a>
	{
		/*Set Busy Flag*/					//To avoid interrupting ADC conversion by starting a new conversion
		ADC_u8BusyFlag = 1;		
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	80 93 cc 01 	sts	0x01CC, r24
		
		/*Update the global pointer to function with the address of the Notification Function*/
		ADC_pfNotificationFunction = Copy_pfNotificationFunc;
     e3a:	8b 81       	ldd	r24, Y+3	; 0x03
     e3c:	9c 81       	ldd	r25, Y+4	; 0x04
     e3e:	90 93 cb 01 	sts	0x01CB, r25
     e42:	80 93 ca 01 	sts	0x01CA, r24
		
		/*Enable Interrupt*/
		SET_BIT(ADC_u8_ADCSRA_REG , ADC_u8_INTERRUPT_ENABLE_BIT);
     e46:	a6 e2       	ldi	r26, 0x26	; 38
     e48:	b0 e0       	ldi	r27, 0x00	; 0
     e4a:	e6 e2       	ldi	r30, 0x26	; 38
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
     e50:	88 60       	ori	r24, 0x08	; 8
     e52:	8c 93       	st	X, r24
		
		/*Clear ADMUX0:4*/
		ADC_u8_ADMUX_REG &= 0b11100000;
     e54:	a7 e2       	ldi	r26, 0x27	; 39
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	e7 e2       	ldi	r30, 0x27	; 39
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	80 7e       	andi	r24, 0xE0	; 224
     e60:	8c 93       	st	X, r24
		
		/*Choose Channel and gain*/
		ADC_u8_ADMUX_REG |= Copy_u8ChannelGainSelection;
     e62:	a7 e2       	ldi	r26, 0x27	; 39
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e7 e2       	ldi	r30, 0x27	; 39
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	90 81       	ld	r25, Z
     e6c:	8a 81       	ldd	r24, Y+2	; 0x02
     e6e:	89 2b       	or	r24, r25
     e70:	8c 93       	st	X, r24
		
		/*Start Conversion*/
		SET_BIT(ADC_u8_ADCSRA_REG , ADC_u8_START_CONVERSION_BIT);
     e72:	a6 e2       	ldi	r26, 0x26	; 38
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	e6 e2       	ldi	r30, 0x26	; 38
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	80 64       	ori	r24, 0x40	; 64
     e7e:	8c 93       	st	X, r24
     e80:	01 c0       	rjmp	.+2      	; 0xe84 <ADC_u8GetDigitalValueAsynch+0x7c>
	}
	
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     e82:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     e84:	89 81       	ldd	r24, Y+1	; 0x01
}
     e86:	0f 90       	pop	r0
     e88:	0f 90       	pop	r0
     e8a:	0f 90       	pop	r0
     e8c:	0f 90       	pop	r0
     e8e:	cf 91       	pop	r28
     e90:	df 91       	pop	r29
     e92:	08 95       	ret

00000e94 <__vector_16>:
/************************************************************************/

/*Prototype of ADC ISR*/
void __vector_16(void)		__attribute__((signal));
void __vector_16(void)
{
     e94:	1f 92       	push	r1
     e96:	0f 92       	push	r0
     e98:	0f b6       	in	r0, 0x3f	; 63
     e9a:	0f 92       	push	r0
     e9c:	11 24       	eor	r1, r1
     e9e:	2f 93       	push	r18
     ea0:	3f 93       	push	r19
     ea2:	4f 93       	push	r20
     ea4:	5f 93       	push	r21
     ea6:	6f 93       	push	r22
     ea8:	7f 93       	push	r23
     eaa:	8f 93       	push	r24
     eac:	9f 93       	push	r25
     eae:	af 93       	push	r26
     eb0:	bf 93       	push	r27
     eb2:	ef 93       	push	r30
     eb4:	ff 93       	push	r31
     eb6:	df 93       	push	r29
     eb8:	cf 93       	push	r28
     eba:	cd b7       	in	r28, 0x3d	; 61
     ebc:	de b7       	in	r29, 0x3e	; 62
	if(ADC_pfNotificationFunction != NULL)
     ebe:	80 91 ca 01 	lds	r24, 0x01CA
     ec2:	90 91 cb 01 	lds	r25, 0x01CB
     ec6:	00 97       	sbiw	r24, 0x00	; 0
     ec8:	99 f0       	breq	.+38     	; 0xef0 <__vector_16+0x5c>
	{
		/*Clear Busy Flag*/	
		ADC_u8BusyFlag = 0;	
     eca:	10 92 cc 01 	sts	0x01CC, r1
		
		/*Clear PIE of ADC*/
		/*Disable Interrupt*/
		CLR_BIT(ADC_u8_ADCSRA_REG , ADC_u8_INTERRUPT_ENABLE_BIT);
     ece:	a6 e2       	ldi	r26, 0x26	; 38
     ed0:	b0 e0       	ldi	r27, 0x00	; 0
     ed2:	e6 e2       	ldi	r30, 0x26	; 38
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	87 7f       	andi	r24, 0xF7	; 247
     eda:	8c 93       	st	X, r24
		
		/*Calling Notification Function*/
		ADC_pfNotificationFunction(ADC_u16_ADCLH_REG);
     edc:	20 91 ca 01 	lds	r18, 0x01CA
     ee0:	30 91 cb 01 	lds	r19, 0x01CB
     ee4:	e4 e2       	ldi	r30, 0x24	; 36
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	91 81       	ldd	r25, Z+1	; 0x01
     eec:	f9 01       	movw	r30, r18
     eee:	09 95       	icall
	}
}
     ef0:	cf 91       	pop	r28
     ef2:	df 91       	pop	r29
     ef4:	ff 91       	pop	r31
     ef6:	ef 91       	pop	r30
     ef8:	bf 91       	pop	r27
     efa:	af 91       	pop	r26
     efc:	9f 91       	pop	r25
     efe:	8f 91       	pop	r24
     f00:	7f 91       	pop	r23
     f02:	6f 91       	pop	r22
     f04:	5f 91       	pop	r21
     f06:	4f 91       	pop	r20
     f08:	3f 91       	pop	r19
     f0a:	2f 91       	pop	r18
     f0c:	0f 90       	pop	r0
     f0e:	0f be       	out	0x3f, r0	; 63
     f10:	0f 90       	pop	r0
     f12:	1f 90       	pop	r1
     f14:	18 95       	reti

00000f16 <ADC_u8_AutoTriggerEnable>:

/************************************************************************/

u8 ADC_u8_AutoTriggerEnable(u8 Copy_u8AutoTriggerSource)
{
     f16:	df 93       	push	r29
     f18:	cf 93       	push	r28
     f1a:	00 d0       	rcall	.+0      	; 0xf1c <ADC_u8_AutoTriggerEnable+0x6>
     f1c:	00 d0       	rcall	.+0      	; 0xf1e <ADC_u8_AutoTriggerEnable+0x8>
     f1e:	cd b7       	in	r28, 0x3d	; 61
     f20:	de b7       	in	r29, 0x3e	; 62
     f22:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8AutoTriggerSource <= ADC_u8_TRIGGER_RESOURCE_TIMER1_CAPTURE_EVENT)
     f28:	8a 81       	ldd	r24, Y+2	; 0x02
     f2a:	88 30       	cpi	r24, 0x08	; 8
     f2c:	08 f0       	brcs	.+2      	; 0xf30 <ADC_u8_AutoTriggerEnable+0x1a>
     f2e:	eb c0       	rjmp	.+470    	; 0x1106 <ADC_u8_AutoTriggerEnable+0x1f0>
	{
		switch(Copy_u8AutoTriggerSource)
     f30:	8a 81       	ldd	r24, Y+2	; 0x02
     f32:	28 2f       	mov	r18, r24
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	3c 83       	std	Y+4, r19	; 0x04
     f38:	2b 83       	std	Y+3, r18	; 0x03
     f3a:	8b 81       	ldd	r24, Y+3	; 0x03
     f3c:	9c 81       	ldd	r25, Y+4	; 0x04
     f3e:	83 30       	cpi	r24, 0x03	; 3
     f40:	91 05       	cpc	r25, r1
     f42:	09 f4       	brne	.+2      	; 0xf46 <ADC_u8_AutoTriggerEnable+0x30>
     f44:	70 c0       	rjmp	.+224    	; 0x1026 <ADC_u8_AutoTriggerEnable+0x110>
     f46:	2b 81       	ldd	r18, Y+3	; 0x03
     f48:	3c 81       	ldd	r19, Y+4	; 0x04
     f4a:	24 30       	cpi	r18, 0x04	; 4
     f4c:	31 05       	cpc	r19, r1
     f4e:	84 f4       	brge	.+32     	; 0xf70 <ADC_u8_AutoTriggerEnable+0x5a>
     f50:	8b 81       	ldd	r24, Y+3	; 0x03
     f52:	9c 81       	ldd	r25, Y+4	; 0x04
     f54:	81 30       	cpi	r24, 0x01	; 1
     f56:	91 05       	cpc	r25, r1
     f58:	d1 f1       	breq	.+116    	; 0xfce <ADC_u8_AutoTriggerEnable+0xb8>
     f5a:	2b 81       	ldd	r18, Y+3	; 0x03
     f5c:	3c 81       	ldd	r19, Y+4	; 0x04
     f5e:	22 30       	cpi	r18, 0x02	; 2
     f60:	31 05       	cpc	r19, r1
     f62:	0c f0       	brlt	.+2      	; 0xf66 <ADC_u8_AutoTriggerEnable+0x50>
     f64:	4a c0       	rjmp	.+148    	; 0xffa <ADC_u8_AutoTriggerEnable+0xe4>
     f66:	8b 81       	ldd	r24, Y+3	; 0x03
     f68:	9c 81       	ldd	r25, Y+4	; 0x04
     f6a:	00 97       	sbiw	r24, 0x00	; 0
     f6c:	d1 f0       	breq	.+52     	; 0xfa2 <ADC_u8_AutoTriggerEnable+0x8c>
     f6e:	c9 c0       	rjmp	.+402    	; 0x1102 <ADC_u8_AutoTriggerEnable+0x1ec>
     f70:	2b 81       	ldd	r18, Y+3	; 0x03
     f72:	3c 81       	ldd	r19, Y+4	; 0x04
     f74:	25 30       	cpi	r18, 0x05	; 5
     f76:	31 05       	cpc	r19, r1
     f78:	09 f4       	brne	.+2      	; 0xf7c <ADC_u8_AutoTriggerEnable+0x66>
     f7a:	81 c0       	rjmp	.+258    	; 0x107e <ADC_u8_AutoTriggerEnable+0x168>
     f7c:	8b 81       	ldd	r24, Y+3	; 0x03
     f7e:	9c 81       	ldd	r25, Y+4	; 0x04
     f80:	85 30       	cpi	r24, 0x05	; 5
     f82:	91 05       	cpc	r25, r1
     f84:	0c f4       	brge	.+2      	; 0xf88 <ADC_u8_AutoTriggerEnable+0x72>
     f86:	65 c0       	rjmp	.+202    	; 0x1052 <ADC_u8_AutoTriggerEnable+0x13c>
     f88:	2b 81       	ldd	r18, Y+3	; 0x03
     f8a:	3c 81       	ldd	r19, Y+4	; 0x04
     f8c:	26 30       	cpi	r18, 0x06	; 6
     f8e:	31 05       	cpc	r19, r1
     f90:	09 f4       	brne	.+2      	; 0xf94 <ADC_u8_AutoTriggerEnable+0x7e>
     f92:	8b c0       	rjmp	.+278    	; 0x10aa <ADC_u8_AutoTriggerEnable+0x194>
     f94:	8b 81       	ldd	r24, Y+3	; 0x03
     f96:	9c 81       	ldd	r25, Y+4	; 0x04
     f98:	87 30       	cpi	r24, 0x07	; 7
     f9a:	91 05       	cpc	r25, r1
     f9c:	09 f4       	brne	.+2      	; 0xfa0 <ADC_u8_AutoTriggerEnable+0x8a>
     f9e:	9b c0       	rjmp	.+310    	; 0x10d6 <ADC_u8_AutoTriggerEnable+0x1c0>
     fa0:	b0 c0       	rjmp	.+352    	; 0x1102 <ADC_u8_AutoTriggerEnable+0x1ec>
		{
			case ADC_u8_TRIGGER_RESOURCE_FREE_RUNNING:				//000
			CLR_BIT(ADC_u8_SFIOR_REG , 5);
     fa2:	a0 e5       	ldi	r26, 0x50	; 80
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	e0 e5       	ldi	r30, 0x50	; 80
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	8f 7d       	andi	r24, 0xDF	; 223
     fae:	8c 93       	st	X, r24
			CLR_BIT(ADC_u8_SFIOR_REG , 6);
     fb0:	a0 e5       	ldi	r26, 0x50	; 80
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	e0 e5       	ldi	r30, 0x50	; 80
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	8f 7b       	andi	r24, 0xBF	; 191
     fbc:	8c 93       	st	X, r24
			CLR_BIT(ADC_u8_SFIOR_REG , 7);
     fbe:	a0 e5       	ldi	r26, 0x50	; 80
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	e0 e5       	ldi	r30, 0x50	; 80
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	8f 77       	andi	r24, 0x7F	; 127
     fca:	8c 93       	st	X, r24
     fcc:	9d c0       	rjmp	.+314    	; 0x1108 <ADC_u8_AutoTriggerEnable+0x1f2>
			break;
			
			case ADC_u8_TRIGGER_RESOURCE_ANALOG_COMPARATOR:			//001
			SET_BIT(ADC_u8_SFIOR_REG , 5);
     fce:	a0 e5       	ldi	r26, 0x50	; 80
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	e0 e5       	ldi	r30, 0x50	; 80
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	80 62       	ori	r24, 0x20	; 32
     fda:	8c 93       	st	X, r24
			CLR_BIT(ADC_u8_SFIOR_REG , 6);
     fdc:	a0 e5       	ldi	r26, 0x50	; 80
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	e0 e5       	ldi	r30, 0x50	; 80
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	8f 7b       	andi	r24, 0xBF	; 191
     fe8:	8c 93       	st	X, r24
			CLR_BIT(ADC_u8_SFIOR_REG , 7);
     fea:	a0 e5       	ldi	r26, 0x50	; 80
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	e0 e5       	ldi	r30, 0x50	; 80
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	8f 77       	andi	r24, 0x7F	; 127
     ff6:	8c 93       	st	X, r24
     ff8:	87 c0       	rjmp	.+270    	; 0x1108 <ADC_u8_AutoTriggerEnable+0x1f2>
			break;
			
			case ADC_u8_TRIGGER_RESOURCE_EXTI0:						//010
			CLR_BIT(ADC_u8_SFIOR_REG , 5);
     ffa:	a0 e5       	ldi	r26, 0x50	; 80
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	e0 e5       	ldi	r30, 0x50	; 80
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	8f 7d       	andi	r24, 0xDF	; 223
    1006:	8c 93       	st	X, r24
			SET_BIT(ADC_u8_SFIOR_REG , 6);
    1008:	a0 e5       	ldi	r26, 0x50	; 80
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	e0 e5       	ldi	r30, 0x50	; 80
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	80 64       	ori	r24, 0x40	; 64
    1014:	8c 93       	st	X, r24
			CLR_BIT(ADC_u8_SFIOR_REG , 7);
    1016:	a0 e5       	ldi	r26, 0x50	; 80
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	e0 e5       	ldi	r30, 0x50	; 80
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	8f 77       	andi	r24, 0x7F	; 127
    1022:	8c 93       	st	X, r24
    1024:	71 c0       	rjmp	.+226    	; 0x1108 <ADC_u8_AutoTriggerEnable+0x1f2>
			break;
			
			case ADC_u8_TRIGGER_RESOURCE_TIMER0_COMPARE_MATCH:		//011
			SET_BIT(ADC_u8_SFIOR_REG , 5);
    1026:	a0 e5       	ldi	r26, 0x50	; 80
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	e0 e5       	ldi	r30, 0x50	; 80
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	80 62       	ori	r24, 0x20	; 32
    1032:	8c 93       	st	X, r24
			SET_BIT(ADC_u8_SFIOR_REG , 6);
    1034:	a0 e5       	ldi	r26, 0x50	; 80
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	e0 e5       	ldi	r30, 0x50	; 80
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	80 64       	ori	r24, 0x40	; 64
    1040:	8c 93       	st	X, r24
			CLR_BIT(ADC_u8_SFIOR_REG , 7);
    1042:	a0 e5       	ldi	r26, 0x50	; 80
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	e0 e5       	ldi	r30, 0x50	; 80
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	8f 77       	andi	r24, 0x7F	; 127
    104e:	8c 93       	st	X, r24
    1050:	5b c0       	rjmp	.+182    	; 0x1108 <ADC_u8_AutoTriggerEnable+0x1f2>
			break;
			
			case ADC_u8_TRIGGER_RESOURCE_TIMER0_OVERFLOW:			//100
			CLR_BIT(ADC_u8_SFIOR_REG , 5);
    1052:	a0 e5       	ldi	r26, 0x50	; 80
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	e0 e5       	ldi	r30, 0x50	; 80
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	8f 7d       	andi	r24, 0xDF	; 223
    105e:	8c 93       	st	X, r24
			CLR_BIT(ADC_u8_SFIOR_REG , 6);
    1060:	a0 e5       	ldi	r26, 0x50	; 80
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	e0 e5       	ldi	r30, 0x50	; 80
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	8f 7b       	andi	r24, 0xBF	; 191
    106c:	8c 93       	st	X, r24
			SET_BIT(ADC_u8_SFIOR_REG , 7);
    106e:	a0 e5       	ldi	r26, 0x50	; 80
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	e0 e5       	ldi	r30, 0x50	; 80
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	80 68       	ori	r24, 0x80	; 128
    107a:	8c 93       	st	X, r24
    107c:	45 c0       	rjmp	.+138    	; 0x1108 <ADC_u8_AutoTriggerEnable+0x1f2>
			break;
			
			case ADC_u8_TRIGGER_RESOURCE_TIMER_COMPARE_MATCH_B:		//101
			SET_BIT(ADC_u8_SFIOR_REG , 5);
    107e:	a0 e5       	ldi	r26, 0x50	; 80
    1080:	b0 e0       	ldi	r27, 0x00	; 0
    1082:	e0 e5       	ldi	r30, 0x50	; 80
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	80 62       	ori	r24, 0x20	; 32
    108a:	8c 93       	st	X, r24
			CLR_BIT(ADC_u8_SFIOR_REG , 6);
    108c:	a0 e5       	ldi	r26, 0x50	; 80
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	e0 e5       	ldi	r30, 0x50	; 80
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	8f 7b       	andi	r24, 0xBF	; 191
    1098:	8c 93       	st	X, r24
			SET_BIT(ADC_u8_SFIOR_REG , 7);
    109a:	a0 e5       	ldi	r26, 0x50	; 80
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	e0 e5       	ldi	r30, 0x50	; 80
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	80 68       	ori	r24, 0x80	; 128
    10a6:	8c 93       	st	X, r24
    10a8:	2f c0       	rjmp	.+94     	; 0x1108 <ADC_u8_AutoTriggerEnable+0x1f2>
			break;
			
			case ADC_u8_TRIGGER_RESOURCE_TIMER1_OVER_FLOW:			//110
			CLR_BIT(ADC_u8_SFIOR_REG , 5);
    10aa:	a0 e5       	ldi	r26, 0x50	; 80
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	e0 e5       	ldi	r30, 0x50	; 80
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	8f 7d       	andi	r24, 0xDF	; 223
    10b6:	8c 93       	st	X, r24
			SET_BIT(ADC_u8_SFIOR_REG , 6);
    10b8:	a0 e5       	ldi	r26, 0x50	; 80
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	e0 e5       	ldi	r30, 0x50	; 80
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	80 64       	ori	r24, 0x40	; 64
    10c4:	8c 93       	st	X, r24
			SET_BIT(ADC_u8_SFIOR_REG , 7);
    10c6:	a0 e5       	ldi	r26, 0x50	; 80
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	e0 e5       	ldi	r30, 0x50	; 80
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	80 68       	ori	r24, 0x80	; 128
    10d2:	8c 93       	st	X, r24
    10d4:	19 c0       	rjmp	.+50     	; 0x1108 <ADC_u8_AutoTriggerEnable+0x1f2>
			break;
			
			case ADC_u8_TRIGGER_RESOURCE_TIMER1_CAPTURE_EVENT:		//111
			SET_BIT(ADC_u8_SFIOR_REG , 5);
    10d6:	a0 e5       	ldi	r26, 0x50	; 80
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	e0 e5       	ldi	r30, 0x50	; 80
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	80 62       	ori	r24, 0x20	; 32
    10e2:	8c 93       	st	X, r24
			SET_BIT(ADC_u8_SFIOR_REG , 6);
    10e4:	a0 e5       	ldi	r26, 0x50	; 80
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e0 e5       	ldi	r30, 0x50	; 80
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	80 64       	ori	r24, 0x40	; 64
    10f0:	8c 93       	st	X, r24
			SET_BIT(ADC_u8_SFIOR_REG , 7);
    10f2:	a0 e5       	ldi	r26, 0x50	; 80
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	e0 e5       	ldi	r30, 0x50	; 80
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	80 68       	ori	r24, 0x80	; 128
    10fe:	8c 93       	st	X, r24
    1100:	03 c0       	rjmp	.+6      	; 0x1108 <ADC_u8_AutoTriggerEnable+0x1f2>
			break;
			
			default:
			Local_u8ErrorState = STD_TYPES_NOK;
    1102:	19 82       	std	Y+1, r1	; 0x01
    1104:	01 c0       	rjmp	.+2      	; 0x1108 <ADC_u8_AutoTriggerEnable+0x1f2>
			break;
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1106:	19 82       	std	Y+1, r1	; 0x01
	}
	
	/*Enable ADC Auto Register*/
	SET_BIT(ADC_u8_ADCSRA_REG , ADC_u8_AUTO_TRIGGER_ENABLE_BIT);
    1108:	a6 e2       	ldi	r26, 0x26	; 38
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	e6 e2       	ldi	r30, 0x26	; 38
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	80 62       	ori	r24, 0x20	; 32
    1114:	8c 93       	st	X, r24
	
	return Local_u8ErrorState;
    1116:	89 81       	ldd	r24, Y+1	; 0x01
}
    1118:	0f 90       	pop	r0
    111a:	0f 90       	pop	r0
    111c:	0f 90       	pop	r0
    111e:	0f 90       	pop	r0
    1120:	cf 91       	pop	r28
    1122:	df 91       	pop	r29
    1124:	08 95       	ret

00001126 <DIO_voidInit>:
#include	"DIO_config.h"


void DIO_voidInit(void)
/**Function to initiate the directions and the values of all the pins**/
{
    1126:	df 93       	push	r29
    1128:	cf 93       	push	r28
    112a:	cd b7       	in	r28, 0x3d	; 61
    112c:	de b7       	in	r29, 0x3e	; 62
	//Initiating the directions of pins
	DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INITIAL_DIRECTION , DIO_u8_PA6_INITIAL_DIRECTION , DIO_u8_PA5_INITIAL_DIRECTION , DIO_u8_PA4_INITIAL_DIRECTION , 
    112e:	ea e3       	ldi	r30, 0x3A	; 58
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 ef       	ldi	r24, 0xF0	; 240
    1134:	80 83       	st	Z, r24
						   DIO_u8_PA3_INITIAL_DIRECTION , DIO_u8_PA2_INITIAL_DIRECTION , DIO_u8_PA1_INITIAL_DIRECTION , DIO_u8_PA0_INITIAL_DIRECTION); 
						   
	DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INITIAL_DIRECTION , DIO_u8_PB6_INITIAL_DIRECTION , DIO_u8_PB5_INITIAL_DIRECTION , DIO_u8_PB4_INITIAL_DIRECTION , 
    1136:	e7 e3       	ldi	r30, 0x37	; 55
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	88 e0       	ldi	r24, 0x08	; 8
    113c:	80 83       	st	Z, r24
						   DIO_u8_PB3_INITIAL_DIRECTION , DIO_u8_PB2_INITIAL_DIRECTION , DIO_u8_PB1_INITIAL_DIRECTION , DIO_u8_PB0_INITIAL_DIRECTION); 
						   
	DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INITIAL_DIRECTION , DIO_u8_PC6_INITIAL_DIRECTION , DIO_u8_PC5_INITIAL_DIRECTION , DIO_u8_PC4_INITIAL_DIRECTION , 
    113e:	e4 e3       	ldi	r30, 0x34	; 52
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	8f ef       	ldi	r24, 0xFF	; 255
    1144:	80 83       	st	Z, r24
						   DIO_u8_PC3_INITIAL_DIRECTION , DIO_u8_PC2_INITIAL_DIRECTION , DIO_u8_PC1_INITIAL_DIRECTION , DIO_u8_PC0_INITIAL_DIRECTION); 
						   
	DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_INITIAL_DIRECTION , DIO_u8_PD6_INITIAL_DIRECTION , DIO_u8_PD5_INITIAL_DIRECTION , DIO_u8_PD4_INITIAL_DIRECTION , 
    1146:	e1 e3       	ldi	r30, 0x31	; 49
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	8b ef       	ldi	r24, 0xFB	; 251
    114c:	80 83       	st	Z, r24
						                              
										

						   
	//Initiating the values of pins
	DIO_u8_PORTA_REG = Conc(DIO_u8_PA7_INITIAL_VALUE , DIO_u8_PA6_INITIAL_VALUE , DIO_u8_PA5_INITIAL_VALUE , DIO_u8_PA4_INITIAL_VALUE , 
    114e:	eb e3       	ldi	r30, 0x3B	; 59
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	10 82       	st	Z, r1
							DIO_u8_PA3_INITIAL_VALUE , DIO_u8_PA2_INITIAL_VALUE , DIO_u8_PA1_INITIAL_VALUE , DIO_u8_PA0_INITIAL_VALUE);
						    
						   
	DIO_u8_PORTB_REG = Conc(DIO_u8_PB7_INITIAL_VALUE , DIO_u8_PB6_INITIAL_VALUE , DIO_u8_PB5_INITIAL_VALUE , DIO_u8_PB4_INITIAL_VALUE , 
    1154:	e8 e3       	ldi	r30, 0x38	; 56
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	88 ef       	ldi	r24, 0xF8	; 248
    115a:	80 83       	st	Z, r24
						    DIO_u8_PB3_INITIAL_VALUE , DIO_u8_PB2_INITIAL_VALUE , DIO_u8_PB1_INITIAL_VALUE , DIO_u8_PB0_INITIAL_VALUE);

	DIO_u8_PORTC_REG = Conc(DIO_u8_PC7_INITIAL_VALUE , DIO_u8_PC6_INITIAL_VALUE , DIO_u8_PC5_INITIAL_VALUE , DIO_u8_PC4_INITIAL_VALUE , 
    115c:	e5 e3       	ldi	r30, 0x35	; 53
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	10 82       	st	Z, r1
						    DIO_u8_PC3_INITIAL_VALUE , DIO_u8_PC2_INITIAL_VALUE , DIO_u8_PC1_INITIAL_VALUE , DIO_u8_PC0_INITIAL_VALUE);
						   
	DIO_u8_PORTD_REG = Conc(DIO_u8_PD7_INITIAL_VALUE , DIO_u8_PD6_INITIAL_VALUE , DIO_u8_PD5_INITIAL_VALUE , DIO_u8_PD4_INITIAL_VALUE , 
    1162:	e2 e3       	ldi	r30, 0x32	; 50
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	8f e1       	ldi	r24, 0x1F	; 31
    1168:	80 83       	st	Z, r24
						    DIO_u8_PD3_INITIAL_VALUE , DIO_u8_PD2_INITIAL_VALUE , DIO_u8_PD1_INITIAL_VALUE , DIO_u8_PD0_INITIAL_VALUE);
}
    116a:	cf 91       	pop	r28
    116c:	df 91       	pop	r29
    116e:	08 95       	ret

00001170 <DIO_u8SetPinDirection>:

/*************************************************************************************/

u8 DIO_u8SetPinDirection  (u8 Copy_u8PortId , u8 Copy_u8PinId , u8 Copy_u8PinDirection)
/**Function to specify the direction of a pin whether it's input or output**/
{
    1170:	df 93       	push	r29
    1172:	cf 93       	push	r28
    1174:	00 d0       	rcall	.+0      	; 0x1176 <DIO_u8SetPinDirection+0x6>
    1176:	00 d0       	rcall	.+0      	; 0x1178 <DIO_u8SetPinDirection+0x8>
    1178:	cd b7       	in	r28, 0x3d	; 61
    117a:	de b7       	in	r29, 0x3e	; 62
    117c:	8a 83       	std	Y+2, r24	; 0x02
    117e:	6b 83       	std	Y+3, r22	; 0x03
    1180:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;					//u8 Variable - To return the state of the function at the end of it
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	89 83       	std	Y+1, r24	; 0x01
	
	if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7) && ((Copy_u8PinDirection == DIO_u8_OUTPUT) || (Copy_u8PinDirection == DIO_u8_INPUT)))		//Checks the validity of the user inputs
    1186:	8a 81       	ldd	r24, Y+2	; 0x02
    1188:	84 30       	cpi	r24, 0x04	; 4
    118a:	08 f0       	brcs	.+2      	; 0x118e <DIO_u8SetPinDirection+0x1e>
    118c:	d6 c0       	rjmp	.+428    	; 0x133a <DIO_u8SetPinDirection+0x1ca>
    118e:	8b 81       	ldd	r24, Y+3	; 0x03
    1190:	88 30       	cpi	r24, 0x08	; 8
    1192:	08 f0       	brcs	.+2      	; 0x1196 <DIO_u8SetPinDirection+0x26>
    1194:	d2 c0       	rjmp	.+420    	; 0x133a <DIO_u8SetPinDirection+0x1ca>
    1196:	8c 81       	ldd	r24, Y+4	; 0x04
    1198:	81 30       	cpi	r24, 0x01	; 1
    119a:	21 f0       	breq	.+8      	; 0x11a4 <DIO_u8SetPinDirection+0x34>
    119c:	8c 81       	ldd	r24, Y+4	; 0x04
    119e:	88 23       	and	r24, r24
    11a0:	09 f0       	breq	.+2      	; 0x11a4 <DIO_u8SetPinDirection+0x34>
    11a2:	cb c0       	rjmp	.+406    	; 0x133a <DIO_u8SetPinDirection+0x1ca>
	{
		if(Copy_u8PortId == DIO_u8_PORTA)				///PORTA is chosen
    11a4:	8a 81       	ldd	r24, Y+2	; 0x02
    11a6:	88 23       	and	r24, r24
    11a8:	81 f5       	brne	.+96     	; 0x120a <DIO_u8SetPinDirection+0x9a>
		{
				if(Copy_u8PinDirection == DIO_u8_OUTPUT)		//-->Pin is output
    11aa:	8c 81       	ldd	r24, Y+4	; 0x04
    11ac:	81 30       	cpi	r24, 0x01	; 1
    11ae:	a1 f4       	brne	.+40     	; 0x11d8 <DIO_u8SetPinDirection+0x68>
				{
					SET_BIT(DIO_u8_DDRA_REG , Copy_u8PinId);
    11b0:	aa e3       	ldi	r26, 0x3A	; 58
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	ea e3       	ldi	r30, 0x3A	; 58
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	48 2f       	mov	r20, r24
    11bc:	8b 81       	ldd	r24, Y+3	; 0x03
    11be:	28 2f       	mov	r18, r24
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	02 2e       	mov	r0, r18
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <DIO_u8SetPinDirection+0x5e>
    11ca:	88 0f       	add	r24, r24
    11cc:	99 1f       	adc	r25, r25
    11ce:	0a 94       	dec	r0
    11d0:	e2 f7       	brpl	.-8      	; 0x11ca <DIO_u8SetPinDirection+0x5a>
    11d2:	84 2b       	or	r24, r20
    11d4:	8c 93       	st	X, r24
    11d6:	b2 c0       	rjmp	.+356    	; 0x133c <DIO_u8SetPinDirection+0x1cc>
				}
				
				else if(Copy_u8PinDirection == DIO_u8_INPUT)	//-->Pin is input
    11d8:	8c 81       	ldd	r24, Y+4	; 0x04
    11da:	88 23       	and	r24, r24
    11dc:	09 f0       	breq	.+2      	; 0x11e0 <DIO_u8SetPinDirection+0x70>
    11de:	ae c0       	rjmp	.+348    	; 0x133c <DIO_u8SetPinDirection+0x1cc>
				{
					CLR_BIT(DIO_u8_DDRA_REG , Copy_u8PinId);
    11e0:	aa e3       	ldi	r26, 0x3A	; 58
    11e2:	b0 e0       	ldi	r27, 0x00	; 0
    11e4:	ea e3       	ldi	r30, 0x3A	; 58
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	80 81       	ld	r24, Z
    11ea:	48 2f       	mov	r20, r24
    11ec:	8b 81       	ldd	r24, Y+3	; 0x03
    11ee:	28 2f       	mov	r18, r24
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	02 2e       	mov	r0, r18
    11f8:	02 c0       	rjmp	.+4      	; 0x11fe <DIO_u8SetPinDirection+0x8e>
    11fa:	88 0f       	add	r24, r24
    11fc:	99 1f       	adc	r25, r25
    11fe:	0a 94       	dec	r0
    1200:	e2 f7       	brpl	.-8      	; 0x11fa <DIO_u8SetPinDirection+0x8a>
    1202:	80 95       	com	r24
    1204:	84 23       	and	r24, r20
    1206:	8c 93       	st	X, r24
    1208:	99 c0       	rjmp	.+306    	; 0x133c <DIO_u8SetPinDirection+0x1cc>
				}
		}
		
		
		else if(Copy_u8PortId == DIO_u8_PORTB)			///PORTB is chosen
    120a:	8a 81       	ldd	r24, Y+2	; 0x02
    120c:	81 30       	cpi	r24, 0x01	; 1
    120e:	81 f5       	brne	.+96     	; 0x1270 <DIO_u8SetPinDirection+0x100>
		{
				if(Copy_u8PinDirection == DIO_u8_OUTPUT)		//-->Pin is output
    1210:	8c 81       	ldd	r24, Y+4	; 0x04
    1212:	81 30       	cpi	r24, 0x01	; 1
    1214:	a1 f4       	brne	.+40     	; 0x123e <DIO_u8SetPinDirection+0xce>
				{
					SET_BIT(DIO_u8_DDRB_REG , Copy_u8PinId);
    1216:	a7 e3       	ldi	r26, 0x37	; 55
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	e7 e3       	ldi	r30, 0x37	; 55
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	48 2f       	mov	r20, r24
    1222:	8b 81       	ldd	r24, Y+3	; 0x03
    1224:	28 2f       	mov	r18, r24
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	02 2e       	mov	r0, r18
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <DIO_u8SetPinDirection+0xc4>
    1230:	88 0f       	add	r24, r24
    1232:	99 1f       	adc	r25, r25
    1234:	0a 94       	dec	r0
    1236:	e2 f7       	brpl	.-8      	; 0x1230 <DIO_u8SetPinDirection+0xc0>
    1238:	84 2b       	or	r24, r20
    123a:	8c 93       	st	X, r24
    123c:	7f c0       	rjmp	.+254    	; 0x133c <DIO_u8SetPinDirection+0x1cc>
				}
				
				else if(Copy_u8PinDirection == DIO_u8_INPUT)	//-->Pin is input
    123e:	8c 81       	ldd	r24, Y+4	; 0x04
    1240:	88 23       	and	r24, r24
    1242:	09 f0       	breq	.+2      	; 0x1246 <DIO_u8SetPinDirection+0xd6>
    1244:	7b c0       	rjmp	.+246    	; 0x133c <DIO_u8SetPinDirection+0x1cc>
				{
					CLR_BIT(DIO_u8_DDRB_REG , Copy_u8PinId);
    1246:	a7 e3       	ldi	r26, 0x37	; 55
    1248:	b0 e0       	ldi	r27, 0x00	; 0
    124a:	e7 e3       	ldi	r30, 0x37	; 55
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	48 2f       	mov	r20, r24
    1252:	8b 81       	ldd	r24, Y+3	; 0x03
    1254:	28 2f       	mov	r18, r24
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	02 2e       	mov	r0, r18
    125e:	02 c0       	rjmp	.+4      	; 0x1264 <DIO_u8SetPinDirection+0xf4>
    1260:	88 0f       	add	r24, r24
    1262:	99 1f       	adc	r25, r25
    1264:	0a 94       	dec	r0
    1266:	e2 f7       	brpl	.-8      	; 0x1260 <DIO_u8SetPinDirection+0xf0>
    1268:	80 95       	com	r24
    126a:	84 23       	and	r24, r20
    126c:	8c 93       	st	X, r24
    126e:	66 c0       	rjmp	.+204    	; 0x133c <DIO_u8SetPinDirection+0x1cc>
				}
		}
		
		
		else if(Copy_u8PortId == DIO_u8_PORTC)			///PORTC is chosen
    1270:	8a 81       	ldd	r24, Y+2	; 0x02
    1272:	82 30       	cpi	r24, 0x02	; 2
    1274:	81 f5       	brne	.+96     	; 0x12d6 <DIO_u8SetPinDirection+0x166>
		{
				if(Copy_u8PinDirection == DIO_u8_OUTPUT)		//-->Pin is output
    1276:	8c 81       	ldd	r24, Y+4	; 0x04
    1278:	81 30       	cpi	r24, 0x01	; 1
    127a:	a1 f4       	brne	.+40     	; 0x12a4 <DIO_u8SetPinDirection+0x134>
				{
					SET_BIT(DIO_u8_DDRC_REG , Copy_u8PinId);
    127c:	a4 e3       	ldi	r26, 0x34	; 52
    127e:	b0 e0       	ldi	r27, 0x00	; 0
    1280:	e4 e3       	ldi	r30, 0x34	; 52
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	48 2f       	mov	r20, r24
    1288:	8b 81       	ldd	r24, Y+3	; 0x03
    128a:	28 2f       	mov	r18, r24
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	02 2e       	mov	r0, r18
    1294:	02 c0       	rjmp	.+4      	; 0x129a <DIO_u8SetPinDirection+0x12a>
    1296:	88 0f       	add	r24, r24
    1298:	99 1f       	adc	r25, r25
    129a:	0a 94       	dec	r0
    129c:	e2 f7       	brpl	.-8      	; 0x1296 <DIO_u8SetPinDirection+0x126>
    129e:	84 2b       	or	r24, r20
    12a0:	8c 93       	st	X, r24
    12a2:	4c c0       	rjmp	.+152    	; 0x133c <DIO_u8SetPinDirection+0x1cc>
				}
				
				else if(Copy_u8PinDirection == DIO_u8_INPUT)	//-->Pin is input
    12a4:	8c 81       	ldd	r24, Y+4	; 0x04
    12a6:	88 23       	and	r24, r24
    12a8:	09 f0       	breq	.+2      	; 0x12ac <DIO_u8SetPinDirection+0x13c>
    12aa:	48 c0       	rjmp	.+144    	; 0x133c <DIO_u8SetPinDirection+0x1cc>
				{
					CLR_BIT(DIO_u8_DDRC_REG , Copy_u8PinId);
    12ac:	a4 e3       	ldi	r26, 0x34	; 52
    12ae:	b0 e0       	ldi	r27, 0x00	; 0
    12b0:	e4 e3       	ldi	r30, 0x34	; 52
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	80 81       	ld	r24, Z
    12b6:	48 2f       	mov	r20, r24
    12b8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ba:	28 2f       	mov	r18, r24
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	02 2e       	mov	r0, r18
    12c4:	02 c0       	rjmp	.+4      	; 0x12ca <DIO_u8SetPinDirection+0x15a>
    12c6:	88 0f       	add	r24, r24
    12c8:	99 1f       	adc	r25, r25
    12ca:	0a 94       	dec	r0
    12cc:	e2 f7       	brpl	.-8      	; 0x12c6 <DIO_u8SetPinDirection+0x156>
    12ce:	80 95       	com	r24
    12d0:	84 23       	and	r24, r20
    12d2:	8c 93       	st	X, r24
    12d4:	33 c0       	rjmp	.+102    	; 0x133c <DIO_u8SetPinDirection+0x1cc>
				}
		}
		
		
		else if(Copy_u8PortId == DIO_u8_PORTD)			///PORTD is chosen
    12d6:	8a 81       	ldd	r24, Y+2	; 0x02
    12d8:	83 30       	cpi	r24, 0x03	; 3
    12da:	81 f5       	brne	.+96     	; 0x133c <DIO_u8SetPinDirection+0x1cc>
		{
				if(Copy_u8PinDirection == DIO_u8_OUTPUT)		//-->Pin is output
    12dc:	8c 81       	ldd	r24, Y+4	; 0x04
    12de:	81 30       	cpi	r24, 0x01	; 1
    12e0:	a1 f4       	brne	.+40     	; 0x130a <DIO_u8SetPinDirection+0x19a>
				{
					SET_BIT(DIO_u8_DDRD_REG , Copy_u8PinId);
    12e2:	a1 e3       	ldi	r26, 0x31	; 49
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	e1 e3       	ldi	r30, 0x31	; 49
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	48 2f       	mov	r20, r24
    12ee:	8b 81       	ldd	r24, Y+3	; 0x03
    12f0:	28 2f       	mov	r18, r24
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	02 2e       	mov	r0, r18
    12fa:	02 c0       	rjmp	.+4      	; 0x1300 <DIO_u8SetPinDirection+0x190>
    12fc:	88 0f       	add	r24, r24
    12fe:	99 1f       	adc	r25, r25
    1300:	0a 94       	dec	r0
    1302:	e2 f7       	brpl	.-8      	; 0x12fc <DIO_u8SetPinDirection+0x18c>
    1304:	84 2b       	or	r24, r20
    1306:	8c 93       	st	X, r24
    1308:	19 c0       	rjmp	.+50     	; 0x133c <DIO_u8SetPinDirection+0x1cc>
				}
				
				else if(Copy_u8PinDirection == DIO_u8_INPUT)	//-->Pin is input
    130a:	8c 81       	ldd	r24, Y+4	; 0x04
    130c:	88 23       	and	r24, r24
    130e:	b1 f4       	brne	.+44     	; 0x133c <DIO_u8SetPinDirection+0x1cc>
				{
					CLR_BIT(DIO_u8_DDRD_REG , Copy_u8PinId);
    1310:	a1 e3       	ldi	r26, 0x31	; 49
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	e1 e3       	ldi	r30, 0x31	; 49
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	48 2f       	mov	r20, r24
    131c:	8b 81       	ldd	r24, Y+3	; 0x03
    131e:	28 2f       	mov	r18, r24
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	02 2e       	mov	r0, r18
    1328:	02 c0       	rjmp	.+4      	; 0x132e <DIO_u8SetPinDirection+0x1be>
    132a:	88 0f       	add	r24, r24
    132c:	99 1f       	adc	r25, r25
    132e:	0a 94       	dec	r0
    1330:	e2 f7       	brpl	.-8      	; 0x132a <DIO_u8SetPinDirection+0x1ba>
    1332:	80 95       	com	r24
    1334:	84 23       	and	r24, r20
    1336:	8c 93       	st	X, r24
    1338:	01 c0       	rjmp	.+2      	; 0x133c <DIO_u8SetPinDirection+0x1cc>
	}
	
	
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;						//The validity of the user inputs isn't guaranteed
    133a:	19 82       	std	Y+1, r1	; 0x01
	}
	
	
		return Local_u8ErrorState;
    133c:	89 81       	ldd	r24, Y+1	; 0x01
}
    133e:	0f 90       	pop	r0
    1340:	0f 90       	pop	r0
    1342:	0f 90       	pop	r0
    1344:	0f 90       	pop	r0
    1346:	cf 91       	pop	r28
    1348:	df 91       	pop	r29
    134a:	08 95       	ret

0000134c <DIO_u8SetPinValue>:
	
/*************************************************************************************/	
		
u8 DIO_u8SetPinValue      (u8 Copy_u8PortId , u8 Copy_u8PinId , u8 Copy_u8PinValue)
/**Function to specify the value of a pin whether it's high or low**/
{
    134c:	df 93       	push	r29
    134e:	cf 93       	push	r28
    1350:	cd b7       	in	r28, 0x3d	; 61
    1352:	de b7       	in	r29, 0x3e	; 62
    1354:	2a 97       	sbiw	r28, 0x0a	; 10
    1356:	0f b6       	in	r0, 0x3f	; 63
    1358:	f8 94       	cli
    135a:	de bf       	out	0x3e, r29	; 62
    135c:	0f be       	out	0x3f, r0	; 63
    135e:	cd bf       	out	0x3d, r28	; 61
    1360:	8a 83       	std	Y+2, r24	; 0x02
    1362:	6b 83       	std	Y+3, r22	; 0x03
    1364:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;					//u8 Variable - To return the state of the function at the end of it
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_u8PinId <= DIO_u8_PIN7)							//Checks the validity of the user inputs of the Pin value
    136a:	8b 81       	ldd	r24, Y+3	; 0x03
    136c:	88 30       	cpi	r24, 0x08	; 8
    136e:	08 f0       	brcs	.+2      	; 0x1372 <DIO_u8SetPinValue+0x26>
    1370:	f9 c0       	rjmp	.+498    	; 0x1564 <DIO_u8SetPinValue+0x218>
	{
		switch(Copy_u8PinValue)		//Checks the user input for Pin value
    1372:	8c 81       	ldd	r24, Y+4	; 0x04
    1374:	28 2f       	mov	r18, r24
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	3a 87       	std	Y+10, r19	; 0x0a
    137a:	29 87       	std	Y+9, r18	; 0x09
    137c:	89 85       	ldd	r24, Y+9	; 0x09
    137e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1380:	00 97       	sbiw	r24, 0x00	; 0
    1382:	09 f4       	brne	.+2      	; 0x1386 <DIO_u8SetPinValue+0x3a>
    1384:	77 c0       	rjmp	.+238    	; 0x1474 <DIO_u8SetPinValue+0x128>
    1386:	29 85       	ldd	r18, Y+9	; 0x09
    1388:	3a 85       	ldd	r19, Y+10	; 0x0a
    138a:	21 30       	cpi	r18, 0x01	; 1
    138c:	31 05       	cpc	r19, r1
    138e:	09 f0       	breq	.+2      	; 0x1392 <DIO_u8SetPinValue+0x46>
    1390:	e7 c0       	rjmp	.+462    	; 0x1560 <DIO_u8SetPinValue+0x214>
		{
			case DIO_u8_HIGH:	///High is chosen
			switch(Copy_u8PortId)	//Checks the user input for Port value
    1392:	8a 81       	ldd	r24, Y+2	; 0x02
    1394:	28 2f       	mov	r18, r24
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	38 87       	std	Y+8, r19	; 0x08
    139a:	2f 83       	std	Y+7, r18	; 0x07
    139c:	8f 81       	ldd	r24, Y+7	; 0x07
    139e:	98 85       	ldd	r25, Y+8	; 0x08
    13a0:	81 30       	cpi	r24, 0x01	; 1
    13a2:	91 05       	cpc	r25, r1
    13a4:	49 f1       	breq	.+82     	; 0x13f8 <DIO_u8SetPinValue+0xac>
    13a6:	2f 81       	ldd	r18, Y+7	; 0x07
    13a8:	38 85       	ldd	r19, Y+8	; 0x08
    13aa:	22 30       	cpi	r18, 0x02	; 2
    13ac:	31 05       	cpc	r19, r1
    13ae:	2c f4       	brge	.+10     	; 0x13ba <DIO_u8SetPinValue+0x6e>
    13b0:	8f 81       	ldd	r24, Y+7	; 0x07
    13b2:	98 85       	ldd	r25, Y+8	; 0x08
    13b4:	00 97       	sbiw	r24, 0x00	; 0
    13b6:	61 f0       	breq	.+24     	; 0x13d0 <DIO_u8SetPinValue+0x84>
    13b8:	5b c0       	rjmp	.+182    	; 0x1470 <DIO_u8SetPinValue+0x124>
    13ba:	2f 81       	ldd	r18, Y+7	; 0x07
    13bc:	38 85       	ldd	r19, Y+8	; 0x08
    13be:	22 30       	cpi	r18, 0x02	; 2
    13c0:	31 05       	cpc	r19, r1
    13c2:	71 f1       	breq	.+92     	; 0x1420 <DIO_u8SetPinValue+0xd4>
    13c4:	8f 81       	ldd	r24, Y+7	; 0x07
    13c6:	98 85       	ldd	r25, Y+8	; 0x08
    13c8:	83 30       	cpi	r24, 0x03	; 3
    13ca:	91 05       	cpc	r25, r1
    13cc:	e9 f1       	breq	.+122    	; 0x1448 <DIO_u8SetPinValue+0xfc>
    13ce:	50 c0       	rjmp	.+160    	; 0x1470 <DIO_u8SetPinValue+0x124>
			{
				case DIO_u8_PORTA: SET_BIT(DIO_u8_PORTA_REG , Copy_u8PinId); break;		///PORTA is chosen
    13d0:	ab e3       	ldi	r26, 0x3B	; 59
    13d2:	b0 e0       	ldi	r27, 0x00	; 0
    13d4:	eb e3       	ldi	r30, 0x3B	; 59
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	48 2f       	mov	r20, r24
    13dc:	8b 81       	ldd	r24, Y+3	; 0x03
    13de:	28 2f       	mov	r18, r24
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	02 2e       	mov	r0, r18
    13e8:	02 c0       	rjmp	.+4      	; 0x13ee <DIO_u8SetPinValue+0xa2>
    13ea:	88 0f       	add	r24, r24
    13ec:	99 1f       	adc	r25, r25
    13ee:	0a 94       	dec	r0
    13f0:	e2 f7       	brpl	.-8      	; 0x13ea <DIO_u8SetPinValue+0x9e>
    13f2:	84 2b       	or	r24, r20
    13f4:	8c 93       	st	X, r24
    13f6:	b7 c0       	rjmp	.+366    	; 0x1566 <DIO_u8SetPinValue+0x21a>
				case DIO_u8_PORTB: SET_BIT(DIO_u8_PORTB_REG , Copy_u8PinId); break;     ///PORTB is chosen
    13f8:	a8 e3       	ldi	r26, 0x38	; 56
    13fa:	b0 e0       	ldi	r27, 0x00	; 0
    13fc:	e8 e3       	ldi	r30, 0x38	; 56
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	48 2f       	mov	r20, r24
    1404:	8b 81       	ldd	r24, Y+3	; 0x03
    1406:	28 2f       	mov	r18, r24
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	02 2e       	mov	r0, r18
    1410:	02 c0       	rjmp	.+4      	; 0x1416 <DIO_u8SetPinValue+0xca>
    1412:	88 0f       	add	r24, r24
    1414:	99 1f       	adc	r25, r25
    1416:	0a 94       	dec	r0
    1418:	e2 f7       	brpl	.-8      	; 0x1412 <DIO_u8SetPinValue+0xc6>
    141a:	84 2b       	or	r24, r20
    141c:	8c 93       	st	X, r24
    141e:	a3 c0       	rjmp	.+326    	; 0x1566 <DIO_u8SetPinValue+0x21a>
				case DIO_u8_PORTC: SET_BIT(DIO_u8_PORTC_REG , Copy_u8PinId); break;     ///PORTC is chosen
    1420:	a5 e3       	ldi	r26, 0x35	; 53
    1422:	b0 e0       	ldi	r27, 0x00	; 0
    1424:	e5 e3       	ldi	r30, 0x35	; 53
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	48 2f       	mov	r20, r24
    142c:	8b 81       	ldd	r24, Y+3	; 0x03
    142e:	28 2f       	mov	r18, r24
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	02 2e       	mov	r0, r18
    1438:	02 c0       	rjmp	.+4      	; 0x143e <DIO_u8SetPinValue+0xf2>
    143a:	88 0f       	add	r24, r24
    143c:	99 1f       	adc	r25, r25
    143e:	0a 94       	dec	r0
    1440:	e2 f7       	brpl	.-8      	; 0x143a <DIO_u8SetPinValue+0xee>
    1442:	84 2b       	or	r24, r20
    1444:	8c 93       	st	X, r24
    1446:	8f c0       	rjmp	.+286    	; 0x1566 <DIO_u8SetPinValue+0x21a>
				case DIO_u8_PORTD: SET_BIT(DIO_u8_PORTD_REG , Copy_u8PinId); break;     ///PORTD is chosen
    1448:	a2 e3       	ldi	r26, 0x32	; 50
    144a:	b0 e0       	ldi	r27, 0x00	; 0
    144c:	e2 e3       	ldi	r30, 0x32	; 50
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	48 2f       	mov	r20, r24
    1454:	8b 81       	ldd	r24, Y+3	; 0x03
    1456:	28 2f       	mov	r18, r24
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	02 2e       	mov	r0, r18
    1460:	02 c0       	rjmp	.+4      	; 0x1466 <DIO_u8SetPinValue+0x11a>
    1462:	88 0f       	add	r24, r24
    1464:	99 1f       	adc	r25, r25
    1466:	0a 94       	dec	r0
    1468:	e2 f7       	brpl	.-8      	; 0x1462 <DIO_u8SetPinValue+0x116>
    146a:	84 2b       	or	r24, r20
    146c:	8c 93       	st	X, r24
    146e:	7b c0       	rjmp	.+246    	; 0x1566 <DIO_u8SetPinValue+0x21a>
				default: Local_u8ErrorState = STD_TYPES_NOK; break;						//Wrong input for the Port Id
    1470:	19 82       	std	Y+1, r1	; 0x01
    1472:	79 c0       	rjmp	.+242    	; 0x1566 <DIO_u8SetPinValue+0x21a>
			}
			break;
			
			case DIO_u8_LOW:	///Low is chosen
			switch(Copy_u8PortId)	//Checks the user input for port value
    1474:	8a 81       	ldd	r24, Y+2	; 0x02
    1476:	28 2f       	mov	r18, r24
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	3e 83       	std	Y+6, r19	; 0x06
    147c:	2d 83       	std	Y+5, r18	; 0x05
    147e:	8d 81       	ldd	r24, Y+5	; 0x05
    1480:	9e 81       	ldd	r25, Y+6	; 0x06
    1482:	81 30       	cpi	r24, 0x01	; 1
    1484:	91 05       	cpc	r25, r1
    1486:	59 f1       	breq	.+86     	; 0x14de <DIO_u8SetPinValue+0x192>
    1488:	2d 81       	ldd	r18, Y+5	; 0x05
    148a:	3e 81       	ldd	r19, Y+6	; 0x06
    148c:	22 30       	cpi	r18, 0x02	; 2
    148e:	31 05       	cpc	r19, r1
    1490:	2c f4       	brge	.+10     	; 0x149c <DIO_u8SetPinValue+0x150>
    1492:	8d 81       	ldd	r24, Y+5	; 0x05
    1494:	9e 81       	ldd	r25, Y+6	; 0x06
    1496:	00 97       	sbiw	r24, 0x00	; 0
    1498:	69 f0       	breq	.+26     	; 0x14b4 <DIO_u8SetPinValue+0x168>
    149a:	60 c0       	rjmp	.+192    	; 0x155c <DIO_u8SetPinValue+0x210>
    149c:	2d 81       	ldd	r18, Y+5	; 0x05
    149e:	3e 81       	ldd	r19, Y+6	; 0x06
    14a0:	22 30       	cpi	r18, 0x02	; 2
    14a2:	31 05       	cpc	r19, r1
    14a4:	89 f1       	breq	.+98     	; 0x1508 <DIO_u8SetPinValue+0x1bc>
    14a6:	8d 81       	ldd	r24, Y+5	; 0x05
    14a8:	9e 81       	ldd	r25, Y+6	; 0x06
    14aa:	83 30       	cpi	r24, 0x03	; 3
    14ac:	91 05       	cpc	r25, r1
    14ae:	09 f4       	brne	.+2      	; 0x14b2 <DIO_u8SetPinValue+0x166>
    14b0:	40 c0       	rjmp	.+128    	; 0x1532 <DIO_u8SetPinValue+0x1e6>
    14b2:	54 c0       	rjmp	.+168    	; 0x155c <DIO_u8SetPinValue+0x210>
			{
				case DIO_u8_PORTA: CLR_BIT(DIO_u8_PORTA_REG , Copy_u8PinId); break;		///PORTA is chosen
    14b4:	ab e3       	ldi	r26, 0x3B	; 59
    14b6:	b0 e0       	ldi	r27, 0x00	; 0
    14b8:	eb e3       	ldi	r30, 0x3B	; 59
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 81       	ld	r24, Z
    14be:	48 2f       	mov	r20, r24
    14c0:	8b 81       	ldd	r24, Y+3	; 0x03
    14c2:	28 2f       	mov	r18, r24
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	81 e0       	ldi	r24, 0x01	; 1
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	02 2e       	mov	r0, r18
    14cc:	02 c0       	rjmp	.+4      	; 0x14d2 <DIO_u8SetPinValue+0x186>
    14ce:	88 0f       	add	r24, r24
    14d0:	99 1f       	adc	r25, r25
    14d2:	0a 94       	dec	r0
    14d4:	e2 f7       	brpl	.-8      	; 0x14ce <DIO_u8SetPinValue+0x182>
    14d6:	80 95       	com	r24
    14d8:	84 23       	and	r24, r20
    14da:	8c 93       	st	X, r24
    14dc:	44 c0       	rjmp	.+136    	; 0x1566 <DIO_u8SetPinValue+0x21a>
				case DIO_u8_PORTB: CLR_BIT(DIO_u8_PORTB_REG , Copy_u8PinId); break;     ///PORTB is chosen
    14de:	a8 e3       	ldi	r26, 0x38	; 56
    14e0:	b0 e0       	ldi	r27, 0x00	; 0
    14e2:	e8 e3       	ldi	r30, 0x38	; 56
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	48 2f       	mov	r20, r24
    14ea:	8b 81       	ldd	r24, Y+3	; 0x03
    14ec:	28 2f       	mov	r18, r24
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	02 2e       	mov	r0, r18
    14f6:	02 c0       	rjmp	.+4      	; 0x14fc <DIO_u8SetPinValue+0x1b0>
    14f8:	88 0f       	add	r24, r24
    14fa:	99 1f       	adc	r25, r25
    14fc:	0a 94       	dec	r0
    14fe:	e2 f7       	brpl	.-8      	; 0x14f8 <DIO_u8SetPinValue+0x1ac>
    1500:	80 95       	com	r24
    1502:	84 23       	and	r24, r20
    1504:	8c 93       	st	X, r24
    1506:	2f c0       	rjmp	.+94     	; 0x1566 <DIO_u8SetPinValue+0x21a>
				case DIO_u8_PORTC: CLR_BIT(DIO_u8_PORTC_REG , Copy_u8PinId); break;     ///PORTC is chosen
    1508:	a5 e3       	ldi	r26, 0x35	; 53
    150a:	b0 e0       	ldi	r27, 0x00	; 0
    150c:	e5 e3       	ldi	r30, 0x35	; 53
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	80 81       	ld	r24, Z
    1512:	48 2f       	mov	r20, r24
    1514:	8b 81       	ldd	r24, Y+3	; 0x03
    1516:	28 2f       	mov	r18, r24
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	81 e0       	ldi	r24, 0x01	; 1
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	02 2e       	mov	r0, r18
    1520:	02 c0       	rjmp	.+4      	; 0x1526 <DIO_u8SetPinValue+0x1da>
    1522:	88 0f       	add	r24, r24
    1524:	99 1f       	adc	r25, r25
    1526:	0a 94       	dec	r0
    1528:	e2 f7       	brpl	.-8      	; 0x1522 <DIO_u8SetPinValue+0x1d6>
    152a:	80 95       	com	r24
    152c:	84 23       	and	r24, r20
    152e:	8c 93       	st	X, r24
    1530:	1a c0       	rjmp	.+52     	; 0x1566 <DIO_u8SetPinValue+0x21a>
				case DIO_u8_PORTD: CLR_BIT(DIO_u8_PORTD_REG , Copy_u8PinId); break;     ///PORTD is chosen
    1532:	a2 e3       	ldi	r26, 0x32	; 50
    1534:	b0 e0       	ldi	r27, 0x00	; 0
    1536:	e2 e3       	ldi	r30, 0x32	; 50
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	80 81       	ld	r24, Z
    153c:	48 2f       	mov	r20, r24
    153e:	8b 81       	ldd	r24, Y+3	; 0x03
    1540:	28 2f       	mov	r18, r24
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	02 2e       	mov	r0, r18
    154a:	02 c0       	rjmp	.+4      	; 0x1550 <DIO_u8SetPinValue+0x204>
    154c:	88 0f       	add	r24, r24
    154e:	99 1f       	adc	r25, r25
    1550:	0a 94       	dec	r0
    1552:	e2 f7       	brpl	.-8      	; 0x154c <DIO_u8SetPinValue+0x200>
    1554:	80 95       	com	r24
    1556:	84 23       	and	r24, r20
    1558:	8c 93       	st	X, r24
    155a:	05 c0       	rjmp	.+10     	; 0x1566 <DIO_u8SetPinValue+0x21a>
				default: Local_u8ErrorState = STD_TYPES_NOK; break;						//Wrong input for the Port Id
    155c:	19 82       	std	Y+1, r1	; 0x01
    155e:	03 c0       	rjmp	.+6      	; 0x1566 <DIO_u8SetPinValue+0x21a>
			}
			break;
			
			default:
			Local_u8ErrorState = STD_TYPES_NOK;											//Wrong input for the Pin value 
    1560:	19 82       	std	Y+1, r1	; 0x01
    1562:	01 c0       	rjmp	.+2      	; 0x1566 <DIO_u8SetPinValue+0x21a>
		}
	}
	
	else									//Wrong input for the Pin Id
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1564:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    1566:	89 81       	ldd	r24, Y+1	; 0x01
}		
    1568:	2a 96       	adiw	r28, 0x0a	; 10
    156a:	0f b6       	in	r0, 0x3f	; 63
    156c:	f8 94       	cli
    156e:	de bf       	out	0x3e, r29	; 62
    1570:	0f be       	out	0x3f, r0	; 63
    1572:	cd bf       	out	0x3d, r28	; 61
    1574:	cf 91       	pop	r28
    1576:	df 91       	pop	r29
    1578:	08 95       	ret

0000157a <DIO_u8GetPinValue>:

/*************************************************************************************/

u8 DIO_u8GetPinValue      (u8 Copy_u8PortId , u8 Copy_u8PinId , u8 * Copy_pu8ReturnPinValue)
/**Function to return the value of a pin whether it's high or low**/
{
    157a:	df 93       	push	r29
    157c:	cf 93       	push	r28
    157e:	cd b7       	in	r28, 0x3d	; 61
    1580:	de b7       	in	r29, 0x3e	; 62
    1582:	28 97       	sbiw	r28, 0x08	; 8
    1584:	0f b6       	in	r0, 0x3f	; 63
    1586:	f8 94       	cli
    1588:	de bf       	out	0x3e, r29	; 62
    158a:	0f be       	out	0x3f, r0	; 63
    158c:	cd bf       	out	0x3d, r28	; 61
    158e:	8b 83       	std	Y+3, r24	; 0x03
    1590:	6c 83       	std	Y+4, r22	; 0x04
    1592:	5e 83       	std	Y+6, r21	; 0x06
    1594:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;					//u8 Variable - To return the state of the function at the end of it
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;
	if((Copy_u8PinId <= DIO_u8_PIN7) && (Copy_pu8ReturnPinValue != NULL))		//Checks the validity of the user inputs of the pin value and that the pointer had an address
    159a:	8c 81       	ldd	r24, Y+4	; 0x04
    159c:	88 30       	cpi	r24, 0x08	; 8
    159e:	08 f0       	brcs	.+2      	; 0x15a2 <DIO_u8GetPinValue+0x28>
    15a0:	9d c0       	rjmp	.+314    	; 0x16dc <DIO_u8GetPinValue+0x162>
    15a2:	8d 81       	ldd	r24, Y+5	; 0x05
    15a4:	9e 81       	ldd	r25, Y+6	; 0x06
    15a6:	00 97       	sbiw	r24, 0x00	; 0
    15a8:	09 f4       	brne	.+2      	; 0x15ac <DIO_u8GetPinValue+0x32>
    15aa:	98 c0       	rjmp	.+304    	; 0x16dc <DIO_u8GetPinValue+0x162>
	{
		switch(Copy_u8PortId)		//Checks the user input for Port Id
    15ac:	8b 81       	ldd	r24, Y+3	; 0x03
    15ae:	28 2f       	mov	r18, r24
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	38 87       	std	Y+8, r19	; 0x08
    15b4:	2f 83       	std	Y+7, r18	; 0x07
    15b6:	4f 81       	ldd	r20, Y+7	; 0x07
    15b8:	58 85       	ldd	r21, Y+8	; 0x08
    15ba:	41 30       	cpi	r20, 0x01	; 1
    15bc:	51 05       	cpc	r21, r1
    15be:	a9 f1       	breq	.+106    	; 0x162a <DIO_u8GetPinValue+0xb0>
    15c0:	8f 81       	ldd	r24, Y+7	; 0x07
    15c2:	98 85       	ldd	r25, Y+8	; 0x08
    15c4:	82 30       	cpi	r24, 0x02	; 2
    15c6:	91 05       	cpc	r25, r1
    15c8:	34 f4       	brge	.+12     	; 0x15d6 <DIO_u8GetPinValue+0x5c>
    15ca:	2f 81       	ldd	r18, Y+7	; 0x07
    15cc:	38 85       	ldd	r19, Y+8	; 0x08
    15ce:	21 15       	cp	r18, r1
    15d0:	31 05       	cpc	r19, r1
    15d2:	71 f0       	breq	.+28     	; 0x15f0 <DIO_u8GetPinValue+0x76>
    15d4:	81 c0       	rjmp	.+258    	; 0x16d8 <DIO_u8GetPinValue+0x15e>
    15d6:	4f 81       	ldd	r20, Y+7	; 0x07
    15d8:	58 85       	ldd	r21, Y+8	; 0x08
    15da:	42 30       	cpi	r20, 0x02	; 2
    15dc:	51 05       	cpc	r21, r1
    15de:	09 f4       	brne	.+2      	; 0x15e2 <DIO_u8GetPinValue+0x68>
    15e0:	41 c0       	rjmp	.+130    	; 0x1664 <DIO_u8GetPinValue+0xea>
    15e2:	8f 81       	ldd	r24, Y+7	; 0x07
    15e4:	98 85       	ldd	r25, Y+8	; 0x08
    15e6:	83 30       	cpi	r24, 0x03	; 3
    15e8:	91 05       	cpc	r25, r1
    15ea:	09 f4       	brne	.+2      	; 0x15ee <DIO_u8GetPinValue+0x74>
    15ec:	58 c0       	rjmp	.+176    	; 0x169e <DIO_u8GetPinValue+0x124>
    15ee:	74 c0       	rjmp	.+232    	; 0x16d8 <DIO_u8GetPinValue+0x15e>
		{
			case DIO_u8_PORTA:		///PORTA is chosen
			Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG , Copy_u8PinId);			//Because the High & low values may differ (Don't have always to be 0 & 1)
    15f0:	e9 e3       	ldi	r30, 0x39	; 57
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	80 81       	ld	r24, Z
    15f6:	28 2f       	mov	r18, r24
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	8c 81       	ldd	r24, Y+4	; 0x04
    15fc:	88 2f       	mov	r24, r24
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	a9 01       	movw	r20, r18
    1602:	02 c0       	rjmp	.+4      	; 0x1608 <DIO_u8GetPinValue+0x8e>
    1604:	55 95       	asr	r21
    1606:	47 95       	ror	r20
    1608:	8a 95       	dec	r24
    160a:	e2 f7       	brpl	.-8      	; 0x1604 <DIO_u8GetPinValue+0x8a>
    160c:	ca 01       	movw	r24, r20
    160e:	81 70       	andi	r24, 0x01	; 1
    1610:	89 83       	std	Y+1, r24	; 0x01
			if(Local_u8PinValue == 1)
    1612:	89 81       	ldd	r24, Y+1	; 0x01
    1614:	81 30       	cpi	r24, 0x01	; 1
    1616:	29 f4       	brne	.+10     	; 0x1622 <DIO_u8GetPinValue+0xa8>
			{
				*Copy_pu8ReturnPinValue = DIO_u8_HIGH;
    1618:	ed 81       	ldd	r30, Y+5	; 0x05
    161a:	fe 81       	ldd	r31, Y+6	; 0x06
    161c:	81 e0       	ldi	r24, 0x01	; 1
    161e:	80 83       	st	Z, r24
    1620:	5e c0       	rjmp	.+188    	; 0x16de <DIO_u8GetPinValue+0x164>
			}
			else
			{
				*Copy_pu8ReturnPinValue = DIO_u8_LOW;
    1622:	ed 81       	ldd	r30, Y+5	; 0x05
    1624:	fe 81       	ldd	r31, Y+6	; 0x06
    1626:	10 82       	st	Z, r1
    1628:	5a c0       	rjmp	.+180    	; 0x16de <DIO_u8GetPinValue+0x164>
			}
			break;
			
			
			case DIO_u8_PORTB:		///PORTB is chosen
			Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG , Copy_u8PinId);
    162a:	e6 e3       	ldi	r30, 0x36	; 54
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	80 81       	ld	r24, Z
    1630:	28 2f       	mov	r18, r24
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	8c 81       	ldd	r24, Y+4	; 0x04
    1636:	88 2f       	mov	r24, r24
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	a9 01       	movw	r20, r18
    163c:	02 c0       	rjmp	.+4      	; 0x1642 <DIO_u8GetPinValue+0xc8>
    163e:	55 95       	asr	r21
    1640:	47 95       	ror	r20
    1642:	8a 95       	dec	r24
    1644:	e2 f7       	brpl	.-8      	; 0x163e <DIO_u8GetPinValue+0xc4>
    1646:	ca 01       	movw	r24, r20
    1648:	81 70       	andi	r24, 0x01	; 1
    164a:	89 83       	std	Y+1, r24	; 0x01
			if(Local_u8PinValue == 1)
    164c:	89 81       	ldd	r24, Y+1	; 0x01
    164e:	81 30       	cpi	r24, 0x01	; 1
    1650:	29 f4       	brne	.+10     	; 0x165c <DIO_u8GetPinValue+0xe2>
			{
				*Copy_pu8ReturnPinValue = DIO_u8_HIGH;
    1652:	ed 81       	ldd	r30, Y+5	; 0x05
    1654:	fe 81       	ldd	r31, Y+6	; 0x06
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	80 83       	st	Z, r24
    165a:	41 c0       	rjmp	.+130    	; 0x16de <DIO_u8GetPinValue+0x164>
			}
			else
			{
				*Copy_pu8ReturnPinValue = DIO_u8_LOW;
    165c:	ed 81       	ldd	r30, Y+5	; 0x05
    165e:	fe 81       	ldd	r31, Y+6	; 0x06
    1660:	10 82       	st	Z, r1
    1662:	3d c0       	rjmp	.+122    	; 0x16de <DIO_u8GetPinValue+0x164>
			}
			break;
			
			
			case DIO_u8_PORTC:		///PORTC is chosen
			Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG , Copy_u8PinId);
    1664:	e3 e3       	ldi	r30, 0x33	; 51
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	80 81       	ld	r24, Z
    166a:	28 2f       	mov	r18, r24
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	8c 81       	ldd	r24, Y+4	; 0x04
    1670:	88 2f       	mov	r24, r24
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	a9 01       	movw	r20, r18
    1676:	02 c0       	rjmp	.+4      	; 0x167c <DIO_u8GetPinValue+0x102>
    1678:	55 95       	asr	r21
    167a:	47 95       	ror	r20
    167c:	8a 95       	dec	r24
    167e:	e2 f7       	brpl	.-8      	; 0x1678 <DIO_u8GetPinValue+0xfe>
    1680:	ca 01       	movw	r24, r20
    1682:	81 70       	andi	r24, 0x01	; 1
    1684:	89 83       	std	Y+1, r24	; 0x01
			if(Local_u8PinValue == 1)
    1686:	89 81       	ldd	r24, Y+1	; 0x01
    1688:	81 30       	cpi	r24, 0x01	; 1
    168a:	29 f4       	brne	.+10     	; 0x1696 <DIO_u8GetPinValue+0x11c>
			{
				*Copy_pu8ReturnPinValue = DIO_u8_HIGH;
    168c:	ed 81       	ldd	r30, Y+5	; 0x05
    168e:	fe 81       	ldd	r31, Y+6	; 0x06
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	80 83       	st	Z, r24
    1694:	24 c0       	rjmp	.+72     	; 0x16de <DIO_u8GetPinValue+0x164>
			}
			else
			{
				*Copy_pu8ReturnPinValue = DIO_u8_LOW;
    1696:	ed 81       	ldd	r30, Y+5	; 0x05
    1698:	fe 81       	ldd	r31, Y+6	; 0x06
    169a:	10 82       	st	Z, r1
    169c:	20 c0       	rjmp	.+64     	; 0x16de <DIO_u8GetPinValue+0x164>
			}
			break;
			
			
			case DIO_u8_PORTD:		///PORTD is chosen
			Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG , Copy_u8PinId);
    169e:	e0 e3       	ldi	r30, 0x30	; 48
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	28 2f       	mov	r18, r24
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	8c 81       	ldd	r24, Y+4	; 0x04
    16aa:	88 2f       	mov	r24, r24
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	a9 01       	movw	r20, r18
    16b0:	02 c0       	rjmp	.+4      	; 0x16b6 <DIO_u8GetPinValue+0x13c>
    16b2:	55 95       	asr	r21
    16b4:	47 95       	ror	r20
    16b6:	8a 95       	dec	r24
    16b8:	e2 f7       	brpl	.-8      	; 0x16b2 <DIO_u8GetPinValue+0x138>
    16ba:	ca 01       	movw	r24, r20
    16bc:	81 70       	andi	r24, 0x01	; 1
    16be:	89 83       	std	Y+1, r24	; 0x01
			if(Local_u8PinValue == 1)
    16c0:	89 81       	ldd	r24, Y+1	; 0x01
    16c2:	81 30       	cpi	r24, 0x01	; 1
    16c4:	29 f4       	brne	.+10     	; 0x16d0 <DIO_u8GetPinValue+0x156>
			{
				*Copy_pu8ReturnPinValue = DIO_u8_HIGH;
    16c6:	ed 81       	ldd	r30, Y+5	; 0x05
    16c8:	fe 81       	ldd	r31, Y+6	; 0x06
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	80 83       	st	Z, r24
    16ce:	07 c0       	rjmp	.+14     	; 0x16de <DIO_u8GetPinValue+0x164>
			}
			else
			{
				*Copy_pu8ReturnPinValue = DIO_u8_LOW;
    16d0:	ed 81       	ldd	r30, Y+5	; 0x05
    16d2:	fe 81       	ldd	r31, Y+6	; 0x06
    16d4:	10 82       	st	Z, r1
    16d6:	03 c0       	rjmp	.+6      	; 0x16de <DIO_u8GetPinValue+0x164>
			}
			break;
			
			
			default:
			Local_u8ErrorState = STD_TYPES_NOK;			//Wrong input for the Port Id
    16d8:	1a 82       	std	Y+2, r1	; 0x02
    16da:	01 c0       	rjmp	.+2      	; 0x16de <DIO_u8GetPinValue+0x164>
		}
	}
	
	else									//Wrong input for the Pin Id 
	{
		Local_u8ErrorState = STD_TYPES_NOK;		
    16dc:	1a 82       	std	Y+2, r1	; 0x02
	}
	
	return Local_u8ErrorState;
    16de:	8a 81       	ldd	r24, Y+2	; 0x02
}
    16e0:	28 96       	adiw	r28, 0x08	; 8
    16e2:	0f b6       	in	r0, 0x3f	; 63
    16e4:	f8 94       	cli
    16e6:	de bf       	out	0x3e, r29	; 62
    16e8:	0f be       	out	0x3f, r0	; 63
    16ea:	cd bf       	out	0x3d, r28	; 61
    16ec:	cf 91       	pop	r28
    16ee:	df 91       	pop	r29
    16f0:	08 95       	ret

000016f2 <DIO_u8SetPortDirection>:

/*************************************************************************************/

u8 DIO_u8SetPortDirection (u8 Copy_u8PortId , u8 Copy_u8PortDirection)
///Function to specify the direction of a whole port whether it's input or output
{
    16f2:	df 93       	push	r29
    16f4:	cf 93       	push	r28
    16f6:	cd b7       	in	r28, 0x3d	; 61
    16f8:	de b7       	in	r29, 0x3e	; 62
    16fa:	29 97       	sbiw	r28, 0x09	; 9
    16fc:	0f b6       	in	r0, 0x3f	; 63
    16fe:	f8 94       	cli
    1700:	de bf       	out	0x3e, r29	; 62
    1702:	0f be       	out	0x3f, r0	; 63
    1704:	cd bf       	out	0x3d, r28	; 61
    1706:	8a 83       	std	Y+2, r24	; 0x02
    1708:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;					//u8 Variable - To return the state of the function at the end of it
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	89 83       	std	Y+1, r24	; 0x01
	
	
	switch(Copy_u8PortDirection)		//Checks the user input for Port Direction
    170e:	8b 81       	ldd	r24, Y+3	; 0x03
    1710:	28 2f       	mov	r18, r24
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	39 87       	std	Y+9, r19	; 0x09
    1716:	28 87       	std	Y+8, r18	; 0x08
    1718:	88 85       	ldd	r24, Y+8	; 0x08
    171a:	99 85       	ldd	r25, Y+9	; 0x09
    171c:	00 97       	sbiw	r24, 0x00	; 0
    171e:	d9 f1       	breq	.+118    	; 0x1796 <DIO_u8SetPortDirection+0xa4>
    1720:	28 85       	ldd	r18, Y+8	; 0x08
    1722:	39 85       	ldd	r19, Y+9	; 0x09
    1724:	21 30       	cpi	r18, 0x01	; 1
    1726:	31 05       	cpc	r19, r1
    1728:	09 f0       	breq	.+2      	; 0x172c <DIO_u8SetPortDirection+0x3a>
    172a:	66 c0       	rjmp	.+204    	; 0x17f8 <DIO_u8SetPortDirection+0x106>
	{
		case DIO_u8_OUTPUT:
		switch(Copy_u8PortId)			//Checks the user input for Port Id
    172c:	8a 81       	ldd	r24, Y+2	; 0x02
    172e:	28 2f       	mov	r18, r24
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	3f 83       	std	Y+7, r19	; 0x07
    1734:	2e 83       	std	Y+6, r18	; 0x06
    1736:	8e 81       	ldd	r24, Y+6	; 0x06
    1738:	9f 81       	ldd	r25, Y+7	; 0x07
    173a:	81 30       	cpi	r24, 0x01	; 1
    173c:	91 05       	cpc	r25, r1
    173e:	d1 f0       	breq	.+52     	; 0x1774 <DIO_u8SetPortDirection+0x82>
    1740:	2e 81       	ldd	r18, Y+6	; 0x06
    1742:	3f 81       	ldd	r19, Y+7	; 0x07
    1744:	22 30       	cpi	r18, 0x02	; 2
    1746:	31 05       	cpc	r19, r1
    1748:	2c f4       	brge	.+10     	; 0x1754 <DIO_u8SetPortDirection+0x62>
    174a:	8e 81       	ldd	r24, Y+6	; 0x06
    174c:	9f 81       	ldd	r25, Y+7	; 0x07
    174e:	00 97       	sbiw	r24, 0x00	; 0
    1750:	61 f0       	breq	.+24     	; 0x176a <DIO_u8SetPortDirection+0x78>
    1752:	1f c0       	rjmp	.+62     	; 0x1792 <DIO_u8SetPortDirection+0xa0>
    1754:	2e 81       	ldd	r18, Y+6	; 0x06
    1756:	3f 81       	ldd	r19, Y+7	; 0x07
    1758:	22 30       	cpi	r18, 0x02	; 2
    175a:	31 05       	cpc	r19, r1
    175c:	81 f0       	breq	.+32     	; 0x177e <DIO_u8SetPortDirection+0x8c>
    175e:	8e 81       	ldd	r24, Y+6	; 0x06
    1760:	9f 81       	ldd	r25, Y+7	; 0x07
    1762:	83 30       	cpi	r24, 0x03	; 3
    1764:	91 05       	cpc	r25, r1
    1766:	81 f0       	breq	.+32     	; 0x1788 <DIO_u8SetPortDirection+0x96>
    1768:	14 c0       	rjmp	.+40     	; 0x1792 <DIO_u8SetPortDirection+0xa0>
		{
			case DIO_u8_PORTA: DIO_u8_DDRA_REG = 0xFF; break;	///PORTA is chosen
    176a:	ea e3       	ldi	r30, 0x3A	; 58
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	8f ef       	ldi	r24, 0xFF	; 255
    1770:	80 83       	st	Z, r24
    1772:	43 c0       	rjmp	.+134    	; 0x17fa <DIO_u8SetPortDirection+0x108>
			case DIO_u8_PORTB: DIO_u8_DDRB_REG = 0xFF; break;	///PORTB is chosen
    1774:	e7 e3       	ldi	r30, 0x37	; 55
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	8f ef       	ldi	r24, 0xFF	; 255
    177a:	80 83       	st	Z, r24
    177c:	3e c0       	rjmp	.+124    	; 0x17fa <DIO_u8SetPortDirection+0x108>
			case DIO_u8_PORTC: DIO_u8_DDRC_REG = 0xFF; break;	///PORTC is chosen
    177e:	e4 e3       	ldi	r30, 0x34	; 52
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	8f ef       	ldi	r24, 0xFF	; 255
    1784:	80 83       	st	Z, r24
    1786:	39 c0       	rjmp	.+114    	; 0x17fa <DIO_u8SetPortDirection+0x108>
			case DIO_u8_PORTD: DIO_u8_DDRD_REG = 0xFF; break;	///PORTD is chosen
    1788:	e1 e3       	ldi	r30, 0x31	; 49
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	8f ef       	ldi	r24, 0xFF	; 255
    178e:	80 83       	st	Z, r24
    1790:	34 c0       	rjmp	.+104    	; 0x17fa <DIO_u8SetPortDirection+0x108>
			default:
			Local_u8ErrorState = STD_TYPES_NOK;				//Wrong input for the Port Id
    1792:	19 82       	std	Y+1, r1	; 0x01
    1794:	32 c0       	rjmp	.+100    	; 0x17fa <DIO_u8SetPortDirection+0x108>
		break;
		
		
		
		case DIO_u8_INPUT:
		switch(Copy_u8PortId)			//Checks the user input for Port Id
    1796:	8a 81       	ldd	r24, Y+2	; 0x02
    1798:	28 2f       	mov	r18, r24
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	3d 83       	std	Y+5, r19	; 0x05
    179e:	2c 83       	std	Y+4, r18	; 0x04
    17a0:	8c 81       	ldd	r24, Y+4	; 0x04
    17a2:	9d 81       	ldd	r25, Y+5	; 0x05
    17a4:	81 30       	cpi	r24, 0x01	; 1
    17a6:	91 05       	cpc	r25, r1
    17a8:	c9 f0       	breq	.+50     	; 0x17dc <DIO_u8SetPortDirection+0xea>
    17aa:	2c 81       	ldd	r18, Y+4	; 0x04
    17ac:	3d 81       	ldd	r19, Y+5	; 0x05
    17ae:	22 30       	cpi	r18, 0x02	; 2
    17b0:	31 05       	cpc	r19, r1
    17b2:	2c f4       	brge	.+10     	; 0x17be <DIO_u8SetPortDirection+0xcc>
    17b4:	8c 81       	ldd	r24, Y+4	; 0x04
    17b6:	9d 81       	ldd	r25, Y+5	; 0x05
    17b8:	00 97       	sbiw	r24, 0x00	; 0
    17ba:	61 f0       	breq	.+24     	; 0x17d4 <DIO_u8SetPortDirection+0xe2>
    17bc:	1b c0       	rjmp	.+54     	; 0x17f4 <DIO_u8SetPortDirection+0x102>
    17be:	2c 81       	ldd	r18, Y+4	; 0x04
    17c0:	3d 81       	ldd	r19, Y+5	; 0x05
    17c2:	22 30       	cpi	r18, 0x02	; 2
    17c4:	31 05       	cpc	r19, r1
    17c6:	71 f0       	breq	.+28     	; 0x17e4 <DIO_u8SetPortDirection+0xf2>
    17c8:	8c 81       	ldd	r24, Y+4	; 0x04
    17ca:	9d 81       	ldd	r25, Y+5	; 0x05
    17cc:	83 30       	cpi	r24, 0x03	; 3
    17ce:	91 05       	cpc	r25, r1
    17d0:	69 f0       	breq	.+26     	; 0x17ec <DIO_u8SetPortDirection+0xfa>
    17d2:	10 c0       	rjmp	.+32     	; 0x17f4 <DIO_u8SetPortDirection+0x102>
		{
			case DIO_u8_PORTA: DIO_u8_DDRA_REG = 0x00; break;	///PORTA is chosed
    17d4:	ea e3       	ldi	r30, 0x3A	; 58
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	10 82       	st	Z, r1
    17da:	0f c0       	rjmp	.+30     	; 0x17fa <DIO_u8SetPortDirection+0x108>
			case DIO_u8_PORTB: DIO_u8_DDRB_REG = 0x00; break;   ///PORTB is chosed
    17dc:	e7 e3       	ldi	r30, 0x37	; 55
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	10 82       	st	Z, r1
    17e2:	0b c0       	rjmp	.+22     	; 0x17fa <DIO_u8SetPortDirection+0x108>
			case DIO_u8_PORTC: DIO_u8_DDRC_REG = 0x00; break;   ///PORTC is chosed
    17e4:	e4 e3       	ldi	r30, 0x34	; 52
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	10 82       	st	Z, r1
    17ea:	07 c0       	rjmp	.+14     	; 0x17fa <DIO_u8SetPortDirection+0x108>
			case DIO_u8_PORTD: DIO_u8_DDRD_REG = 0x00; break;   ///PORTD is chosed
    17ec:	e1 e3       	ldi	r30, 0x31	; 49
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	10 82       	st	Z, r1
    17f2:	03 c0       	rjmp	.+6      	; 0x17fa <DIO_u8SetPortDirection+0x108>
			default:
			Local_u8ErrorState = STD_TYPES_NOK;				//Wrong input for the Port Id
    17f4:	19 82       	std	Y+1, r1	; 0x01
    17f6:	01 c0       	rjmp	.+2      	; 0x17fa <DIO_u8SetPortDirection+0x108>
		break;
		
		
		
		default:
		Local_u8ErrorState = STD_TYPES_NOK;			//Wrong input for the Port Direction
    17f8:	19 82       	std	Y+1, r1	; 0x01
		break;
		
	}
	
	return Local_u8ErrorState;
    17fa:	89 81       	ldd	r24, Y+1	; 0x01
}					
    17fc:	29 96       	adiw	r28, 0x09	; 9
    17fe:	0f b6       	in	r0, 0x3f	; 63
    1800:	f8 94       	cli
    1802:	de bf       	out	0x3e, r29	; 62
    1804:	0f be       	out	0x3f, r0	; 63
    1806:	cd bf       	out	0x3d, r28	; 61
    1808:	cf 91       	pop	r28
    180a:	df 91       	pop	r29
    180c:	08 95       	ret

0000180e <DIO_u8SetPortValue>:

/*************************************************************************************/

u8 DIO_u8SetPortValue	  (u8 Copy_u8PortId , u8 Copy_u8PortValue)
///Function to specify the value of a whole port whether it's high or low
{
    180e:	df 93       	push	r29
    1810:	cf 93       	push	r28
    1812:	00 d0       	rcall	.+0      	; 0x1814 <DIO_u8SetPortValue+0x6>
    1814:	00 d0       	rcall	.+0      	; 0x1816 <DIO_u8SetPortValue+0x8>
    1816:	0f 92       	push	r0
    1818:	cd b7       	in	r28, 0x3d	; 61
    181a:	de b7       	in	r29, 0x3e	; 62
    181c:	8a 83       	std	Y+2, r24	; 0x02
    181e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;					//u8 Variable - To return the state of the function at the end of it
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	89 83       	std	Y+1, r24	; 0x01
	
	
	switch(Copy_u8PortId)						//Because the value doesn't have to be only High or Low for the whole port
    1824:	8a 81       	ldd	r24, Y+2	; 0x02
    1826:	28 2f       	mov	r18, r24
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	3d 83       	std	Y+5, r19	; 0x05
    182c:	2c 83       	std	Y+4, r18	; 0x04
    182e:	8c 81       	ldd	r24, Y+4	; 0x04
    1830:	9d 81       	ldd	r25, Y+5	; 0x05
    1832:	81 30       	cpi	r24, 0x01	; 1
    1834:	91 05       	cpc	r25, r1
    1836:	d1 f0       	breq	.+52     	; 0x186c <DIO_u8SetPortValue+0x5e>
    1838:	2c 81       	ldd	r18, Y+4	; 0x04
    183a:	3d 81       	ldd	r19, Y+5	; 0x05
    183c:	22 30       	cpi	r18, 0x02	; 2
    183e:	31 05       	cpc	r19, r1
    1840:	2c f4       	brge	.+10     	; 0x184c <DIO_u8SetPortValue+0x3e>
    1842:	8c 81       	ldd	r24, Y+4	; 0x04
    1844:	9d 81       	ldd	r25, Y+5	; 0x05
    1846:	00 97       	sbiw	r24, 0x00	; 0
    1848:	61 f0       	breq	.+24     	; 0x1862 <DIO_u8SetPortValue+0x54>
    184a:	1f c0       	rjmp	.+62     	; 0x188a <DIO_u8SetPortValue+0x7c>
    184c:	2c 81       	ldd	r18, Y+4	; 0x04
    184e:	3d 81       	ldd	r19, Y+5	; 0x05
    1850:	22 30       	cpi	r18, 0x02	; 2
    1852:	31 05       	cpc	r19, r1
    1854:	81 f0       	breq	.+32     	; 0x1876 <DIO_u8SetPortValue+0x68>
    1856:	8c 81       	ldd	r24, Y+4	; 0x04
    1858:	9d 81       	ldd	r25, Y+5	; 0x05
    185a:	83 30       	cpi	r24, 0x03	; 3
    185c:	91 05       	cpc	r25, r1
    185e:	81 f0       	breq	.+32     	; 0x1880 <DIO_u8SetPortValue+0x72>
    1860:	14 c0       	rjmp	.+40     	; 0x188a <DIO_u8SetPortValue+0x7c>
	{
		case DIO_u8_PORTA:		///PORTA is chosen
		DIO_u8_PORTA_REG = Copy_u8PortValue;
    1862:	eb e3       	ldi	r30, 0x3B	; 59
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	8b 81       	ldd	r24, Y+3	; 0x03
    1868:	80 83       	st	Z, r24
    186a:	10 c0       	rjmp	.+32     	; 0x188c <DIO_u8SetPortValue+0x7e>
		break;
		
		case DIO_u8_PORTB:		///PORTB is chosen
		DIO_u8_PORTB_REG = Copy_u8PortValue;
    186c:	e8 e3       	ldi	r30, 0x38	; 56
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	8b 81       	ldd	r24, Y+3	; 0x03
    1872:	80 83       	st	Z, r24
    1874:	0b c0       	rjmp	.+22     	; 0x188c <DIO_u8SetPortValue+0x7e>
		break;
		
		case DIO_u8_PORTC:		///PORTC is chosen
		DIO_u8_PORTC_REG = Copy_u8PortValue;
    1876:	e5 e3       	ldi	r30, 0x35	; 53
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	8b 81       	ldd	r24, Y+3	; 0x03
    187c:	80 83       	st	Z, r24
    187e:	06 c0       	rjmp	.+12     	; 0x188c <DIO_u8SetPortValue+0x7e>
		break;
		
		case DIO_u8_PORTD:		///PORTD is chosen
		DIO_u8_PORTD_REG = Copy_u8PortValue;
    1880:	e2 e3       	ldi	r30, 0x32	; 50
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	8b 81       	ldd	r24, Y+3	; 0x03
    1886:	80 83       	st	Z, r24
    1888:	01 c0       	rjmp	.+2      	; 0x188c <DIO_u8SetPortValue+0x7e>
		break;
		
		default:
		Local_u8ErrorState = STD_TYPES_NOK ;				//Wrong input for the Port Id 
    188a:	19 82       	std	Y+1, r1	; 0x01
		break;
	}

	return Local_u8ErrorState;
    188c:	89 81       	ldd	r24, Y+1	; 0x01
	
}						
    188e:	0f 90       	pop	r0
    1890:	0f 90       	pop	r0
    1892:	0f 90       	pop	r0
    1894:	0f 90       	pop	r0
    1896:	0f 90       	pop	r0
    1898:	cf 91       	pop	r28
    189a:	df 91       	pop	r29
    189c:	08 95       	ret

0000189e <DIO_u8GetPortValue>:

/*************************************************************************************/

u8 DIO_u8GetPortValue	  (u8 Copy_u8PortId , u8 * Copy_pu8ReturnPortValue)
/**Function to return the value of a whole port whether it's high or low**/
{
    189e:	df 93       	push	r29
    18a0:	cf 93       	push	r28
    18a2:	00 d0       	rcall	.+0      	; 0x18a4 <DIO_u8GetPortValue+0x6>
    18a4:	00 d0       	rcall	.+0      	; 0x18a6 <DIO_u8GetPortValue+0x8>
    18a6:	00 d0       	rcall	.+0      	; 0x18a8 <DIO_u8GetPortValue+0xa>
    18a8:	cd b7       	in	r28, 0x3d	; 61
    18aa:	de b7       	in	r29, 0x3e	; 62
    18ac:	8a 83       	std	Y+2, r24	; 0x02
    18ae:	7c 83       	std	Y+4, r23	; 0x04
    18b0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;					//u8 Variable - To return the state of the function at the end of it
    18b2:	81 e0       	ldi	r24, 0x01	; 1
    18b4:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_pu8ReturnPortValue != NULL)		//Checks that the pointer has an address
    18b6:	8b 81       	ldd	r24, Y+3	; 0x03
    18b8:	9c 81       	ldd	r25, Y+4	; 0x04
    18ba:	00 97       	sbiw	r24, 0x00	; 0
    18bc:	e9 f1       	breq	.+122    	; 0x1938 <DIO_u8GetPortValue+0x9a>
	{
		switch(Copy_u8PortId)	//Checks the user input for Port Id
    18be:	8a 81       	ldd	r24, Y+2	; 0x02
    18c0:	28 2f       	mov	r18, r24
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	3e 83       	std	Y+6, r19	; 0x06
    18c6:	2d 83       	std	Y+5, r18	; 0x05
    18c8:	8d 81       	ldd	r24, Y+5	; 0x05
    18ca:	9e 81       	ldd	r25, Y+6	; 0x06
    18cc:	81 30       	cpi	r24, 0x01	; 1
    18ce:	91 05       	cpc	r25, r1
    18d0:	e1 f0       	breq	.+56     	; 0x190a <DIO_u8GetPortValue+0x6c>
    18d2:	2d 81       	ldd	r18, Y+5	; 0x05
    18d4:	3e 81       	ldd	r19, Y+6	; 0x06
    18d6:	22 30       	cpi	r18, 0x02	; 2
    18d8:	31 05       	cpc	r19, r1
    18da:	2c f4       	brge	.+10     	; 0x18e6 <DIO_u8GetPortValue+0x48>
    18dc:	8d 81       	ldd	r24, Y+5	; 0x05
    18de:	9e 81       	ldd	r25, Y+6	; 0x06
    18e0:	00 97       	sbiw	r24, 0x00	; 0
    18e2:	61 f0       	breq	.+24     	; 0x18fc <DIO_u8GetPortValue+0x5e>
    18e4:	27 c0       	rjmp	.+78     	; 0x1934 <DIO_u8GetPortValue+0x96>
    18e6:	2d 81       	ldd	r18, Y+5	; 0x05
    18e8:	3e 81       	ldd	r19, Y+6	; 0x06
    18ea:	22 30       	cpi	r18, 0x02	; 2
    18ec:	31 05       	cpc	r19, r1
    18ee:	a1 f0       	breq	.+40     	; 0x1918 <DIO_u8GetPortValue+0x7a>
    18f0:	8d 81       	ldd	r24, Y+5	; 0x05
    18f2:	9e 81       	ldd	r25, Y+6	; 0x06
    18f4:	83 30       	cpi	r24, 0x03	; 3
    18f6:	91 05       	cpc	r25, r1
    18f8:	b1 f0       	breq	.+44     	; 0x1926 <DIO_u8GetPortValue+0x88>
    18fa:	1c c0       	rjmp	.+56     	; 0x1934 <DIO_u8GetPortValue+0x96>
		{

			case DIO_u8_PORTA:*Copy_pu8ReturnPortValue = DIO_u8_PINA_REG; break;		//Not true & false, its an 8 bit number
    18fc:	e9 e3       	ldi	r30, 0x39	; 57
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	80 81       	ld	r24, Z
    1902:	eb 81       	ldd	r30, Y+3	; 0x03
    1904:	fc 81       	ldd	r31, Y+4	; 0x04
    1906:	80 83       	st	Z, r24
    1908:	18 c0       	rjmp	.+48     	; 0x193a <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTB:*Copy_pu8ReturnPortValue = DIO_u8_PINB_REG; break;
    190a:	e6 e3       	ldi	r30, 0x36	; 54
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	80 81       	ld	r24, Z
    1910:	eb 81       	ldd	r30, Y+3	; 0x03
    1912:	fc 81       	ldd	r31, Y+4	; 0x04
    1914:	80 83       	st	Z, r24
    1916:	11 c0       	rjmp	.+34     	; 0x193a <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTC:*Copy_pu8ReturnPortValue = DIO_u8_PINC_REG; break;
    1918:	e3 e3       	ldi	r30, 0x33	; 51
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	80 81       	ld	r24, Z
    191e:	eb 81       	ldd	r30, Y+3	; 0x03
    1920:	fc 81       	ldd	r31, Y+4	; 0x04
    1922:	80 83       	st	Z, r24
    1924:	0a c0       	rjmp	.+20     	; 0x193a <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTD:*Copy_pu8ReturnPortValue = DIO_u8_PIND_REG; break;
    1926:	e0 e3       	ldi	r30, 0x30	; 48
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	80 81       	ld	r24, Z
    192c:	eb 81       	ldd	r30, Y+3	; 0x03
    192e:	fc 81       	ldd	r31, Y+4	; 0x04
    1930:	80 83       	st	Z, r24
    1932:	03 c0       	rjmp	.+6      	; 0x193a <DIO_u8GetPortValue+0x9c>
			
			
			default:
			Local_u8ErrorState = STD_TYPES_NOK; 		//Wrong input for the Port Id
    1934:	19 82       	std	Y+1, r1	; 0x01
    1936:	01 c0       	rjmp	.+2      	; 0x193a <DIO_u8GetPortValue+0x9c>
		}
	}
	
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1938:	19 82       	std	Y+1, r1	; 0x01
	}

	
	return Local_u8ErrorState;
    193a:	89 81       	ldd	r24, Y+1	; 0x01
}		
    193c:	26 96       	adiw	r28, 0x06	; 6
    193e:	0f b6       	in	r0, 0x3f	; 63
    1940:	f8 94       	cli
    1942:	de bf       	out	0x3e, r29	; 62
    1944:	0f be       	out	0x3f, r0	; 63
    1946:	cd bf       	out	0x3d, r28	; 61
    1948:	cf 91       	pop	r28
    194a:	df 91       	pop	r29
    194c:	08 95       	ret

0000194e <DIO_u8TogglePinValue>:

/**************************************************************************************/

u8 DIO_u8TogglePinValue(u8 Copy_u8PortId , u8 Copy_u8PinId)
{
    194e:	df 93       	push	r29
    1950:	cf 93       	push	r28
    1952:	00 d0       	rcall	.+0      	; 0x1954 <DIO_u8TogglePinValue+0x6>
    1954:	00 d0       	rcall	.+0      	; 0x1956 <DIO_u8TogglePinValue+0x8>
    1956:	0f 92       	push	r0
    1958:	cd b7       	in	r28, 0x3d	; 61
    195a:	de b7       	in	r29, 0x3e	; 62
    195c:	8a 83       	std	Y+2, r24	; 0x02
    195e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;				    	//u8 Variable - To return the state of the function at the end of it
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PinId <= DIO_u8_PIN7) && (Copy_u8PinId <= DIO_u8_PIN7))		//Checks the validity of the user inputs of the pin value and that the pointer had an address
    1964:	8b 81       	ldd	r24, Y+3	; 0x03
    1966:	88 30       	cpi	r24, 0x08	; 8
    1968:	08 f0       	brcs	.+2      	; 0x196c <DIO_u8TogglePinValue+0x1e>
    196a:	72 c0       	rjmp	.+228    	; 0x1a50 <DIO_u8TogglePinValue+0x102>
    196c:	8b 81       	ldd	r24, Y+3	; 0x03
    196e:	88 30       	cpi	r24, 0x08	; 8
    1970:	08 f0       	brcs	.+2      	; 0x1974 <DIO_u8TogglePinValue+0x26>
    1972:	6e c0       	rjmp	.+220    	; 0x1a50 <DIO_u8TogglePinValue+0x102>
	{
		switch(Copy_u8PortId)
    1974:	8a 81       	ldd	r24, Y+2	; 0x02
    1976:	28 2f       	mov	r18, r24
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	3d 83       	std	Y+5, r19	; 0x05
    197c:	2c 83       	std	Y+4, r18	; 0x04
    197e:	8c 81       	ldd	r24, Y+4	; 0x04
    1980:	9d 81       	ldd	r25, Y+5	; 0x05
    1982:	81 30       	cpi	r24, 0x01	; 1
    1984:	91 05       	cpc	r25, r1
    1986:	49 f1       	breq	.+82     	; 0x19da <DIO_u8TogglePinValue+0x8c>
    1988:	2c 81       	ldd	r18, Y+4	; 0x04
    198a:	3d 81       	ldd	r19, Y+5	; 0x05
    198c:	22 30       	cpi	r18, 0x02	; 2
    198e:	31 05       	cpc	r19, r1
    1990:	2c f4       	brge	.+10     	; 0x199c <DIO_u8TogglePinValue+0x4e>
    1992:	8c 81       	ldd	r24, Y+4	; 0x04
    1994:	9d 81       	ldd	r25, Y+5	; 0x05
    1996:	00 97       	sbiw	r24, 0x00	; 0
    1998:	61 f0       	breq	.+24     	; 0x19b2 <DIO_u8TogglePinValue+0x64>
    199a:	5a c0       	rjmp	.+180    	; 0x1a50 <DIO_u8TogglePinValue+0x102>
    199c:	2c 81       	ldd	r18, Y+4	; 0x04
    199e:	3d 81       	ldd	r19, Y+5	; 0x05
    19a0:	22 30       	cpi	r18, 0x02	; 2
    19a2:	31 05       	cpc	r19, r1
    19a4:	71 f1       	breq	.+92     	; 0x1a02 <DIO_u8TogglePinValue+0xb4>
    19a6:	8c 81       	ldd	r24, Y+4	; 0x04
    19a8:	9d 81       	ldd	r25, Y+5	; 0x05
    19aa:	83 30       	cpi	r24, 0x03	; 3
    19ac:	91 05       	cpc	r25, r1
    19ae:	e9 f1       	breq	.+122    	; 0x1a2a <DIO_u8TogglePinValue+0xdc>
    19b0:	4f c0       	rjmp	.+158    	; 0x1a50 <DIO_u8TogglePinValue+0x102>
		{
		    case DIO_u8_PORTA: TOG_BIT(DIO_u8_PORTA_REG , Copy_u8PinId); break;
    19b2:	ab e3       	ldi	r26, 0x3B	; 59
    19b4:	b0 e0       	ldi	r27, 0x00	; 0
    19b6:	eb e3       	ldi	r30, 0x3B	; 59
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	80 81       	ld	r24, Z
    19bc:	48 2f       	mov	r20, r24
    19be:	8b 81       	ldd	r24, Y+3	; 0x03
    19c0:	28 2f       	mov	r18, r24
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	02 2e       	mov	r0, r18
    19ca:	02 c0       	rjmp	.+4      	; 0x19d0 <DIO_u8TogglePinValue+0x82>
    19cc:	88 0f       	add	r24, r24
    19ce:	99 1f       	adc	r25, r25
    19d0:	0a 94       	dec	r0
    19d2:	e2 f7       	brpl	.-8      	; 0x19cc <DIO_u8TogglePinValue+0x7e>
    19d4:	84 27       	eor	r24, r20
    19d6:	8c 93       	st	X, r24
    19d8:	3b c0       	rjmp	.+118    	; 0x1a50 <DIO_u8TogglePinValue+0x102>
			case DIO_u8_PORTB: TOG_BIT(DIO_u8_PORTB_REG , Copy_u8PinId); break;
    19da:	a8 e3       	ldi	r26, 0x38	; 56
    19dc:	b0 e0       	ldi	r27, 0x00	; 0
    19de:	e8 e3       	ldi	r30, 0x38	; 56
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	80 81       	ld	r24, Z
    19e4:	48 2f       	mov	r20, r24
    19e6:	8b 81       	ldd	r24, Y+3	; 0x03
    19e8:	28 2f       	mov	r18, r24
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	02 2e       	mov	r0, r18
    19f2:	02 c0       	rjmp	.+4      	; 0x19f8 <DIO_u8TogglePinValue+0xaa>
    19f4:	88 0f       	add	r24, r24
    19f6:	99 1f       	adc	r25, r25
    19f8:	0a 94       	dec	r0
    19fa:	e2 f7       	brpl	.-8      	; 0x19f4 <DIO_u8TogglePinValue+0xa6>
    19fc:	84 27       	eor	r24, r20
    19fe:	8c 93       	st	X, r24
    1a00:	27 c0       	rjmp	.+78     	; 0x1a50 <DIO_u8TogglePinValue+0x102>
			case DIO_u8_PORTC: TOG_BIT(DIO_u8_PORTC_REG , Copy_u8PinId); break;
    1a02:	a5 e3       	ldi	r26, 0x35	; 53
    1a04:	b0 e0       	ldi	r27, 0x00	; 0
    1a06:	e5 e3       	ldi	r30, 0x35	; 53
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	80 81       	ld	r24, Z
    1a0c:	48 2f       	mov	r20, r24
    1a0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a10:	28 2f       	mov	r18, r24
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	81 e0       	ldi	r24, 0x01	; 1
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	02 2e       	mov	r0, r18
    1a1a:	02 c0       	rjmp	.+4      	; 0x1a20 <DIO_u8TogglePinValue+0xd2>
    1a1c:	88 0f       	add	r24, r24
    1a1e:	99 1f       	adc	r25, r25
    1a20:	0a 94       	dec	r0
    1a22:	e2 f7       	brpl	.-8      	; 0x1a1c <DIO_u8TogglePinValue+0xce>
    1a24:	84 27       	eor	r24, r20
    1a26:	8c 93       	st	X, r24
    1a28:	13 c0       	rjmp	.+38     	; 0x1a50 <DIO_u8TogglePinValue+0x102>
			case DIO_u8_PORTD: TOG_BIT(DIO_u8_PORTD_REG , Copy_u8PinId); break;
    1a2a:	a2 e3       	ldi	r26, 0x32	; 50
    1a2c:	b0 e0       	ldi	r27, 0x00	; 0
    1a2e:	e2 e3       	ldi	r30, 0x32	; 50
    1a30:	f0 e0       	ldi	r31, 0x00	; 0
    1a32:	80 81       	ld	r24, Z
    1a34:	48 2f       	mov	r20, r24
    1a36:	8b 81       	ldd	r24, Y+3	; 0x03
    1a38:	28 2f       	mov	r18, r24
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	81 e0       	ldi	r24, 0x01	; 1
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	02 2e       	mov	r0, r18
    1a42:	02 c0       	rjmp	.+4      	; 0x1a48 <DIO_u8TogglePinValue+0xfa>
    1a44:	88 0f       	add	r24, r24
    1a46:	99 1f       	adc	r25, r25
    1a48:	0a 94       	dec	r0
    1a4a:	e2 f7       	brpl	.-8      	; 0x1a44 <DIO_u8TogglePinValue+0xf6>
    1a4c:	84 27       	eor	r24, r20
    1a4e:	8c 93       	st	X, r24
		}
	}
	return Local_u8ErrorState;
    1a50:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a52:	0f 90       	pop	r0
    1a54:	0f 90       	pop	r0
    1a56:	0f 90       	pop	r0
    1a58:	0f 90       	pop	r0
    1a5a:	0f 90       	pop	r0
    1a5c:	cf 91       	pop	r28
    1a5e:	df 91       	pop	r29
    1a60:	08 95       	ret

00001a62 <EXTI_u8SetCallBack>:



u8 EXTI_u8SetCallBack(u8 Copy_u8EXTIIndex , void(*Copy_pf)(void))
/**Function to send the address of the ISR application function to ISR**/
{
    1a62:	df 93       	push	r29
    1a64:	cf 93       	push	r28
    1a66:	00 d0       	rcall	.+0      	; 0x1a68 <EXTI_u8SetCallBack+0x6>
    1a68:	00 d0       	rcall	.+0      	; 0x1a6a <EXTI_u8SetCallBack+0x8>
    1a6a:	cd b7       	in	r28, 0x3d	; 61
    1a6c:	de b7       	in	r29, 0x3e	; 62
    1a6e:	8a 83       	std	Y+2, r24	; 0x02
    1a70:	7c 83       	std	Y+4, r23	; 0x04
    1a72:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1a74:	81 e0       	ldi	r24, 0x01	; 1
    1a76:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8EXTIIndex <= EXTI_u8_INTERRUPT2) && (Copy_pf != NULL))
    1a78:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7a:	83 30       	cpi	r24, 0x03	; 3
    1a7c:	88 f4       	brcc	.+34     	; 0x1aa0 <EXTI_u8SetCallBack+0x3e>
    1a7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a80:	9c 81       	ldd	r25, Y+4	; 0x04
    1a82:	00 97       	sbiw	r24, 0x00	; 0
    1a84:	69 f0       	breq	.+26     	; 0x1aa0 <EXTI_u8SetCallBack+0x3e>
	{
		EXTI_ApfEXTI[Copy_u8EXTIIndex] = Copy_pf;
    1a86:	8a 81       	ldd	r24, Y+2	; 0x02
    1a88:	88 2f       	mov	r24, r24
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	88 0f       	add	r24, r24
    1a8e:	99 1f       	adc	r25, r25
    1a90:	fc 01       	movw	r30, r24
    1a92:	e3 53       	subi	r30, 0x33	; 51
    1a94:	fe 4f       	sbci	r31, 0xFE	; 254
    1a96:	8b 81       	ldd	r24, Y+3	; 0x03
    1a98:	9c 81       	ldd	r25, Y+4	; 0x04
    1a9a:	91 83       	std	Z+1, r25	; 0x01
    1a9c:	80 83       	st	Z, r24
    1a9e:	01 c0       	rjmp	.+2      	; 0x1aa2 <EXTI_u8SetCallBack+0x40>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1aa0:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return Local_u8ErrorState;
    1aa2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1aa4:	0f 90       	pop	r0
    1aa6:	0f 90       	pop	r0
    1aa8:	0f 90       	pop	r0
    1aaa:	0f 90       	pop	r0
    1aac:	cf 91       	pop	r28
    1aae:	df 91       	pop	r29
    1ab0:	08 95       	ret

00001ab2 <EXTI_u8InterruptEnable>:

/***************************************************************************/

u8 EXTI_u8InterruptEnable(u8 Copy_u8EXTIIndex , u8 Copy_EdgeIndex)
/**Function used to enable a specific interrupt in a specific edge**/
{
    1ab2:	df 93       	push	r29
    1ab4:	cf 93       	push	r28
    1ab6:	cd b7       	in	r28, 0x3d	; 61
    1ab8:	de b7       	in	r29, 0x3e	; 62
    1aba:	2d 97       	sbiw	r28, 0x0d	; 13
    1abc:	0f b6       	in	r0, 0x3f	; 63
    1abe:	f8 94       	cli
    1ac0:	de bf       	out	0x3e, r29	; 62
    1ac2:	0f be       	out	0x3f, r0	; 63
    1ac4:	cd bf       	out	0x3d, r28	; 61
    1ac6:	8a 83       	std	Y+2, r24	; 0x02
    1ac8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1aca:	81 e0       	ldi	r24, 0x01	; 1
    1acc:	89 83       	std	Y+1, r24	; 0x01
	
	switch(Copy_EdgeIndex)
    1ace:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad0:	28 2f       	mov	r18, r24
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	3d 87       	std	Y+13, r19	; 0x0d
    1ad6:	2c 87       	std	Y+12, r18	; 0x0c
    1ad8:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ada:	9d 85       	ldd	r25, Y+13	; 0x0d
    1adc:	81 30       	cpi	r24, 0x01	; 1
    1ade:	91 05       	cpc	r25, r1
    1ae0:	09 f4       	brne	.+2      	; 0x1ae4 <EXTI_u8InterruptEnable+0x32>
    1ae2:	5a c0       	rjmp	.+180    	; 0x1b98 <EXTI_u8InterruptEnable+0xe6>
    1ae4:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ae6:	3d 85       	ldd	r19, Y+13	; 0x0d
    1ae8:	22 30       	cpi	r18, 0x02	; 2
    1aea:	31 05       	cpc	r19, r1
    1aec:	2c f4       	brge	.+10     	; 0x1af8 <EXTI_u8InterruptEnable+0x46>
    1aee:	8c 85       	ldd	r24, Y+12	; 0x0c
    1af0:	9d 85       	ldd	r25, Y+13	; 0x0d
    1af2:	00 97       	sbiw	r24, 0x00	; 0
    1af4:	71 f0       	breq	.+28     	; 0x1b12 <EXTI_u8InterruptEnable+0x60>
    1af6:	33 c1       	rjmp	.+614    	; 0x1d5e <EXTI_u8InterruptEnable+0x2ac>
    1af8:	2c 85       	ldd	r18, Y+12	; 0x0c
    1afa:	3d 85       	ldd	r19, Y+13	; 0x0d
    1afc:	22 30       	cpi	r18, 0x02	; 2
    1afe:	31 05       	cpc	r19, r1
    1b00:	09 f4       	brne	.+2      	; 0x1b04 <EXTI_u8InterruptEnable+0x52>
    1b02:	8d c0       	rjmp	.+282    	; 0x1c1e <EXTI_u8InterruptEnable+0x16c>
    1b04:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b06:	9d 85       	ldd	r25, Y+13	; 0x0d
    1b08:	83 30       	cpi	r24, 0x03	; 3
    1b0a:	91 05       	cpc	r25, r1
    1b0c:	09 f4       	brne	.+2      	; 0x1b10 <EXTI_u8InterruptEnable+0x5e>
    1b0e:	d7 c0       	rjmp	.+430    	; 0x1cbe <EXTI_u8InterruptEnable+0x20c>
    1b10:	26 c1       	rjmp	.+588    	; 0x1d5e <EXTI_u8InterruptEnable+0x2ac>
	{
		case EXTI_u8_LOW_LEVEL:
		switch(Copy_u8EXTIIndex)
    1b12:	8a 81       	ldd	r24, Y+2	; 0x02
    1b14:	28 2f       	mov	r18, r24
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	3b 87       	std	Y+11, r19	; 0x0b
    1b1a:	2a 87       	std	Y+10, r18	; 0x0a
    1b1c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b1e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b20:	81 30       	cpi	r24, 0x01	; 1
    1b22:	91 05       	cpc	r25, r1
    1b24:	f9 f0       	breq	.+62     	; 0x1b64 <EXTI_u8InterruptEnable+0xb2>
    1b26:	2a 85       	ldd	r18, Y+10	; 0x0a
    1b28:	3b 85       	ldd	r19, Y+11	; 0x0b
    1b2a:	22 30       	cpi	r18, 0x02	; 2
    1b2c:	31 05       	cpc	r19, r1
    1b2e:	81 f1       	breq	.+96     	; 0x1b90 <EXTI_u8InterruptEnable+0xde>
    1b30:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b32:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b34:	00 97       	sbiw	r24, 0x00	; 0
    1b36:	71 f5       	brne	.+92     	; 0x1b94 <EXTI_u8InterruptEnable+0xe2>
		{
			case EXTI_u8_INTERRUPT0:
			CLR_BIT(EXTI_u8_MCUCR_REG , 0);			// Select Edge source => Low Level ISC01 ISC00  --> 0 0
    1b38:	a5 e5       	ldi	r26, 0x55	; 85
    1b3a:	b0 e0       	ldi	r27, 0x00	; 0
    1b3c:	e5 e5       	ldi	r30, 0x55	; 85
    1b3e:	f0 e0       	ldi	r31, 0x00	; 0
    1b40:	80 81       	ld	r24, Z
    1b42:	8e 7f       	andi	r24, 0xFE	; 254
    1b44:	8c 93       	st	X, r24
			CLR_BIT(EXTI_u8_MCUCR_REG , 1);
    1b46:	a5 e5       	ldi	r26, 0x55	; 85
    1b48:	b0 e0       	ldi	r27, 0x00	; 0
    1b4a:	e5 e5       	ldi	r30, 0x55	; 85
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	80 81       	ld	r24, Z
    1b50:	8d 7f       	andi	r24, 0xFD	; 253
    1b52:	8c 93       	st	X, r24
			
			SET_BIT(EXTI_u8_GICR_REG , 6);			//Enable EXTI0 => PIE INT0 --> 1
    1b54:	ab e5       	ldi	r26, 0x5B	; 91
    1b56:	b0 e0       	ldi	r27, 0x00	; 0
    1b58:	eb e5       	ldi	r30, 0x5B	; 91
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	80 81       	ld	r24, Z
    1b5e:	80 64       	ori	r24, 0x40	; 64
    1b60:	8c 93       	st	X, r24
    1b62:	fe c0       	rjmp	.+508    	; 0x1d60 <EXTI_u8InterruptEnable+0x2ae>
			break;
			
			case EXTI_u8_INTERRUPT1:
			CLR_BIT(EXTI_u8_MCUCR_REG , 2);			// Select Edge source => Low Level ISC11 ISC10  --> 0 0
    1b64:	a5 e5       	ldi	r26, 0x55	; 85
    1b66:	b0 e0       	ldi	r27, 0x00	; 0
    1b68:	e5 e5       	ldi	r30, 0x55	; 85
    1b6a:	f0 e0       	ldi	r31, 0x00	; 0
    1b6c:	80 81       	ld	r24, Z
    1b6e:	8b 7f       	andi	r24, 0xFB	; 251
    1b70:	8c 93       	st	X, r24
			CLR_BIT(EXTI_u8_MCUCR_REG , 3);
    1b72:	a5 e5       	ldi	r26, 0x55	; 85
    1b74:	b0 e0       	ldi	r27, 0x00	; 0
    1b76:	e5 e5       	ldi	r30, 0x55	; 85
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	80 81       	ld	r24, Z
    1b7c:	87 7f       	andi	r24, 0xF7	; 247
    1b7e:	8c 93       	st	X, r24
			
			SET_BIT(EXTI_u8_GICR_REG , 7);			//Enable EXTI1 => PIE INT1 --> 1
    1b80:	ab e5       	ldi	r26, 0x5B	; 91
    1b82:	b0 e0       	ldi	r27, 0x00	; 0
    1b84:	eb e5       	ldi	r30, 0x5B	; 91
    1b86:	f0 e0       	ldi	r31, 0x00	; 0
    1b88:	80 81       	ld	r24, Z
    1b8a:	80 68       	ori	r24, 0x80	; 128
    1b8c:	8c 93       	st	X, r24
    1b8e:	e8 c0       	rjmp	.+464    	; 0x1d60 <EXTI_u8InterruptEnable+0x2ae>
			break;
			
			case EXTI_u8_INTERRUPT2:
			Local_u8ErrorState = STD_TYPES_NOK;	//Low level isn't applicable in INT2
    1b90:	19 82       	std	Y+1, r1	; 0x01
    1b92:	e6 c0       	rjmp	.+460    	; 0x1d60 <EXTI_u8InterruptEnable+0x2ae>
			break;
			
			default:
			Local_u8ErrorState = STD_TYPES_NOK;
    1b94:	19 82       	std	Y+1, r1	; 0x01
    1b96:	e4 c0       	rjmp	.+456    	; 0x1d60 <EXTI_u8InterruptEnable+0x2ae>
		}
		break;
		
		
		case EXTI_u8_LOGICAL_CHANGE:
		switch(Copy_u8EXTIIndex)
    1b98:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9a:	28 2f       	mov	r18, r24
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	39 87       	std	Y+9, r19	; 0x09
    1ba0:	28 87       	std	Y+8, r18	; 0x08
    1ba2:	88 85       	ldd	r24, Y+8	; 0x08
    1ba4:	99 85       	ldd	r25, Y+9	; 0x09
    1ba6:	81 30       	cpi	r24, 0x01	; 1
    1ba8:	91 05       	cpc	r25, r1
    1baa:	f9 f0       	breq	.+62     	; 0x1bea <EXTI_u8InterruptEnable+0x138>
    1bac:	28 85       	ldd	r18, Y+8	; 0x08
    1bae:	39 85       	ldd	r19, Y+9	; 0x09
    1bb0:	22 30       	cpi	r18, 0x02	; 2
    1bb2:	31 05       	cpc	r19, r1
    1bb4:	81 f1       	breq	.+96     	; 0x1c16 <EXTI_u8InterruptEnable+0x164>
    1bb6:	88 85       	ldd	r24, Y+8	; 0x08
    1bb8:	99 85       	ldd	r25, Y+9	; 0x09
    1bba:	00 97       	sbiw	r24, 0x00	; 0
    1bbc:	71 f5       	brne	.+92     	; 0x1c1a <EXTI_u8InterruptEnable+0x168>
		{
			case EXTI_u8_INTERRUPT0:
			SET_BIT(EXTI_u8_MCUCR_REG , 0);			// Select Edge source => Logical Change ISC01 ISC00  --> 0 1
    1bbe:	a5 e5       	ldi	r26, 0x55	; 85
    1bc0:	b0 e0       	ldi	r27, 0x00	; 0
    1bc2:	e5 e5       	ldi	r30, 0x55	; 85
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	80 81       	ld	r24, Z
    1bc8:	81 60       	ori	r24, 0x01	; 1
    1bca:	8c 93       	st	X, r24
			CLR_BIT(EXTI_u8_MCUCR_REG , 1);
    1bcc:	a5 e5       	ldi	r26, 0x55	; 85
    1bce:	b0 e0       	ldi	r27, 0x00	; 0
    1bd0:	e5 e5       	ldi	r30, 0x55	; 85
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	80 81       	ld	r24, Z
    1bd6:	8d 7f       	andi	r24, 0xFD	; 253
    1bd8:	8c 93       	st	X, r24
			
			SET_BIT(EXTI_u8_GICR_REG , 6);			//Enable EXTI0 => PIE INT0 --> 1
    1bda:	ab e5       	ldi	r26, 0x5B	; 91
    1bdc:	b0 e0       	ldi	r27, 0x00	; 0
    1bde:	eb e5       	ldi	r30, 0x5B	; 91
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	80 81       	ld	r24, Z
    1be4:	80 64       	ori	r24, 0x40	; 64
    1be6:	8c 93       	st	X, r24
    1be8:	bb c0       	rjmp	.+374    	; 0x1d60 <EXTI_u8InterruptEnable+0x2ae>
			break;
			
			case EXTI_u8_INTERRUPT1:
			SET_BIT(EXTI_u8_MCUCR_REG , 2);			// Select Edge source => Low Level ISC11 ISC10  --> 0 1
    1bea:	a5 e5       	ldi	r26, 0x55	; 85
    1bec:	b0 e0       	ldi	r27, 0x00	; 0
    1bee:	e5 e5       	ldi	r30, 0x55	; 85
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	80 81       	ld	r24, Z
    1bf4:	84 60       	ori	r24, 0x04	; 4
    1bf6:	8c 93       	st	X, r24
			CLR_BIT(EXTI_u8_MCUCR_REG , 3);
    1bf8:	a5 e5       	ldi	r26, 0x55	; 85
    1bfa:	b0 e0       	ldi	r27, 0x00	; 0
    1bfc:	e5 e5       	ldi	r30, 0x55	; 85
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	80 81       	ld	r24, Z
    1c02:	87 7f       	andi	r24, 0xF7	; 247
    1c04:	8c 93       	st	X, r24
			
			SET_BIT(EXTI_u8_GICR_REG , 7);			//Enable EXTI1 => PIE INT1 --> 1
    1c06:	ab e5       	ldi	r26, 0x5B	; 91
    1c08:	b0 e0       	ldi	r27, 0x00	; 0
    1c0a:	eb e5       	ldi	r30, 0x5B	; 91
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	80 81       	ld	r24, Z
    1c10:	80 68       	ori	r24, 0x80	; 128
    1c12:	8c 93       	st	X, r24
    1c14:	a5 c0       	rjmp	.+330    	; 0x1d60 <EXTI_u8InterruptEnable+0x2ae>
			break;
			
			case EXTI_u8_INTERRUPT2:				//Logical change isn't applicable in INT2
			Local_u8ErrorState = STD_TYPES_NOK;
    1c16:	19 82       	std	Y+1, r1	; 0x01
    1c18:	a3 c0       	rjmp	.+326    	; 0x1d60 <EXTI_u8InterruptEnable+0x2ae>
			break;
			
			default:
			Local_u8ErrorState = STD_TYPES_NOK;
    1c1a:	19 82       	std	Y+1, r1	; 0x01
    1c1c:	a1 c0       	rjmp	.+322    	; 0x1d60 <EXTI_u8InterruptEnable+0x2ae>
		}
		break;
		
	
		case EXTI_u8_FALLING_EDGE:
		switch(Copy_u8EXTIIndex)
    1c1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c20:	28 2f       	mov	r18, r24
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	3f 83       	std	Y+7, r19	; 0x07
    1c26:	2e 83       	std	Y+6, r18	; 0x06
    1c28:	8e 81       	ldd	r24, Y+6	; 0x06
    1c2a:	9f 81       	ldd	r25, Y+7	; 0x07
    1c2c:	81 30       	cpi	r24, 0x01	; 1
    1c2e:	91 05       	cpc	r25, r1
    1c30:	f9 f0       	breq	.+62     	; 0x1c70 <EXTI_u8InterruptEnable+0x1be>
    1c32:	2e 81       	ldd	r18, Y+6	; 0x06
    1c34:	3f 81       	ldd	r19, Y+7	; 0x07
    1c36:	22 30       	cpi	r18, 0x02	; 2
    1c38:	31 05       	cpc	r19, r1
    1c3a:	81 f1       	breq	.+96     	; 0x1c9c <EXTI_u8InterruptEnable+0x1ea>
    1c3c:	8e 81       	ldd	r24, Y+6	; 0x06
    1c3e:	9f 81       	ldd	r25, Y+7	; 0x07
    1c40:	00 97       	sbiw	r24, 0x00	; 0
    1c42:	d9 f5       	brne	.+118    	; 0x1cba <EXTI_u8InterruptEnable+0x208>
		{
			case EXTI_u8_INTERRUPT0:
			CLR_BIT(EXTI_u8_MCUCR_REG , 0);			// Select Edge source => Falling Edge ISC01 ISC00  --> 1 0
    1c44:	a5 e5       	ldi	r26, 0x55	; 85
    1c46:	b0 e0       	ldi	r27, 0x00	; 0
    1c48:	e5 e5       	ldi	r30, 0x55	; 85
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	80 81       	ld	r24, Z
    1c4e:	8e 7f       	andi	r24, 0xFE	; 254
    1c50:	8c 93       	st	X, r24
			SET_BIT(EXTI_u8_MCUCR_REG , 1);
    1c52:	a5 e5       	ldi	r26, 0x55	; 85
    1c54:	b0 e0       	ldi	r27, 0x00	; 0
    1c56:	e5 e5       	ldi	r30, 0x55	; 85
    1c58:	f0 e0       	ldi	r31, 0x00	; 0
    1c5a:	80 81       	ld	r24, Z
    1c5c:	82 60       	ori	r24, 0x02	; 2
    1c5e:	8c 93       	st	X, r24
			
			SET_BIT(EXTI_u8_GICR_REG , 6);			//Enable EXTI0 => PIE INT0 --> 1
    1c60:	ab e5       	ldi	r26, 0x5B	; 91
    1c62:	b0 e0       	ldi	r27, 0x00	; 0
    1c64:	eb e5       	ldi	r30, 0x5B	; 91
    1c66:	f0 e0       	ldi	r31, 0x00	; 0
    1c68:	80 81       	ld	r24, Z
    1c6a:	80 64       	ori	r24, 0x40	; 64
    1c6c:	8c 93       	st	X, r24
    1c6e:	78 c0       	rjmp	.+240    	; 0x1d60 <EXTI_u8InterruptEnable+0x2ae>
			break;
			
			case EXTI_u8_INTERRUPT1:
			CLR_BIT(EXTI_u8_MCUCR_REG , 2);			// Select Edge source => Falling Edge ISC11 ISC10  --> 1 0
    1c70:	a5 e5       	ldi	r26, 0x55	; 85
    1c72:	b0 e0       	ldi	r27, 0x00	; 0
    1c74:	e5 e5       	ldi	r30, 0x55	; 85
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	80 81       	ld	r24, Z
    1c7a:	8b 7f       	andi	r24, 0xFB	; 251
    1c7c:	8c 93       	st	X, r24
			SET_BIT(EXTI_u8_MCUCR_REG , 3);
    1c7e:	a5 e5       	ldi	r26, 0x55	; 85
    1c80:	b0 e0       	ldi	r27, 0x00	; 0
    1c82:	e5 e5       	ldi	r30, 0x55	; 85
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	80 81       	ld	r24, Z
    1c88:	88 60       	ori	r24, 0x08	; 8
    1c8a:	8c 93       	st	X, r24
			
			SET_BIT(EXTI_u8_GICR_REG , 7);			//Enable EXTI1 => PIE INT1 --> 1
    1c8c:	ab e5       	ldi	r26, 0x5B	; 91
    1c8e:	b0 e0       	ldi	r27, 0x00	; 0
    1c90:	eb e5       	ldi	r30, 0x5B	; 91
    1c92:	f0 e0       	ldi	r31, 0x00	; 0
    1c94:	80 81       	ld	r24, Z
    1c96:	80 68       	ori	r24, 0x80	; 128
    1c98:	8c 93       	st	X, r24
    1c9a:	62 c0       	rjmp	.+196    	; 0x1d60 <EXTI_u8InterruptEnable+0x2ae>
			break;
			
			case EXTI_u8_INTERRUPT2:
			CLR_BIT(EXTI_u8_MCUCSR_REG , 6);		// Select Edge source => Falling Edge ISC2  --> 0
    1c9c:	a4 e5       	ldi	r26, 0x54	; 84
    1c9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ca0:	e4 e5       	ldi	r30, 0x54	; 84
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	80 81       	ld	r24, Z
    1ca6:	8f 7b       	andi	r24, 0xBF	; 191
    1ca8:	8c 93       	st	X, r24
			
			SET_BIT(EXTI_u8_GICR_REG , 5);			//Enable EXTI2 => PIE INT2 --> 1
    1caa:	ab e5       	ldi	r26, 0x5B	; 91
    1cac:	b0 e0       	ldi	r27, 0x00	; 0
    1cae:	eb e5       	ldi	r30, 0x5B	; 91
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	80 81       	ld	r24, Z
    1cb4:	80 62       	ori	r24, 0x20	; 32
    1cb6:	8c 93       	st	X, r24
    1cb8:	53 c0       	rjmp	.+166    	; 0x1d60 <EXTI_u8InterruptEnable+0x2ae>
			break;
			
			default:
			Local_u8ErrorState = STD_TYPES_NOK;
    1cba:	19 82       	std	Y+1, r1	; 0x01
    1cbc:	51 c0       	rjmp	.+162    	; 0x1d60 <EXTI_u8InterruptEnable+0x2ae>
		}
		break;
		
		
		case EXTI_u8_RISING_EDGE:
		switch(Copy_u8EXTIIndex)
    1cbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc0:	28 2f       	mov	r18, r24
    1cc2:	30 e0       	ldi	r19, 0x00	; 0
    1cc4:	3d 83       	std	Y+5, r19	; 0x05
    1cc6:	2c 83       	std	Y+4, r18	; 0x04
    1cc8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cca:	9d 81       	ldd	r25, Y+5	; 0x05
    1ccc:	81 30       	cpi	r24, 0x01	; 1
    1cce:	91 05       	cpc	r25, r1
    1cd0:	f9 f0       	breq	.+62     	; 0x1d10 <EXTI_u8InterruptEnable+0x25e>
    1cd2:	2c 81       	ldd	r18, Y+4	; 0x04
    1cd4:	3d 81       	ldd	r19, Y+5	; 0x05
    1cd6:	22 30       	cpi	r18, 0x02	; 2
    1cd8:	31 05       	cpc	r19, r1
    1cda:	81 f1       	breq	.+96     	; 0x1d3c <EXTI_u8InterruptEnable+0x28a>
    1cdc:	8c 81       	ldd	r24, Y+4	; 0x04
    1cde:	9d 81       	ldd	r25, Y+5	; 0x05
    1ce0:	00 97       	sbiw	r24, 0x00	; 0
    1ce2:	d9 f5       	brne	.+118    	; 0x1d5a <EXTI_u8InterruptEnable+0x2a8>
		{
			case EXTI_u8_INTERRUPT0:
			SET_BIT(EXTI_u8_MCUCR_REG , 0);			// Select Edge source => Raising Edge ISC01 ISC00  --> 1 1
    1ce4:	a5 e5       	ldi	r26, 0x55	; 85
    1ce6:	b0 e0       	ldi	r27, 0x00	; 0
    1ce8:	e5 e5       	ldi	r30, 0x55	; 85
    1cea:	f0 e0       	ldi	r31, 0x00	; 0
    1cec:	80 81       	ld	r24, Z
    1cee:	81 60       	ori	r24, 0x01	; 1
    1cf0:	8c 93       	st	X, r24
			SET_BIT(EXTI_u8_MCUCR_REG , 1);
    1cf2:	a5 e5       	ldi	r26, 0x55	; 85
    1cf4:	b0 e0       	ldi	r27, 0x00	; 0
    1cf6:	e5 e5       	ldi	r30, 0x55	; 85
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	80 81       	ld	r24, Z
    1cfc:	82 60       	ori	r24, 0x02	; 2
    1cfe:	8c 93       	st	X, r24
			
			SET_BIT(EXTI_u8_GICR_REG , 6);			//Enable EXTI0 => PIE INT0 --> 1
    1d00:	ab e5       	ldi	r26, 0x5B	; 91
    1d02:	b0 e0       	ldi	r27, 0x00	; 0
    1d04:	eb e5       	ldi	r30, 0x5B	; 91
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	80 81       	ld	r24, Z
    1d0a:	80 64       	ori	r24, 0x40	; 64
    1d0c:	8c 93       	st	X, r24
    1d0e:	28 c0       	rjmp	.+80     	; 0x1d60 <EXTI_u8InterruptEnable+0x2ae>
			break;
			
			case EXTI_u8_INTERRUPT1:
			SET_BIT(EXTI_u8_MCUCR_REG , 2);			// Select Edge source => Raising Edge ISC11 ISC10  --> 1 1
    1d10:	a5 e5       	ldi	r26, 0x55	; 85
    1d12:	b0 e0       	ldi	r27, 0x00	; 0
    1d14:	e5 e5       	ldi	r30, 0x55	; 85
    1d16:	f0 e0       	ldi	r31, 0x00	; 0
    1d18:	80 81       	ld	r24, Z
    1d1a:	84 60       	ori	r24, 0x04	; 4
    1d1c:	8c 93       	st	X, r24
			SET_BIT(EXTI_u8_MCUCR_REG , 3);
    1d1e:	a5 e5       	ldi	r26, 0x55	; 85
    1d20:	b0 e0       	ldi	r27, 0x00	; 0
    1d22:	e5 e5       	ldi	r30, 0x55	; 85
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	80 81       	ld	r24, Z
    1d28:	88 60       	ori	r24, 0x08	; 8
    1d2a:	8c 93       	st	X, r24
			
			SET_BIT(EXTI_u8_GICR_REG , 7);			//Enable EXTI1 => PIE INT1 --> 1
    1d2c:	ab e5       	ldi	r26, 0x5B	; 91
    1d2e:	b0 e0       	ldi	r27, 0x00	; 0
    1d30:	eb e5       	ldi	r30, 0x5B	; 91
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	80 81       	ld	r24, Z
    1d36:	80 68       	ori	r24, 0x80	; 128
    1d38:	8c 93       	st	X, r24
    1d3a:	12 c0       	rjmp	.+36     	; 0x1d60 <EXTI_u8InterruptEnable+0x2ae>
			break;
			
			case EXTI_u8_INTERRUPT2:
			SET_BIT(EXTI_u8_MCUCSR_REG , 6);		// Select Edge source => Raising Edge ISC2  --> 0
    1d3c:	a4 e5       	ldi	r26, 0x54	; 84
    1d3e:	b0 e0       	ldi	r27, 0x00	; 0
    1d40:	e4 e5       	ldi	r30, 0x54	; 84
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	80 81       	ld	r24, Z
    1d46:	80 64       	ori	r24, 0x40	; 64
    1d48:	8c 93       	st	X, r24
			
			SET_BIT(EXTI_u8_GICR_REG , 5);			//Enable EXTI2 => PIE INT2 --> 1
    1d4a:	ab e5       	ldi	r26, 0x5B	; 91
    1d4c:	b0 e0       	ldi	r27, 0x00	; 0
    1d4e:	eb e5       	ldi	r30, 0x5B	; 91
    1d50:	f0 e0       	ldi	r31, 0x00	; 0
    1d52:	80 81       	ld	r24, Z
    1d54:	80 62       	ori	r24, 0x20	; 32
    1d56:	8c 93       	st	X, r24
    1d58:	03 c0       	rjmp	.+6      	; 0x1d60 <EXTI_u8InterruptEnable+0x2ae>
			break;
			
			default:
			Local_u8ErrorState = STD_TYPES_NOK;
    1d5a:	19 82       	std	Y+1, r1	; 0x01
    1d5c:	01 c0       	rjmp	.+2      	; 0x1d60 <EXTI_u8InterruptEnable+0x2ae>
			break;
		}
		break;
		
		default:
		Local_u8ErrorState = STD_TYPES_NOK;
    1d5e:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	
	return Local_u8ErrorState;
    1d60:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d62:	2d 96       	adiw	r28, 0x0d	; 13
    1d64:	0f b6       	in	r0, 0x3f	; 63
    1d66:	f8 94       	cli
    1d68:	de bf       	out	0x3e, r29	; 62
    1d6a:	0f be       	out	0x3f, r0	; 63
    1d6c:	cd bf       	out	0x3d, r28	; 61
    1d6e:	cf 91       	pop	r28
    1d70:	df 91       	pop	r29
    1d72:	08 95       	ret

00001d74 <EXTI_u8InterruptDisable>:

/***************************************************************************/

u8 EXTI_u8InterruptDisable(u8 Copy_u8EXTIIndex)
/**Function used to disable a specific interrupt**/
{
    1d74:	df 93       	push	r29
    1d76:	cf 93       	push	r28
    1d78:	00 d0       	rcall	.+0      	; 0x1d7a <EXTI_u8InterruptDisable+0x6>
    1d7a:	00 d0       	rcall	.+0      	; 0x1d7c <EXTI_u8InterruptDisable+0x8>
    1d7c:	cd b7       	in	r28, 0x3d	; 61
    1d7e:	de b7       	in	r29, 0x3e	; 62
    1d80:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1d82:	81 e0       	ldi	r24, 0x01	; 1
    1d84:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8EXTIIndex)
    1d86:	8a 81       	ldd	r24, Y+2	; 0x02
    1d88:	28 2f       	mov	r18, r24
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	3c 83       	std	Y+4, r19	; 0x04
    1d8e:	2b 83       	std	Y+3, r18	; 0x03
    1d90:	8b 81       	ldd	r24, Y+3	; 0x03
    1d92:	9c 81       	ldd	r25, Y+4	; 0x04
    1d94:	81 30       	cpi	r24, 0x01	; 1
    1d96:	91 05       	cpc	r25, r1
    1d98:	89 f0       	breq	.+34     	; 0x1dbc <EXTI_u8InterruptDisable+0x48>
    1d9a:	2b 81       	ldd	r18, Y+3	; 0x03
    1d9c:	3c 81       	ldd	r19, Y+4	; 0x04
    1d9e:	22 30       	cpi	r18, 0x02	; 2
    1da0:	31 05       	cpc	r19, r1
    1da2:	a1 f0       	breq	.+40     	; 0x1dcc <EXTI_u8InterruptDisable+0x58>
    1da4:	8b 81       	ldd	r24, Y+3	; 0x03
    1da6:	9c 81       	ldd	r25, Y+4	; 0x04
    1da8:	00 97       	sbiw	r24, 0x00	; 0
    1daa:	c1 f4       	brne	.+48     	; 0x1ddc <EXTI_u8InterruptDisable+0x68>
	{
		case EXTI_u8_INTERRUPT0:
		CLR_BIT(EXTI_u8_GICR_REG , 6);		//Disable EXTI0 => PIE INT2 --> 0
    1dac:	ab e5       	ldi	r26, 0x5B	; 91
    1dae:	b0 e0       	ldi	r27, 0x00	; 0
    1db0:	eb e5       	ldi	r30, 0x5B	; 91
    1db2:	f0 e0       	ldi	r31, 0x00	; 0
    1db4:	80 81       	ld	r24, Z
    1db6:	8f 7b       	andi	r24, 0xBF	; 191
    1db8:	8c 93       	st	X, r24
    1dba:	11 c0       	rjmp	.+34     	; 0x1dde <EXTI_u8InterruptDisable+0x6a>
		break;
		
		case EXTI_u8_INTERRUPT1:
		CLR_BIT(EXTI_u8_GICR_REG , 7);		//Disable EXTI1 => PIE INT2 --> 0
    1dbc:	ab e5       	ldi	r26, 0x5B	; 91
    1dbe:	b0 e0       	ldi	r27, 0x00	; 0
    1dc0:	eb e5       	ldi	r30, 0x5B	; 91
    1dc2:	f0 e0       	ldi	r31, 0x00	; 0
    1dc4:	80 81       	ld	r24, Z
    1dc6:	8f 77       	andi	r24, 0x7F	; 127
    1dc8:	8c 93       	st	X, r24
    1dca:	09 c0       	rjmp	.+18     	; 0x1dde <EXTI_u8InterruptDisable+0x6a>
		break;
		
		case EXTI_u8_INTERRUPT2:			//Disable EXTI2 => PIE INT2 --> 0
		CLR_BIT(EXTI_u8_GICR_REG , 5);
    1dcc:	ab e5       	ldi	r26, 0x5B	; 91
    1dce:	b0 e0       	ldi	r27, 0x00	; 0
    1dd0:	eb e5       	ldi	r30, 0x5B	; 91
    1dd2:	f0 e0       	ldi	r31, 0x00	; 0
    1dd4:	80 81       	ld	r24, Z
    1dd6:	8f 7d       	andi	r24, 0xDF	; 223
    1dd8:	8c 93       	st	X, r24
    1dda:	01 c0       	rjmp	.+2      	; 0x1dde <EXTI_u8InterruptDisable+0x6a>
		break;
		
		default:
		Local_u8ErrorState = STD_TYPES_NOK;
    1ddc:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	return Local_u8ErrorState;
    1dde:	89 81       	ldd	r24, Y+1	; 0x01
}
    1de0:	0f 90       	pop	r0
    1de2:	0f 90       	pop	r0
    1de4:	0f 90       	pop	r0
    1de6:	0f 90       	pop	r0
    1de8:	cf 91       	pop	r28
    1dea:	df 91       	pop	r29
    1dec:	08 95       	ret

00001dee <__vector_1>:

/***************************************************************************/

void __vector_1(void)		__attribute__((signal));	/**ISR function of the EXTI0**/
void __vector_1(void)
{
    1dee:	1f 92       	push	r1
    1df0:	0f 92       	push	r0
    1df2:	0f b6       	in	r0, 0x3f	; 63
    1df4:	0f 92       	push	r0
    1df6:	11 24       	eor	r1, r1
    1df8:	2f 93       	push	r18
    1dfa:	3f 93       	push	r19
    1dfc:	4f 93       	push	r20
    1dfe:	5f 93       	push	r21
    1e00:	6f 93       	push	r22
    1e02:	7f 93       	push	r23
    1e04:	8f 93       	push	r24
    1e06:	9f 93       	push	r25
    1e08:	af 93       	push	r26
    1e0a:	bf 93       	push	r27
    1e0c:	ef 93       	push	r30
    1e0e:	ff 93       	push	r31
    1e10:	df 93       	push	r29
    1e12:	cf 93       	push	r28
    1e14:	cd b7       	in	r28, 0x3d	; 61
    1e16:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_ApfEXTI[EXTI_u8_INTERRUPT0] != NULL)
    1e18:	80 91 cd 01 	lds	r24, 0x01CD
    1e1c:	90 91 ce 01 	lds	r25, 0x01CE
    1e20:	00 97       	sbiw	r24, 0x00	; 0
    1e22:	29 f0       	breq	.+10     	; 0x1e2e <__vector_1+0x40>
	{
		EXTI_ApfEXTI[EXTI_u8_INTERRUPT0]();
    1e24:	e0 91 cd 01 	lds	r30, 0x01CD
    1e28:	f0 91 ce 01 	lds	r31, 0x01CE
    1e2c:	09 95       	icall
	}
	
}
    1e2e:	cf 91       	pop	r28
    1e30:	df 91       	pop	r29
    1e32:	ff 91       	pop	r31
    1e34:	ef 91       	pop	r30
    1e36:	bf 91       	pop	r27
    1e38:	af 91       	pop	r26
    1e3a:	9f 91       	pop	r25
    1e3c:	8f 91       	pop	r24
    1e3e:	7f 91       	pop	r23
    1e40:	6f 91       	pop	r22
    1e42:	5f 91       	pop	r21
    1e44:	4f 91       	pop	r20
    1e46:	3f 91       	pop	r19
    1e48:	2f 91       	pop	r18
    1e4a:	0f 90       	pop	r0
    1e4c:	0f be       	out	0x3f, r0	; 63
    1e4e:	0f 90       	pop	r0
    1e50:	1f 90       	pop	r1
    1e52:	18 95       	reti

00001e54 <__vector_2>:

/***************************************************************************/

void __vector_2(void)		__attribute__((signal));	/**ISR function of the EXTI1**/
void __vector_2(void)
{
    1e54:	1f 92       	push	r1
    1e56:	0f 92       	push	r0
    1e58:	0f b6       	in	r0, 0x3f	; 63
    1e5a:	0f 92       	push	r0
    1e5c:	11 24       	eor	r1, r1
    1e5e:	2f 93       	push	r18
    1e60:	3f 93       	push	r19
    1e62:	4f 93       	push	r20
    1e64:	5f 93       	push	r21
    1e66:	6f 93       	push	r22
    1e68:	7f 93       	push	r23
    1e6a:	8f 93       	push	r24
    1e6c:	9f 93       	push	r25
    1e6e:	af 93       	push	r26
    1e70:	bf 93       	push	r27
    1e72:	ef 93       	push	r30
    1e74:	ff 93       	push	r31
    1e76:	df 93       	push	r29
    1e78:	cf 93       	push	r28
    1e7a:	cd b7       	in	r28, 0x3d	; 61
    1e7c:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_ApfEXTI[EXTI_u8_INTERRUPT1] != NULL)
    1e7e:	80 91 cf 01 	lds	r24, 0x01CF
    1e82:	90 91 d0 01 	lds	r25, 0x01D0
    1e86:	00 97       	sbiw	r24, 0x00	; 0
    1e88:	29 f0       	breq	.+10     	; 0x1e94 <__vector_2+0x40>
	{
		EXTI_ApfEXTI[EXTI_u8_INTERRUPT1]();
    1e8a:	e0 91 cf 01 	lds	r30, 0x01CF
    1e8e:	f0 91 d0 01 	lds	r31, 0x01D0
    1e92:	09 95       	icall
	}
	
}
    1e94:	cf 91       	pop	r28
    1e96:	df 91       	pop	r29
    1e98:	ff 91       	pop	r31
    1e9a:	ef 91       	pop	r30
    1e9c:	bf 91       	pop	r27
    1e9e:	af 91       	pop	r26
    1ea0:	9f 91       	pop	r25
    1ea2:	8f 91       	pop	r24
    1ea4:	7f 91       	pop	r23
    1ea6:	6f 91       	pop	r22
    1ea8:	5f 91       	pop	r21
    1eaa:	4f 91       	pop	r20
    1eac:	3f 91       	pop	r19
    1eae:	2f 91       	pop	r18
    1eb0:	0f 90       	pop	r0
    1eb2:	0f be       	out	0x3f, r0	; 63
    1eb4:	0f 90       	pop	r0
    1eb6:	1f 90       	pop	r1
    1eb8:	18 95       	reti

00001eba <__vector_3>:

/***************************************************************************/

void __vector_3(void)		__attribute__((signal));	/**ISR function of the EXTI2**/
void __vector_3(void)
{
    1eba:	1f 92       	push	r1
    1ebc:	0f 92       	push	r0
    1ebe:	0f b6       	in	r0, 0x3f	; 63
    1ec0:	0f 92       	push	r0
    1ec2:	11 24       	eor	r1, r1
    1ec4:	2f 93       	push	r18
    1ec6:	3f 93       	push	r19
    1ec8:	4f 93       	push	r20
    1eca:	5f 93       	push	r21
    1ecc:	6f 93       	push	r22
    1ece:	7f 93       	push	r23
    1ed0:	8f 93       	push	r24
    1ed2:	9f 93       	push	r25
    1ed4:	af 93       	push	r26
    1ed6:	bf 93       	push	r27
    1ed8:	ef 93       	push	r30
    1eda:	ff 93       	push	r31
    1edc:	df 93       	push	r29
    1ede:	cf 93       	push	r28
    1ee0:	cd b7       	in	r28, 0x3d	; 61
    1ee2:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_ApfEXTI[EXTI_u8_INTERRUPT2] != NULL)
    1ee4:	80 91 d1 01 	lds	r24, 0x01D1
    1ee8:	90 91 d2 01 	lds	r25, 0x01D2
    1eec:	00 97       	sbiw	r24, 0x00	; 0
    1eee:	29 f0       	breq	.+10     	; 0x1efa <__vector_3+0x40>
	{
		EXTI_ApfEXTI[EXTI_u8_INTERRUPT2]();
    1ef0:	e0 91 d1 01 	lds	r30, 0x01D1
    1ef4:	f0 91 d2 01 	lds	r31, 0x01D2
    1ef8:	09 95       	icall
	}
}
    1efa:	cf 91       	pop	r28
    1efc:	df 91       	pop	r29
    1efe:	ff 91       	pop	r31
    1f00:	ef 91       	pop	r30
    1f02:	bf 91       	pop	r27
    1f04:	af 91       	pop	r26
    1f06:	9f 91       	pop	r25
    1f08:	8f 91       	pop	r24
    1f0a:	7f 91       	pop	r23
    1f0c:	6f 91       	pop	r22
    1f0e:	5f 91       	pop	r21
    1f10:	4f 91       	pop	r20
    1f12:	3f 91       	pop	r19
    1f14:	2f 91       	pop	r18
    1f16:	0f 90       	pop	r0
    1f18:	0f be       	out	0x3f, r0	; 63
    1f1a:	0f 90       	pop	r0
    1f1c:	1f 90       	pop	r1
    1f1e:	18 95       	reti

00001f20 <GI_voidEnable>:
/*MCAL*/
#include "GI_interface.h"
#include "GI_private.h"

void GI_voidEnable(void)
{
    1f20:	df 93       	push	r29
    1f22:	cf 93       	push	r28
    1f24:	cd b7       	in	r28, 0x3d	; 61
    1f26:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG , 7);
    1f28:	af e5       	ldi	r26, 0x5F	; 95
    1f2a:	b0 e0       	ldi	r27, 0x00	; 0
    1f2c:	ef e5       	ldi	r30, 0x5F	; 95
    1f2e:	f0 e0       	ldi	r31, 0x00	; 0
    1f30:	80 81       	ld	r24, Z
    1f32:	80 68       	ori	r24, 0x80	; 128
    1f34:	8c 93       	st	X, r24
}
    1f36:	cf 91       	pop	r28
    1f38:	df 91       	pop	r29
    1f3a:	08 95       	ret

00001f3c <GI_voidDisable>:

void GI_voidDisable(void)
{
    1f3c:	df 93       	push	r29
    1f3e:	cf 93       	push	r28
    1f40:	cd b7       	in	r28, 0x3d	; 61
    1f42:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG , 7);
    1f44:	af e5       	ldi	r26, 0x5F	; 95
    1f46:	b0 e0       	ldi	r27, 0x00	; 0
    1f48:	ef e5       	ldi	r30, 0x5F	; 95
    1f4a:	f0 e0       	ldi	r31, 0x00	; 0
    1f4c:	80 81       	ld	r24, Z
    1f4e:	8f 77       	andi	r24, 0x7F	; 127
    1f50:	8c 93       	st	X, r24
}
    1f52:	cf 91       	pop	r28
    1f54:	df 91       	pop	r29
    1f56:	08 95       	ret

00001f58 <KPD_u8GetPressedKey>:



u8 KPD_u8GetPressedKey(u8 * Copy_pu8ReturnedKey)
/**Function used to return the pressed key from the keypad**/			
{
    1f58:	df 93       	push	r29
    1f5a:	cf 93       	push	r28
    1f5c:	cd b7       	in	r28, 0x3d	; 61
    1f5e:	de b7       	in	r29, 0x3e	; 62
    1f60:	65 97       	sbiw	r28, 0x15	; 21
    1f62:	0f b6       	in	r0, 0x3f	; 63
    1f64:	f8 94       	cli
    1f66:	de bf       	out	0x3e, r29	; 62
    1f68:	0f be       	out	0x3f, r0	; 63
    1f6a:	cd bf       	out	0x3d, r28	; 61
    1f6c:	9d 8b       	std	Y+21, r25	; 0x15
    1f6e:	8c 8b       	std	Y+20, r24	; 0x14
	u8 Local_u8ErrorState = STD_TYPES_OK;					//Variable to return the state of the function
    1f70:	81 e0       	ldi	r24, 0x01	; 1
    1f72:	8a 8b       	std	Y+18, r24	; 0x12
	u8 Local_u8ReturnedPinValue;							//Variable to hold the returned pin value
	u8 Local_u8RowsCounter;									//Variable to be used as Counter for rows
	u8 Local_u8ColsCounter;									//Variable to be used as Counter for cols
	u8 Local_u8Flag = 0;									//Variable to be used as a flag to indicate that the key was found
    1f74:	1f 86       	std	Y+15, r1	; 0x0f
	
	
	if(Copy_pu8ReturnedKey != NULL)															//Check that the pointer argument holds an address of a variable in main
    1f76:	8c 89       	ldd	r24, Y+20	; 0x14
    1f78:	9d 89       	ldd	r25, Y+21	; 0x15
    1f7a:	00 97       	sbiw	r24, 0x00	; 0
    1f7c:	09 f4       	brne	.+2      	; 0x1f80 <KPD_u8GetPressedKey+0x28>
    1f7e:	1b c1       	rjmp	.+566    	; 0x21b6 <KPD_u8GetPressedKey+0x25e>
	{
		for(Local_u8RowsCounter=0 ; Local_u8RowsCounter<4 ; Local_u8RowsCounter++)		    //Loop on the rows
    1f80:	19 8a       	std	Y+17, r1	; 0x11
    1f82:	14 c1       	rjmp	.+552    	; 0x21ac <KPD_u8GetPressedKey+0x254>
		{
			DIO_u8SetPinValue(KPD_Au8RowsPorts[Local_u8RowsCounter] , KPD_Au8RowPins[Local_u8RowsCounter] , DIO_u8_LOW);	//Set the row in the round to low (Activate the row)
    1f84:	89 89       	ldd	r24, Y+17	; 0x11
    1f86:	88 2f       	mov	r24, r24
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	fc 01       	movw	r30, r24
    1f8c:	e7 54       	subi	r30, 0x47	; 71
    1f8e:	fe 4f       	sbci	r31, 0xFE	; 254
    1f90:	20 81       	ld	r18, Z
    1f92:	89 89       	ldd	r24, Y+17	; 0x11
    1f94:	88 2f       	mov	r24, r24
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	fc 01       	movw	r30, r24
    1f9a:	e3 54       	subi	r30, 0x43	; 67
    1f9c:	fe 4f       	sbci	r31, 0xFE	; 254
    1f9e:	90 81       	ld	r25, Z
    1fa0:	82 2f       	mov	r24, r18
    1fa2:	69 2f       	mov	r22, r25
    1fa4:	40 e0       	ldi	r20, 0x00	; 0
    1fa6:	0e 94 a6 09 	call	0x134c	; 0x134c <DIO_u8SetPinValue>
			
			for(Local_u8ColsCounter=0 ; Local_u8ColsCounter<4 ; Local_u8ColsCounter++)		//Loop on the cols
    1faa:	18 8a       	std	Y+16, r1	; 0x10
    1fac:	e2 c0       	rjmp	.+452    	; 0x2172 <KPD_u8GetPressedKey+0x21a>
			{
				DIO_u8GetPinValue(KPD_Au8ColsPorts[Local_u8ColsCounter] , KPD_Au8ColsPins[Local_u8ColsCounter] , &Local_u8ReturnedPinValue);   //Get the value of the current pin and save that to the local variable
    1fae:	88 89       	ldd	r24, Y+16	; 0x10
    1fb0:	88 2f       	mov	r24, r24
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	fc 01       	movw	r30, r24
    1fb6:	ef 53       	subi	r30, 0x3F	; 63
    1fb8:	fe 4f       	sbci	r31, 0xFE	; 254
    1fba:	40 81       	ld	r20, Z
    1fbc:	88 89       	ldd	r24, Y+16	; 0x10
    1fbe:	88 2f       	mov	r24, r24
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	fc 01       	movw	r30, r24
    1fc4:	eb 53       	subi	r30, 0x3B	; 59
    1fc6:	fe 4f       	sbci	r31, 0xFE	; 254
    1fc8:	90 81       	ld	r25, Z
    1fca:	9e 01       	movw	r18, r28
    1fcc:	2d 5e       	subi	r18, 0xED	; 237
    1fce:	3f 4f       	sbci	r19, 0xFF	; 255
    1fd0:	84 2f       	mov	r24, r20
    1fd2:	69 2f       	mov	r22, r25
    1fd4:	a9 01       	movw	r20, r18
    1fd6:	0e 94 bd 0a 	call	0x157a	; 0x157a <DIO_u8GetPinValue>
				if(Local_u8ReturnedPinValue == DIO_u8_LOW)									//If local variable is set to 0  --> The key is pressed
    1fda:	8b 89       	ldd	r24, Y+19	; 0x13
    1fdc:	88 23       	and	r24, r24
    1fde:	09 f0       	breq	.+2      	; 0x1fe2 <KPD_u8GetPressedKey+0x8a>
    1fe0:	c1 c0       	rjmp	.+386    	; 0x2164 <KPD_u8GetPressedKey+0x20c>
    1fe2:	80 e0       	ldi	r24, 0x00	; 0
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	a0 ea       	ldi	r26, 0xA0	; 160
    1fe8:	b1 e4       	ldi	r27, 0x41	; 65
    1fea:	8b 87       	std	Y+11, r24	; 0x0b
    1fec:	9c 87       	std	Y+12, r25	; 0x0c
    1fee:	ad 87       	std	Y+13, r26	; 0x0d
    1ff0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ff2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ff4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ff6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ff8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ffa:	20 e0       	ldi	r18, 0x00	; 0
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	4a ef       	ldi	r20, 0xFA	; 250
    2000:	54 e4       	ldi	r21, 0x44	; 68
    2002:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2006:	dc 01       	movw	r26, r24
    2008:	cb 01       	movw	r24, r22
    200a:	8f 83       	std	Y+7, r24	; 0x07
    200c:	98 87       	std	Y+8, r25	; 0x08
    200e:	a9 87       	std	Y+9, r26	; 0x09
    2010:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2012:	6f 81       	ldd	r22, Y+7	; 0x07
    2014:	78 85       	ldd	r23, Y+8	; 0x08
    2016:	89 85       	ldd	r24, Y+9	; 0x09
    2018:	9a 85       	ldd	r25, Y+10	; 0x0a
    201a:	20 e0       	ldi	r18, 0x00	; 0
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	40 e8       	ldi	r20, 0x80	; 128
    2020:	5f e3       	ldi	r21, 0x3F	; 63
    2022:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2026:	88 23       	and	r24, r24
    2028:	2c f4       	brge	.+10     	; 0x2034 <KPD_u8GetPressedKey+0xdc>
		__ticks = 1;
    202a:	81 e0       	ldi	r24, 0x01	; 1
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	9e 83       	std	Y+6, r25	; 0x06
    2030:	8d 83       	std	Y+5, r24	; 0x05
    2032:	3f c0       	rjmp	.+126    	; 0x20b2 <KPD_u8GetPressedKey+0x15a>
	else if (__tmp > 65535)
    2034:	6f 81       	ldd	r22, Y+7	; 0x07
    2036:	78 85       	ldd	r23, Y+8	; 0x08
    2038:	89 85       	ldd	r24, Y+9	; 0x09
    203a:	9a 85       	ldd	r25, Y+10	; 0x0a
    203c:	20 e0       	ldi	r18, 0x00	; 0
    203e:	3f ef       	ldi	r19, 0xFF	; 255
    2040:	4f e7       	ldi	r20, 0x7F	; 127
    2042:	57 e4       	ldi	r21, 0x47	; 71
    2044:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2048:	18 16       	cp	r1, r24
    204a:	4c f5       	brge	.+82     	; 0x209e <KPD_u8GetPressedKey+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    204c:	6b 85       	ldd	r22, Y+11	; 0x0b
    204e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2050:	8d 85       	ldd	r24, Y+13	; 0x0d
    2052:	9e 85       	ldd	r25, Y+14	; 0x0e
    2054:	20 e0       	ldi	r18, 0x00	; 0
    2056:	30 e0       	ldi	r19, 0x00	; 0
    2058:	40 e2       	ldi	r20, 0x20	; 32
    205a:	51 e4       	ldi	r21, 0x41	; 65
    205c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2060:	dc 01       	movw	r26, r24
    2062:	cb 01       	movw	r24, r22
    2064:	bc 01       	movw	r22, r24
    2066:	cd 01       	movw	r24, r26
    2068:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    206c:	dc 01       	movw	r26, r24
    206e:	cb 01       	movw	r24, r22
    2070:	9e 83       	std	Y+6, r25	; 0x06
    2072:	8d 83       	std	Y+5, r24	; 0x05
    2074:	0f c0       	rjmp	.+30     	; 0x2094 <KPD_u8GetPressedKey+0x13c>
    2076:	88 ec       	ldi	r24, 0xC8	; 200
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	9c 83       	std	Y+4, r25	; 0x04
    207c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    207e:	8b 81       	ldd	r24, Y+3	; 0x03
    2080:	9c 81       	ldd	r25, Y+4	; 0x04
    2082:	01 97       	sbiw	r24, 0x01	; 1
    2084:	f1 f7       	brne	.-4      	; 0x2082 <KPD_u8GetPressedKey+0x12a>
    2086:	9c 83       	std	Y+4, r25	; 0x04
    2088:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    208a:	8d 81       	ldd	r24, Y+5	; 0x05
    208c:	9e 81       	ldd	r25, Y+6	; 0x06
    208e:	01 97       	sbiw	r24, 0x01	; 1
    2090:	9e 83       	std	Y+6, r25	; 0x06
    2092:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2094:	8d 81       	ldd	r24, Y+5	; 0x05
    2096:	9e 81       	ldd	r25, Y+6	; 0x06
    2098:	00 97       	sbiw	r24, 0x00	; 0
    209a:	69 f7       	brne	.-38     	; 0x2076 <KPD_u8GetPressedKey+0x11e>
    209c:	14 c0       	rjmp	.+40     	; 0x20c6 <KPD_u8GetPressedKey+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    209e:	6f 81       	ldd	r22, Y+7	; 0x07
    20a0:	78 85       	ldd	r23, Y+8	; 0x08
    20a2:	89 85       	ldd	r24, Y+9	; 0x09
    20a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20aa:	dc 01       	movw	r26, r24
    20ac:	cb 01       	movw	r24, r22
    20ae:	9e 83       	std	Y+6, r25	; 0x06
    20b0:	8d 83       	std	Y+5, r24	; 0x05
    20b2:	8d 81       	ldd	r24, Y+5	; 0x05
    20b4:	9e 81       	ldd	r25, Y+6	; 0x06
    20b6:	9a 83       	std	Y+2, r25	; 0x02
    20b8:	89 83       	std	Y+1, r24	; 0x01
    20ba:	89 81       	ldd	r24, Y+1	; 0x01
    20bc:	9a 81       	ldd	r25, Y+2	; 0x02
    20be:	01 97       	sbiw	r24, 0x01	; 1
    20c0:	f1 f7       	brne	.-4      	; 0x20be <KPD_u8GetPressedKey+0x166>
    20c2:	9a 83       	std	Y+2, r25	; 0x02
    20c4:	89 83       	std	Y+1, r24	; 0x01
				{
					/*Debouncing using delay*/
					_delay_ms(20);
					
					/*Check if the pin is still LOW*/
					DIO_u8GetPinValue(KPD_Au8ColsPorts[Local_u8ColsCounter] , KPD_Au8ColsPins[Local_u8ColsCounter] , &Local_u8ReturnedPinValue);
    20c6:	88 89       	ldd	r24, Y+16	; 0x10
    20c8:	88 2f       	mov	r24, r24
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	fc 01       	movw	r30, r24
    20ce:	ef 53       	subi	r30, 0x3F	; 63
    20d0:	fe 4f       	sbci	r31, 0xFE	; 254
    20d2:	40 81       	ld	r20, Z
    20d4:	88 89       	ldd	r24, Y+16	; 0x10
    20d6:	88 2f       	mov	r24, r24
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	fc 01       	movw	r30, r24
    20dc:	eb 53       	subi	r30, 0x3B	; 59
    20de:	fe 4f       	sbci	r31, 0xFE	; 254
    20e0:	90 81       	ld	r25, Z
    20e2:	9e 01       	movw	r18, r28
    20e4:	2d 5e       	subi	r18, 0xED	; 237
    20e6:	3f 4f       	sbci	r19, 0xFF	; 255
    20e8:	84 2f       	mov	r24, r20
    20ea:	69 2f       	mov	r22, r25
    20ec:	a9 01       	movw	r20, r18
    20ee:	0e 94 bd 0a 	call	0x157a	; 0x157a <DIO_u8GetPinValue>
					
					if(Local_u8ReturnedPinValue == DIO_u8_LOW)		//Pin is still low
    20f2:	8b 89       	ldd	r24, Y+19	; 0x13
    20f4:	88 23       	and	r24, r24
    20f6:	89 f5       	brne	.+98     	; 0x215a <KPD_u8GetPressedKey+0x202>
    20f8:	16 c0       	rjmp	.+44     	; 0x2126 <KPD_u8GetPressedKey+0x1ce>
					{
						/*Wait till the pin is back to HIGH*/
						while(Local_u8ReturnedPinValue == DIO_u8_LOW)
						{
							DIO_u8GetPinValue(KPD_Au8ColsPorts[Local_u8ColsCounter] , KPD_Au8ColsPins[Local_u8ColsCounter] , &Local_u8ReturnedPinValue);
    20fa:	88 89       	ldd	r24, Y+16	; 0x10
    20fc:	88 2f       	mov	r24, r24
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	fc 01       	movw	r30, r24
    2102:	ef 53       	subi	r30, 0x3F	; 63
    2104:	fe 4f       	sbci	r31, 0xFE	; 254
    2106:	40 81       	ld	r20, Z
    2108:	88 89       	ldd	r24, Y+16	; 0x10
    210a:	88 2f       	mov	r24, r24
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	fc 01       	movw	r30, r24
    2110:	eb 53       	subi	r30, 0x3B	; 59
    2112:	fe 4f       	sbci	r31, 0xFE	; 254
    2114:	90 81       	ld	r25, Z
    2116:	9e 01       	movw	r18, r28
    2118:	2d 5e       	subi	r18, 0xED	; 237
    211a:	3f 4f       	sbci	r19, 0xFF	; 255
    211c:	84 2f       	mov	r24, r20
    211e:	69 2f       	mov	r22, r25
    2120:	a9 01       	movw	r20, r18
    2122:	0e 94 bd 0a 	call	0x157a	; 0x157a <DIO_u8GetPinValue>
					DIO_u8GetPinValue(KPD_Au8ColsPorts[Local_u8ColsCounter] , KPD_Au8ColsPins[Local_u8ColsCounter] , &Local_u8ReturnedPinValue);
					
					if(Local_u8ReturnedPinValue == DIO_u8_LOW)		//Pin is still low
					{
						/*Wait till the pin is back to HIGH*/
						while(Local_u8ReturnedPinValue == DIO_u8_LOW)
    2126:	8b 89       	ldd	r24, Y+19	; 0x13
    2128:	88 23       	and	r24, r24
    212a:	39 f3       	breq	.-50     	; 0x20fa <KPD_u8GetPressedKey+0x1a2>
						{
							DIO_u8GetPinValue(KPD_Au8ColsPorts[Local_u8ColsCounter] , KPD_Au8ColsPins[Local_u8ColsCounter] , &Local_u8ReturnedPinValue);
						}
						
						*Copy_pu8ReturnedKey = KPD_Au8Keys[Local_u8RowsCounter][Local_u8ColsCounter];	//Return the pressed key to the return key argument
    212c:	89 89       	ldd	r24, Y+17	; 0x11
    212e:	48 2f       	mov	r20, r24
    2130:	50 e0       	ldi	r21, 0x00	; 0
    2132:	88 89       	ldd	r24, Y+16	; 0x10
    2134:	28 2f       	mov	r18, r24
    2136:	30 e0       	ldi	r19, 0x00	; 0
    2138:	ca 01       	movw	r24, r20
    213a:	88 0f       	add	r24, r24
    213c:	99 1f       	adc	r25, r25
    213e:	88 0f       	add	r24, r24
    2140:	99 1f       	adc	r25, r25
    2142:	82 0f       	add	r24, r18
    2144:	93 1f       	adc	r25, r19
    2146:	fc 01       	movw	r30, r24
    2148:	e7 55       	subi	r30, 0x57	; 87
    214a:	fe 4f       	sbci	r31, 0xFE	; 254
    214c:	80 81       	ld	r24, Z
    214e:	ec 89       	ldd	r30, Y+20	; 0x14
    2150:	fd 89       	ldd	r31, Y+21	; 0x15
    2152:	80 83       	st	Z, r24
						Local_u8Flag = 1;
    2154:	81 e0       	ldi	r24, 0x01	; 1
    2156:	8f 87       	std	Y+15, r24	; 0x0f
    2158:	10 c0       	rjmp	.+32     	; 0x217a <KPD_u8GetPressedKey+0x222>
						break;
					}
					
					else		//Pin isn't low anymore
					{
						*Copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;		//This character will be sent in case no key was pressed, so that the LCD won't display anything
    215a:	ec 89       	ldd	r30, Y+20	; 0x14
    215c:	fd 89       	ldd	r31, Y+21	; 0x15
    215e:	8f ef       	ldi	r24, 0xFF	; 255
    2160:	80 83       	st	Z, r24
    2162:	04 c0       	rjmp	.+8      	; 0x216c <KPD_u8GetPressedKey+0x214>
				
				
				
				else
				{
					*Copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;			    //This character will be sent in case no key was pressed, so that the LCD won't display anything
    2164:	ec 89       	ldd	r30, Y+20	; 0x14
    2166:	fd 89       	ldd	r31, Y+21	; 0x15
    2168:	8f ef       	ldi	r24, 0xFF	; 255
    216a:	80 83       	st	Z, r24
	{
		for(Local_u8RowsCounter=0 ; Local_u8RowsCounter<4 ; Local_u8RowsCounter++)		    //Loop on the rows
		{
			DIO_u8SetPinValue(KPD_Au8RowsPorts[Local_u8RowsCounter] , KPD_Au8RowPins[Local_u8RowsCounter] , DIO_u8_LOW);	//Set the row in the round to low (Activate the row)
			
			for(Local_u8ColsCounter=0 ; Local_u8ColsCounter<4 ; Local_u8ColsCounter++)		//Loop on the cols
    216c:	88 89       	ldd	r24, Y+16	; 0x10
    216e:	8f 5f       	subi	r24, 0xFF	; 255
    2170:	88 8b       	std	Y+16, r24	; 0x10
    2172:	88 89       	ldd	r24, Y+16	; 0x10
    2174:	84 30       	cpi	r24, 0x04	; 4
    2176:	08 f4       	brcc	.+2      	; 0x217a <KPD_u8GetPressedKey+0x222>
    2178:	1a cf       	rjmp	.-460    	; 0x1fae <KPD_u8GetPressedKey+0x56>
				}
			}
			

			/*Deactivate ROw*/
			DIO_u8SetPinValue(KPD_Au8RowsPorts[Local_u8RowsCounter] , KPD_Au8RowPins[Local_u8RowsCounter] , DIO_u8_HIGH);	//We need to return the row pin to it's original state at the end of each loop
    217a:	89 89       	ldd	r24, Y+17	; 0x11
    217c:	88 2f       	mov	r24, r24
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	fc 01       	movw	r30, r24
    2182:	e7 54       	subi	r30, 0x47	; 71
    2184:	fe 4f       	sbci	r31, 0xFE	; 254
    2186:	20 81       	ld	r18, Z
    2188:	89 89       	ldd	r24, Y+17	; 0x11
    218a:	88 2f       	mov	r24, r24
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	fc 01       	movw	r30, r24
    2190:	e3 54       	subi	r30, 0x43	; 67
    2192:	fe 4f       	sbci	r31, 0xFE	; 254
    2194:	90 81       	ld	r25, Z
    2196:	82 2f       	mov	r24, r18
    2198:	69 2f       	mov	r22, r25
    219a:	41 e0       	ldi	r20, 0x01	; 1
    219c:	0e 94 a6 09 	call	0x134c	; 0x134c <DIO_u8SetPinValue>
			
			if(Local_u8Flag == 1)	//If we found the key, we'll break the rows loop too
    21a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    21a2:	81 30       	cpi	r24, 0x01	; 1
    21a4:	49 f0       	breq	.+18     	; 0x21b8 <KPD_u8GetPressedKey+0x260>
	u8 Local_u8Flag = 0;									//Variable to be used as a flag to indicate that the key was found
	
	
	if(Copy_pu8ReturnedKey != NULL)															//Check that the pointer argument holds an address of a variable in main
	{
		for(Local_u8RowsCounter=0 ; Local_u8RowsCounter<4 ; Local_u8RowsCounter++)		    //Loop on the rows
    21a6:	89 89       	ldd	r24, Y+17	; 0x11
    21a8:	8f 5f       	subi	r24, 0xFF	; 255
    21aa:	89 8b       	std	Y+17, r24	; 0x11
    21ac:	89 89       	ldd	r24, Y+17	; 0x11
    21ae:	84 30       	cpi	r24, 0x04	; 4
    21b0:	08 f4       	brcc	.+2      	; 0x21b4 <KPD_u8GetPressedKey+0x25c>
    21b2:	e8 ce       	rjmp	.-560    	; 0x1f84 <KPD_u8GetPressedKey+0x2c>
    21b4:	01 c0       	rjmp	.+2      	; 0x21b8 <KPD_u8GetPressedKey+0x260>
		}
	}
	
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    21b6:	1a 8a       	std	Y+18, r1	; 0x12
	}
	
	return Local_u8ErrorState;
    21b8:	8a 89       	ldd	r24, Y+18	; 0x12
}
    21ba:	65 96       	adiw	r28, 0x15	; 21
    21bc:	0f b6       	in	r0, 0x3f	; 63
    21be:	f8 94       	cli
    21c0:	de bf       	out	0x3e, r29	; 62
    21c2:	0f be       	out	0x3f, r0	; 63
    21c4:	cd bf       	out	0x3d, r28	; 61
    21c6:	cf 91       	pop	r28
    21c8:	df 91       	pop	r29
    21ca:	08 95       	ret

000021cc <LCD_voidInit>:
#include "LCD_config.h"


void LCD_voidInit(void)
/**Function used to iniate the LCD**/
{
    21cc:	0f 93       	push	r16
    21ce:	1f 93       	push	r17
    21d0:	df 93       	push	r29
    21d2:	cf 93       	push	r28
    21d4:	cd b7       	in	r28, 0x3d	; 61
    21d6:	de b7       	in	r29, 0x3e	; 62
    21d8:	c6 55       	subi	r28, 0x56	; 86
    21da:	d0 40       	sbci	r29, 0x00	; 0
    21dc:	0f b6       	in	r0, 0x3f	; 63
    21de:	f8 94       	cli
    21e0:	de bf       	out	0x3e, r29	; 62
    21e2:	0f be       	out	0x3f, r0	; 63
    21e4:	cd bf       	out	0x3d, r28	; 61
    21e6:	fe 01       	movw	r30, r28
    21e8:	ed 5a       	subi	r30, 0xAD	; 173
    21ea:	ff 4f       	sbci	r31, 0xFF	; 255
    21ec:	80 e0       	ldi	r24, 0x00	; 0
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	ac e0       	ldi	r26, 0x0C	; 12
    21f2:	b2 e4       	ldi	r27, 0x42	; 66
    21f4:	80 83       	st	Z, r24
    21f6:	91 83       	std	Z+1, r25	; 0x01
    21f8:	a2 83       	std	Z+2, r26	; 0x02
    21fa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21fc:	8e 01       	movw	r16, r28
    21fe:	01 5b       	subi	r16, 0xB1	; 177
    2200:	1f 4f       	sbci	r17, 0xFF	; 255
    2202:	fe 01       	movw	r30, r28
    2204:	ed 5a       	subi	r30, 0xAD	; 173
    2206:	ff 4f       	sbci	r31, 0xFF	; 255
    2208:	60 81       	ld	r22, Z
    220a:	71 81       	ldd	r23, Z+1	; 0x01
    220c:	82 81       	ldd	r24, Z+2	; 0x02
    220e:	93 81       	ldd	r25, Z+3	; 0x03
    2210:	20 e0       	ldi	r18, 0x00	; 0
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	4a ef       	ldi	r20, 0xFA	; 250
    2216:	54 e4       	ldi	r21, 0x44	; 68
    2218:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    221c:	dc 01       	movw	r26, r24
    221e:	cb 01       	movw	r24, r22
    2220:	f8 01       	movw	r30, r16
    2222:	80 83       	st	Z, r24
    2224:	91 83       	std	Z+1, r25	; 0x01
    2226:	a2 83       	std	Z+2, r26	; 0x02
    2228:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    222a:	fe 01       	movw	r30, r28
    222c:	e1 5b       	subi	r30, 0xB1	; 177
    222e:	ff 4f       	sbci	r31, 0xFF	; 255
    2230:	60 81       	ld	r22, Z
    2232:	71 81       	ldd	r23, Z+1	; 0x01
    2234:	82 81       	ldd	r24, Z+2	; 0x02
    2236:	93 81       	ldd	r25, Z+3	; 0x03
    2238:	20 e0       	ldi	r18, 0x00	; 0
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	40 e8       	ldi	r20, 0x80	; 128
    223e:	5f e3       	ldi	r21, 0x3F	; 63
    2240:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2244:	88 23       	and	r24, r24
    2246:	44 f4       	brge	.+16     	; 0x2258 <LCD_voidInit+0x8c>
		__ticks = 1;
    2248:	fe 01       	movw	r30, r28
    224a:	e3 5b       	subi	r30, 0xB3	; 179
    224c:	ff 4f       	sbci	r31, 0xFF	; 255
    224e:	81 e0       	ldi	r24, 0x01	; 1
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	91 83       	std	Z+1, r25	; 0x01
    2254:	80 83       	st	Z, r24
    2256:	64 c0       	rjmp	.+200    	; 0x2320 <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    2258:	fe 01       	movw	r30, r28
    225a:	e1 5b       	subi	r30, 0xB1	; 177
    225c:	ff 4f       	sbci	r31, 0xFF	; 255
    225e:	60 81       	ld	r22, Z
    2260:	71 81       	ldd	r23, Z+1	; 0x01
    2262:	82 81       	ldd	r24, Z+2	; 0x02
    2264:	93 81       	ldd	r25, Z+3	; 0x03
    2266:	20 e0       	ldi	r18, 0x00	; 0
    2268:	3f ef       	ldi	r19, 0xFF	; 255
    226a:	4f e7       	ldi	r20, 0x7F	; 127
    226c:	57 e4       	ldi	r21, 0x47	; 71
    226e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2272:	18 16       	cp	r1, r24
    2274:	0c f0       	brlt	.+2      	; 0x2278 <LCD_voidInit+0xac>
    2276:	43 c0       	rjmp	.+134    	; 0x22fe <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2278:	fe 01       	movw	r30, r28
    227a:	ed 5a       	subi	r30, 0xAD	; 173
    227c:	ff 4f       	sbci	r31, 0xFF	; 255
    227e:	60 81       	ld	r22, Z
    2280:	71 81       	ldd	r23, Z+1	; 0x01
    2282:	82 81       	ldd	r24, Z+2	; 0x02
    2284:	93 81       	ldd	r25, Z+3	; 0x03
    2286:	20 e0       	ldi	r18, 0x00	; 0
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	40 e2       	ldi	r20, 0x20	; 32
    228c:	51 e4       	ldi	r21, 0x41	; 65
    228e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2292:	dc 01       	movw	r26, r24
    2294:	cb 01       	movw	r24, r22
    2296:	8e 01       	movw	r16, r28
    2298:	03 5b       	subi	r16, 0xB3	; 179
    229a:	1f 4f       	sbci	r17, 0xFF	; 255
    229c:	bc 01       	movw	r22, r24
    229e:	cd 01       	movw	r24, r26
    22a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a4:	dc 01       	movw	r26, r24
    22a6:	cb 01       	movw	r24, r22
    22a8:	f8 01       	movw	r30, r16
    22aa:	91 83       	std	Z+1, r25	; 0x01
    22ac:	80 83       	st	Z, r24
    22ae:	1f c0       	rjmp	.+62     	; 0x22ee <LCD_voidInit+0x122>
    22b0:	fe 01       	movw	r30, r28
    22b2:	e5 5b       	subi	r30, 0xB5	; 181
    22b4:	ff 4f       	sbci	r31, 0xFF	; 255
    22b6:	88 ec       	ldi	r24, 0xC8	; 200
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	91 83       	std	Z+1, r25	; 0x01
    22bc:	80 83       	st	Z, r24
    22be:	fe 01       	movw	r30, r28
    22c0:	e5 5b       	subi	r30, 0xB5	; 181
    22c2:	ff 4f       	sbci	r31, 0xFF	; 255
    22c4:	80 81       	ld	r24, Z
    22c6:	91 81       	ldd	r25, Z+1	; 0x01
    22c8:	01 97       	sbiw	r24, 0x01	; 1
    22ca:	f1 f7       	brne	.-4      	; 0x22c8 <LCD_voidInit+0xfc>
    22cc:	fe 01       	movw	r30, r28
    22ce:	e5 5b       	subi	r30, 0xB5	; 181
    22d0:	ff 4f       	sbci	r31, 0xFF	; 255
    22d2:	91 83       	std	Z+1, r25	; 0x01
    22d4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22d6:	de 01       	movw	r26, r28
    22d8:	a3 5b       	subi	r26, 0xB3	; 179
    22da:	bf 4f       	sbci	r27, 0xFF	; 255
    22dc:	fe 01       	movw	r30, r28
    22de:	e3 5b       	subi	r30, 0xB3	; 179
    22e0:	ff 4f       	sbci	r31, 0xFF	; 255
    22e2:	80 81       	ld	r24, Z
    22e4:	91 81       	ldd	r25, Z+1	; 0x01
    22e6:	01 97       	sbiw	r24, 0x01	; 1
    22e8:	11 96       	adiw	r26, 0x01	; 1
    22ea:	9c 93       	st	X, r25
    22ec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ee:	fe 01       	movw	r30, r28
    22f0:	e3 5b       	subi	r30, 0xB3	; 179
    22f2:	ff 4f       	sbci	r31, 0xFF	; 255
    22f4:	80 81       	ld	r24, Z
    22f6:	91 81       	ldd	r25, Z+1	; 0x01
    22f8:	00 97       	sbiw	r24, 0x00	; 0
    22fa:	d1 f6       	brne	.-76     	; 0x22b0 <LCD_voidInit+0xe4>
    22fc:	27 c0       	rjmp	.+78     	; 0x234c <LCD_voidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22fe:	8e 01       	movw	r16, r28
    2300:	03 5b       	subi	r16, 0xB3	; 179
    2302:	1f 4f       	sbci	r17, 0xFF	; 255
    2304:	fe 01       	movw	r30, r28
    2306:	e1 5b       	subi	r30, 0xB1	; 177
    2308:	ff 4f       	sbci	r31, 0xFF	; 255
    230a:	60 81       	ld	r22, Z
    230c:	71 81       	ldd	r23, Z+1	; 0x01
    230e:	82 81       	ldd	r24, Z+2	; 0x02
    2310:	93 81       	ldd	r25, Z+3	; 0x03
    2312:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2316:	dc 01       	movw	r26, r24
    2318:	cb 01       	movw	r24, r22
    231a:	f8 01       	movw	r30, r16
    231c:	91 83       	std	Z+1, r25	; 0x01
    231e:	80 83       	st	Z, r24
    2320:	de 01       	movw	r26, r28
    2322:	a7 5b       	subi	r26, 0xB7	; 183
    2324:	bf 4f       	sbci	r27, 0xFF	; 255
    2326:	fe 01       	movw	r30, r28
    2328:	e3 5b       	subi	r30, 0xB3	; 179
    232a:	ff 4f       	sbci	r31, 0xFF	; 255
    232c:	80 81       	ld	r24, Z
    232e:	91 81       	ldd	r25, Z+1	; 0x01
    2330:	8d 93       	st	X+, r24
    2332:	9c 93       	st	X, r25
    2334:	fe 01       	movw	r30, r28
    2336:	e7 5b       	subi	r30, 0xB7	; 183
    2338:	ff 4f       	sbci	r31, 0xFF	; 255
    233a:	80 81       	ld	r24, Z
    233c:	91 81       	ldd	r25, Z+1	; 0x01
    233e:	01 97       	sbiw	r24, 0x01	; 1
    2340:	f1 f7       	brne	.-4      	; 0x233e <LCD_voidInit+0x172>
    2342:	fe 01       	movw	r30, r28
    2344:	e7 5b       	subi	r30, 0xB7	; 183
    2346:	ff 4f       	sbci	r31, 0xFF	; 255
    2348:	91 83       	std	Z+1, r25	; 0x01
    234a:	80 83       	st	Z, r24
												 F:Sets character font
												   F=0  --> 5x7 dots
												   F=1  --> 5x10 dots
												   */
												   
	LCD_voidSendCmnd(0b00111000);			    ///DL=1 -- N=1 -- F=0
    234c:	88 e3       	ldi	r24, 0x38	; 56
    234e:	0e 94 17 14 	call	0x282e	; 0x282e <LCD_voidSendCmnd>
    2352:	fe 01       	movw	r30, r28
    2354:	eb 5b       	subi	r30, 0xBB	; 187
    2356:	ff 4f       	sbci	r31, 0xFF	; 255
    2358:	80 e0       	ldi	r24, 0x00	; 0
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	a0 e2       	ldi	r26, 0x20	; 32
    235e:	b2 e4       	ldi	r27, 0x42	; 66
    2360:	80 83       	st	Z, r24
    2362:	91 83       	std	Z+1, r25	; 0x01
    2364:	a2 83       	std	Z+2, r26	; 0x02
    2366:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2368:	8e 01       	movw	r16, r28
    236a:	0f 5b       	subi	r16, 0xBF	; 191
    236c:	1f 4f       	sbci	r17, 0xFF	; 255
    236e:	fe 01       	movw	r30, r28
    2370:	eb 5b       	subi	r30, 0xBB	; 187
    2372:	ff 4f       	sbci	r31, 0xFF	; 255
    2374:	60 81       	ld	r22, Z
    2376:	71 81       	ldd	r23, Z+1	; 0x01
    2378:	82 81       	ldd	r24, Z+2	; 0x02
    237a:	93 81       	ldd	r25, Z+3	; 0x03
    237c:	2b ea       	ldi	r18, 0xAB	; 171
    237e:	3a ea       	ldi	r19, 0xAA	; 170
    2380:	4a e2       	ldi	r20, 0x2A	; 42
    2382:	50 e4       	ldi	r21, 0x40	; 64
    2384:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2388:	dc 01       	movw	r26, r24
    238a:	cb 01       	movw	r24, r22
    238c:	f8 01       	movw	r30, r16
    238e:	80 83       	st	Z, r24
    2390:	91 83       	std	Z+1, r25	; 0x01
    2392:	a2 83       	std	Z+2, r26	; 0x02
    2394:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2396:	fe 01       	movw	r30, r28
    2398:	ef 5b       	subi	r30, 0xBF	; 191
    239a:	ff 4f       	sbci	r31, 0xFF	; 255
    239c:	60 81       	ld	r22, Z
    239e:	71 81       	ldd	r23, Z+1	; 0x01
    23a0:	82 81       	ldd	r24, Z+2	; 0x02
    23a2:	93 81       	ldd	r25, Z+3	; 0x03
    23a4:	20 e0       	ldi	r18, 0x00	; 0
    23a6:	30 e0       	ldi	r19, 0x00	; 0
    23a8:	40 e8       	ldi	r20, 0x80	; 128
    23aa:	5f e3       	ldi	r21, 0x3F	; 63
    23ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23b0:	88 23       	and	r24, r24
    23b2:	34 f4       	brge	.+12     	; 0x23c0 <LCD_voidInit+0x1f4>
		__ticks = 1;
    23b4:	81 e0       	ldi	r24, 0x01	; 1
    23b6:	fe 01       	movw	r30, r28
    23b8:	e0 5c       	subi	r30, 0xC0	; 192
    23ba:	ff 4f       	sbci	r31, 0xFF	; 255
    23bc:	80 83       	st	Z, r24
    23be:	9d c0       	rjmp	.+314    	; 0x24fa <LCD_voidInit+0x32e>
	else if (__tmp > 255)
    23c0:	fe 01       	movw	r30, r28
    23c2:	ef 5b       	subi	r30, 0xBF	; 191
    23c4:	ff 4f       	sbci	r31, 0xFF	; 255
    23c6:	60 81       	ld	r22, Z
    23c8:	71 81       	ldd	r23, Z+1	; 0x01
    23ca:	82 81       	ldd	r24, Z+2	; 0x02
    23cc:	93 81       	ldd	r25, Z+3	; 0x03
    23ce:	20 e0       	ldi	r18, 0x00	; 0
    23d0:	30 e0       	ldi	r19, 0x00	; 0
    23d2:	4f e7       	ldi	r20, 0x7F	; 127
    23d4:	53 e4       	ldi	r21, 0x43	; 67
    23d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23da:	18 16       	cp	r1, r24
    23dc:	0c f0       	brlt	.+2      	; 0x23e0 <LCD_voidInit+0x214>
    23de:	7e c0       	rjmp	.+252    	; 0x24dc <LCD_voidInit+0x310>
	{
		_delay_ms(__us / 1000.0);
    23e0:	fe 01       	movw	r30, r28
    23e2:	eb 5b       	subi	r30, 0xBB	; 187
    23e4:	ff 4f       	sbci	r31, 0xFF	; 255
    23e6:	60 81       	ld	r22, Z
    23e8:	71 81       	ldd	r23, Z+1	; 0x01
    23ea:	82 81       	ldd	r24, Z+2	; 0x02
    23ec:	93 81       	ldd	r25, Z+3	; 0x03
    23ee:	20 e0       	ldi	r18, 0x00	; 0
    23f0:	30 e0       	ldi	r19, 0x00	; 0
    23f2:	4a e7       	ldi	r20, 0x7A	; 122
    23f4:	54 e4       	ldi	r21, 0x44	; 68
    23f6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    23fa:	dc 01       	movw	r26, r24
    23fc:	cb 01       	movw	r24, r22
    23fe:	8c af       	std	Y+60, r24	; 0x3c
    2400:	9d af       	std	Y+61, r25	; 0x3d
    2402:	ae af       	std	Y+62, r26	; 0x3e
    2404:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2406:	6c ad       	ldd	r22, Y+60	; 0x3c
    2408:	7d ad       	ldd	r23, Y+61	; 0x3d
    240a:	8e ad       	ldd	r24, Y+62	; 0x3e
    240c:	9f ad       	ldd	r25, Y+63	; 0x3f
    240e:	20 e0       	ldi	r18, 0x00	; 0
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	4a ef       	ldi	r20, 0xFA	; 250
    2414:	54 e4       	ldi	r21, 0x44	; 68
    2416:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    241a:	dc 01       	movw	r26, r24
    241c:	cb 01       	movw	r24, r22
    241e:	88 af       	std	Y+56, r24	; 0x38
    2420:	99 af       	std	Y+57, r25	; 0x39
    2422:	aa af       	std	Y+58, r26	; 0x3a
    2424:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2426:	68 ad       	ldd	r22, Y+56	; 0x38
    2428:	79 ad       	ldd	r23, Y+57	; 0x39
    242a:	8a ad       	ldd	r24, Y+58	; 0x3a
    242c:	9b ad       	ldd	r25, Y+59	; 0x3b
    242e:	20 e0       	ldi	r18, 0x00	; 0
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	40 e8       	ldi	r20, 0x80	; 128
    2434:	5f e3       	ldi	r21, 0x3F	; 63
    2436:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    243a:	88 23       	and	r24, r24
    243c:	2c f4       	brge	.+10     	; 0x2448 <LCD_voidInit+0x27c>
		__ticks = 1;
    243e:	81 e0       	ldi	r24, 0x01	; 1
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	9f ab       	std	Y+55, r25	; 0x37
    2444:	8e ab       	std	Y+54, r24	; 0x36
    2446:	3f c0       	rjmp	.+126    	; 0x24c6 <LCD_voidInit+0x2fa>
	else if (__tmp > 65535)
    2448:	68 ad       	ldd	r22, Y+56	; 0x38
    244a:	79 ad       	ldd	r23, Y+57	; 0x39
    244c:	8a ad       	ldd	r24, Y+58	; 0x3a
    244e:	9b ad       	ldd	r25, Y+59	; 0x3b
    2450:	20 e0       	ldi	r18, 0x00	; 0
    2452:	3f ef       	ldi	r19, 0xFF	; 255
    2454:	4f e7       	ldi	r20, 0x7F	; 127
    2456:	57 e4       	ldi	r21, 0x47	; 71
    2458:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    245c:	18 16       	cp	r1, r24
    245e:	4c f5       	brge	.+82     	; 0x24b2 <LCD_voidInit+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2460:	6c ad       	ldd	r22, Y+60	; 0x3c
    2462:	7d ad       	ldd	r23, Y+61	; 0x3d
    2464:	8e ad       	ldd	r24, Y+62	; 0x3e
    2466:	9f ad       	ldd	r25, Y+63	; 0x3f
    2468:	20 e0       	ldi	r18, 0x00	; 0
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	40 e2       	ldi	r20, 0x20	; 32
    246e:	51 e4       	ldi	r21, 0x41	; 65
    2470:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2474:	dc 01       	movw	r26, r24
    2476:	cb 01       	movw	r24, r22
    2478:	bc 01       	movw	r22, r24
    247a:	cd 01       	movw	r24, r26
    247c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2480:	dc 01       	movw	r26, r24
    2482:	cb 01       	movw	r24, r22
    2484:	9f ab       	std	Y+55, r25	; 0x37
    2486:	8e ab       	std	Y+54, r24	; 0x36
    2488:	0f c0       	rjmp	.+30     	; 0x24a8 <LCD_voidInit+0x2dc>
    248a:	88 ec       	ldi	r24, 0xC8	; 200
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	9d ab       	std	Y+53, r25	; 0x35
    2490:	8c ab       	std	Y+52, r24	; 0x34
    2492:	8c a9       	ldd	r24, Y+52	; 0x34
    2494:	9d a9       	ldd	r25, Y+53	; 0x35
    2496:	01 97       	sbiw	r24, 0x01	; 1
    2498:	f1 f7       	brne	.-4      	; 0x2496 <LCD_voidInit+0x2ca>
    249a:	9d ab       	std	Y+53, r25	; 0x35
    249c:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    249e:	8e a9       	ldd	r24, Y+54	; 0x36
    24a0:	9f a9       	ldd	r25, Y+55	; 0x37
    24a2:	01 97       	sbiw	r24, 0x01	; 1
    24a4:	9f ab       	std	Y+55, r25	; 0x37
    24a6:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24a8:	8e a9       	ldd	r24, Y+54	; 0x36
    24aa:	9f a9       	ldd	r25, Y+55	; 0x37
    24ac:	00 97       	sbiw	r24, 0x00	; 0
    24ae:	69 f7       	brne	.-38     	; 0x248a <LCD_voidInit+0x2be>
    24b0:	2d c0       	rjmp	.+90     	; 0x250c <LCD_voidInit+0x340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24b2:	68 ad       	ldd	r22, Y+56	; 0x38
    24b4:	79 ad       	ldd	r23, Y+57	; 0x39
    24b6:	8a ad       	ldd	r24, Y+58	; 0x3a
    24b8:	9b ad       	ldd	r25, Y+59	; 0x3b
    24ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24be:	dc 01       	movw	r26, r24
    24c0:	cb 01       	movw	r24, r22
    24c2:	9f ab       	std	Y+55, r25	; 0x37
    24c4:	8e ab       	std	Y+54, r24	; 0x36
    24c6:	8e a9       	ldd	r24, Y+54	; 0x36
    24c8:	9f a9       	ldd	r25, Y+55	; 0x37
    24ca:	9b ab       	std	Y+51, r25	; 0x33
    24cc:	8a ab       	std	Y+50, r24	; 0x32
    24ce:	8a a9       	ldd	r24, Y+50	; 0x32
    24d0:	9b a9       	ldd	r25, Y+51	; 0x33
    24d2:	01 97       	sbiw	r24, 0x01	; 1
    24d4:	f1 f7       	brne	.-4      	; 0x24d2 <LCD_voidInit+0x306>
    24d6:	9b ab       	std	Y+51, r25	; 0x33
    24d8:	8a ab       	std	Y+50, r24	; 0x32
    24da:	18 c0       	rjmp	.+48     	; 0x250c <LCD_voidInit+0x340>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    24dc:	fe 01       	movw	r30, r28
    24de:	ef 5b       	subi	r30, 0xBF	; 191
    24e0:	ff 4f       	sbci	r31, 0xFF	; 255
    24e2:	60 81       	ld	r22, Z
    24e4:	71 81       	ldd	r23, Z+1	; 0x01
    24e6:	82 81       	ldd	r24, Z+2	; 0x02
    24e8:	93 81       	ldd	r25, Z+3	; 0x03
    24ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ee:	dc 01       	movw	r26, r24
    24f0:	cb 01       	movw	r24, r22
    24f2:	fe 01       	movw	r30, r28
    24f4:	e0 5c       	subi	r30, 0xC0	; 192
    24f6:	ff 4f       	sbci	r31, 0xFF	; 255
    24f8:	80 83       	st	Z, r24
    24fa:	fe 01       	movw	r30, r28
    24fc:	e0 5c       	subi	r30, 0xC0	; 192
    24fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2500:	80 81       	ld	r24, Z
    2502:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2504:	89 a9       	ldd	r24, Y+49	; 0x31
    2506:	8a 95       	dec	r24
    2508:	f1 f7       	brne	.-4      	; 0x2506 <LCD_voidInit+0x33a>
    250a:	89 ab       	std	Y+49, r24	; 0x31
												 B: Controls cursor blinking
													B=0 --> The blink is off
													B=1 --> The blink is on 
												 */
												 
	LCD_voidSendCmnd(0b00001111);			    ///D=1 -- C=0 -- B=0
    250c:	8f e0       	ldi	r24, 0x0F	; 15
    250e:	0e 94 17 14 	call	0x282e	; 0x282e <LCD_voidSendCmnd>
    2512:	80 e0       	ldi	r24, 0x00	; 0
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	a0 e2       	ldi	r26, 0x20	; 32
    2518:	b2 e4       	ldi	r27, 0x42	; 66
    251a:	8d a7       	std	Y+45, r24	; 0x2d
    251c:	9e a7       	std	Y+46, r25	; 0x2e
    251e:	af a7       	std	Y+47, r26	; 0x2f
    2520:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2522:	6d a5       	ldd	r22, Y+45	; 0x2d
    2524:	7e a5       	ldd	r23, Y+46	; 0x2e
    2526:	8f a5       	ldd	r24, Y+47	; 0x2f
    2528:	98 a9       	ldd	r25, Y+48	; 0x30
    252a:	2b ea       	ldi	r18, 0xAB	; 171
    252c:	3a ea       	ldi	r19, 0xAA	; 170
    252e:	4a e2       	ldi	r20, 0x2A	; 42
    2530:	50 e4       	ldi	r21, 0x40	; 64
    2532:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2536:	dc 01       	movw	r26, r24
    2538:	cb 01       	movw	r24, r22
    253a:	89 a7       	std	Y+41, r24	; 0x29
    253c:	9a a7       	std	Y+42, r25	; 0x2a
    253e:	ab a7       	std	Y+43, r26	; 0x2b
    2540:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2542:	69 a5       	ldd	r22, Y+41	; 0x29
    2544:	7a a5       	ldd	r23, Y+42	; 0x2a
    2546:	8b a5       	ldd	r24, Y+43	; 0x2b
    2548:	9c a5       	ldd	r25, Y+44	; 0x2c
    254a:	20 e0       	ldi	r18, 0x00	; 0
    254c:	30 e0       	ldi	r19, 0x00	; 0
    254e:	40 e8       	ldi	r20, 0x80	; 128
    2550:	5f e3       	ldi	r21, 0x3F	; 63
    2552:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2556:	88 23       	and	r24, r24
    2558:	1c f4       	brge	.+6      	; 0x2560 <LCD_voidInit+0x394>
		__ticks = 1;
    255a:	81 e0       	ldi	r24, 0x01	; 1
    255c:	88 a7       	std	Y+40, r24	; 0x28
    255e:	91 c0       	rjmp	.+290    	; 0x2682 <LCD_voidInit+0x4b6>
	else if (__tmp > 255)
    2560:	69 a5       	ldd	r22, Y+41	; 0x29
    2562:	7a a5       	ldd	r23, Y+42	; 0x2a
    2564:	8b a5       	ldd	r24, Y+43	; 0x2b
    2566:	9c a5       	ldd	r25, Y+44	; 0x2c
    2568:	20 e0       	ldi	r18, 0x00	; 0
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	4f e7       	ldi	r20, 0x7F	; 127
    256e:	53 e4       	ldi	r21, 0x43	; 67
    2570:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2574:	18 16       	cp	r1, r24
    2576:	0c f0       	brlt	.+2      	; 0x257a <LCD_voidInit+0x3ae>
    2578:	7b c0       	rjmp	.+246    	; 0x2670 <LCD_voidInit+0x4a4>
	{
		_delay_ms(__us / 1000.0);
    257a:	6d a5       	ldd	r22, Y+45	; 0x2d
    257c:	7e a5       	ldd	r23, Y+46	; 0x2e
    257e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2580:	98 a9       	ldd	r25, Y+48	; 0x30
    2582:	20 e0       	ldi	r18, 0x00	; 0
    2584:	30 e0       	ldi	r19, 0x00	; 0
    2586:	4a e7       	ldi	r20, 0x7A	; 122
    2588:	54 e4       	ldi	r21, 0x44	; 68
    258a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    258e:	dc 01       	movw	r26, r24
    2590:	cb 01       	movw	r24, r22
    2592:	8c a3       	std	Y+36, r24	; 0x24
    2594:	9d a3       	std	Y+37, r25	; 0x25
    2596:	ae a3       	std	Y+38, r26	; 0x26
    2598:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    259a:	6c a1       	ldd	r22, Y+36	; 0x24
    259c:	7d a1       	ldd	r23, Y+37	; 0x25
    259e:	8e a1       	ldd	r24, Y+38	; 0x26
    25a0:	9f a1       	ldd	r25, Y+39	; 0x27
    25a2:	20 e0       	ldi	r18, 0x00	; 0
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	4a ef       	ldi	r20, 0xFA	; 250
    25a8:	54 e4       	ldi	r21, 0x44	; 68
    25aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ae:	dc 01       	movw	r26, r24
    25b0:	cb 01       	movw	r24, r22
    25b2:	88 a3       	std	Y+32, r24	; 0x20
    25b4:	99 a3       	std	Y+33, r25	; 0x21
    25b6:	aa a3       	std	Y+34, r26	; 0x22
    25b8:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    25ba:	68 a1       	ldd	r22, Y+32	; 0x20
    25bc:	79 a1       	ldd	r23, Y+33	; 0x21
    25be:	8a a1       	ldd	r24, Y+34	; 0x22
    25c0:	9b a1       	ldd	r25, Y+35	; 0x23
    25c2:	20 e0       	ldi	r18, 0x00	; 0
    25c4:	30 e0       	ldi	r19, 0x00	; 0
    25c6:	40 e8       	ldi	r20, 0x80	; 128
    25c8:	5f e3       	ldi	r21, 0x3F	; 63
    25ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25ce:	88 23       	and	r24, r24
    25d0:	2c f4       	brge	.+10     	; 0x25dc <LCD_voidInit+0x410>
		__ticks = 1;
    25d2:	81 e0       	ldi	r24, 0x01	; 1
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	9f 8f       	std	Y+31, r25	; 0x1f
    25d8:	8e 8f       	std	Y+30, r24	; 0x1e
    25da:	3f c0       	rjmp	.+126    	; 0x265a <LCD_voidInit+0x48e>
	else if (__tmp > 65535)
    25dc:	68 a1       	ldd	r22, Y+32	; 0x20
    25de:	79 a1       	ldd	r23, Y+33	; 0x21
    25e0:	8a a1       	ldd	r24, Y+34	; 0x22
    25e2:	9b a1       	ldd	r25, Y+35	; 0x23
    25e4:	20 e0       	ldi	r18, 0x00	; 0
    25e6:	3f ef       	ldi	r19, 0xFF	; 255
    25e8:	4f e7       	ldi	r20, 0x7F	; 127
    25ea:	57 e4       	ldi	r21, 0x47	; 71
    25ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25f0:	18 16       	cp	r1, r24
    25f2:	4c f5       	brge	.+82     	; 0x2646 <LCD_voidInit+0x47a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25f4:	6c a1       	ldd	r22, Y+36	; 0x24
    25f6:	7d a1       	ldd	r23, Y+37	; 0x25
    25f8:	8e a1       	ldd	r24, Y+38	; 0x26
    25fa:	9f a1       	ldd	r25, Y+39	; 0x27
    25fc:	20 e0       	ldi	r18, 0x00	; 0
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	40 e2       	ldi	r20, 0x20	; 32
    2602:	51 e4       	ldi	r21, 0x41	; 65
    2604:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2608:	dc 01       	movw	r26, r24
    260a:	cb 01       	movw	r24, r22
    260c:	bc 01       	movw	r22, r24
    260e:	cd 01       	movw	r24, r26
    2610:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2614:	dc 01       	movw	r26, r24
    2616:	cb 01       	movw	r24, r22
    2618:	9f 8f       	std	Y+31, r25	; 0x1f
    261a:	8e 8f       	std	Y+30, r24	; 0x1e
    261c:	0f c0       	rjmp	.+30     	; 0x263c <LCD_voidInit+0x470>
    261e:	88 ec       	ldi	r24, 0xC8	; 200
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	9d 8f       	std	Y+29, r25	; 0x1d
    2624:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2626:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2628:	9d 8d       	ldd	r25, Y+29	; 0x1d
    262a:	01 97       	sbiw	r24, 0x01	; 1
    262c:	f1 f7       	brne	.-4      	; 0x262a <LCD_voidInit+0x45e>
    262e:	9d 8f       	std	Y+29, r25	; 0x1d
    2630:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2632:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2634:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2636:	01 97       	sbiw	r24, 0x01	; 1
    2638:	9f 8f       	std	Y+31, r25	; 0x1f
    263a:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    263c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    263e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2640:	00 97       	sbiw	r24, 0x00	; 0
    2642:	69 f7       	brne	.-38     	; 0x261e <LCD_voidInit+0x452>
    2644:	24 c0       	rjmp	.+72     	; 0x268e <LCD_voidInit+0x4c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2646:	68 a1       	ldd	r22, Y+32	; 0x20
    2648:	79 a1       	ldd	r23, Y+33	; 0x21
    264a:	8a a1       	ldd	r24, Y+34	; 0x22
    264c:	9b a1       	ldd	r25, Y+35	; 0x23
    264e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2652:	dc 01       	movw	r26, r24
    2654:	cb 01       	movw	r24, r22
    2656:	9f 8f       	std	Y+31, r25	; 0x1f
    2658:	8e 8f       	std	Y+30, r24	; 0x1e
    265a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    265c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    265e:	9b 8f       	std	Y+27, r25	; 0x1b
    2660:	8a 8f       	std	Y+26, r24	; 0x1a
    2662:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2664:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2666:	01 97       	sbiw	r24, 0x01	; 1
    2668:	f1 f7       	brne	.-4      	; 0x2666 <LCD_voidInit+0x49a>
    266a:	9b 8f       	std	Y+27, r25	; 0x1b
    266c:	8a 8f       	std	Y+26, r24	; 0x1a
    266e:	0f c0       	rjmp	.+30     	; 0x268e <LCD_voidInit+0x4c2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2670:	69 a5       	ldd	r22, Y+41	; 0x29
    2672:	7a a5       	ldd	r23, Y+42	; 0x2a
    2674:	8b a5       	ldd	r24, Y+43	; 0x2b
    2676:	9c a5       	ldd	r25, Y+44	; 0x2c
    2678:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    267c:	dc 01       	movw	r26, r24
    267e:	cb 01       	movw	r24, r22
    2680:	88 a7       	std	Y+40, r24	; 0x28
    2682:	88 a5       	ldd	r24, Y+40	; 0x28
    2684:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2686:	89 8d       	ldd	r24, Y+25	; 0x19
    2688:	8a 95       	dec	r24
    268a:	f1 f7       	brne	.-4      	; 0x2688 <LCD_voidInit+0x4bc>
    268c:	89 8f       	std	Y+25, r24	; 0x19
	//Wait more than 39us
	_delay_us(40);
	
	
	/*Display clear 0b00000001		    -->Used to clear any thing on the display*/
	LCD_voidSendCmnd(0b00000001);
    268e:	81 e0       	ldi	r24, 0x01	; 1
    2690:	0e 94 17 14 	call	0x282e	; 0x282e <LCD_voidSendCmnd>
    2694:	80 e0       	ldi	r24, 0x00	; 0
    2696:	90 ee       	ldi	r25, 0xE0	; 224
    2698:	af eb       	ldi	r26, 0xBF	; 191
    269a:	b4 e4       	ldi	r27, 0x44	; 68
    269c:	8d 8b       	std	Y+21, r24	; 0x15
    269e:	9e 8b       	std	Y+22, r25	; 0x16
    26a0:	af 8b       	std	Y+23, r26	; 0x17
    26a2:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    26a4:	6d 89       	ldd	r22, Y+21	; 0x15
    26a6:	7e 89       	ldd	r23, Y+22	; 0x16
    26a8:	8f 89       	ldd	r24, Y+23	; 0x17
    26aa:	98 8d       	ldd	r25, Y+24	; 0x18
    26ac:	2b ea       	ldi	r18, 0xAB	; 171
    26ae:	3a ea       	ldi	r19, 0xAA	; 170
    26b0:	4a e2       	ldi	r20, 0x2A	; 42
    26b2:	50 e4       	ldi	r21, 0x40	; 64
    26b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b8:	dc 01       	movw	r26, r24
    26ba:	cb 01       	movw	r24, r22
    26bc:	89 8b       	std	Y+17, r24	; 0x11
    26be:	9a 8b       	std	Y+18, r25	; 0x12
    26c0:	ab 8b       	std	Y+19, r26	; 0x13
    26c2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    26c4:	69 89       	ldd	r22, Y+17	; 0x11
    26c6:	7a 89       	ldd	r23, Y+18	; 0x12
    26c8:	8b 89       	ldd	r24, Y+19	; 0x13
    26ca:	9c 89       	ldd	r25, Y+20	; 0x14
    26cc:	20 e0       	ldi	r18, 0x00	; 0
    26ce:	30 e0       	ldi	r19, 0x00	; 0
    26d0:	40 e8       	ldi	r20, 0x80	; 128
    26d2:	5f e3       	ldi	r21, 0x3F	; 63
    26d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26d8:	88 23       	and	r24, r24
    26da:	1c f4       	brge	.+6      	; 0x26e2 <LCD_voidInit+0x516>
		__ticks = 1;
    26dc:	81 e0       	ldi	r24, 0x01	; 1
    26de:	88 8b       	std	Y+16, r24	; 0x10
    26e0:	91 c0       	rjmp	.+290    	; 0x2804 <LCD_voidInit+0x638>
	else if (__tmp > 255)
    26e2:	69 89       	ldd	r22, Y+17	; 0x11
    26e4:	7a 89       	ldd	r23, Y+18	; 0x12
    26e6:	8b 89       	ldd	r24, Y+19	; 0x13
    26e8:	9c 89       	ldd	r25, Y+20	; 0x14
    26ea:	20 e0       	ldi	r18, 0x00	; 0
    26ec:	30 e0       	ldi	r19, 0x00	; 0
    26ee:	4f e7       	ldi	r20, 0x7F	; 127
    26f0:	53 e4       	ldi	r21, 0x43	; 67
    26f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26f6:	18 16       	cp	r1, r24
    26f8:	0c f0       	brlt	.+2      	; 0x26fc <LCD_voidInit+0x530>
    26fa:	7b c0       	rjmp	.+246    	; 0x27f2 <LCD_voidInit+0x626>
	{
		_delay_ms(__us / 1000.0);
    26fc:	6d 89       	ldd	r22, Y+21	; 0x15
    26fe:	7e 89       	ldd	r23, Y+22	; 0x16
    2700:	8f 89       	ldd	r24, Y+23	; 0x17
    2702:	98 8d       	ldd	r25, Y+24	; 0x18
    2704:	20 e0       	ldi	r18, 0x00	; 0
    2706:	30 e0       	ldi	r19, 0x00	; 0
    2708:	4a e7       	ldi	r20, 0x7A	; 122
    270a:	54 e4       	ldi	r21, 0x44	; 68
    270c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2710:	dc 01       	movw	r26, r24
    2712:	cb 01       	movw	r24, r22
    2714:	8c 87       	std	Y+12, r24	; 0x0c
    2716:	9d 87       	std	Y+13, r25	; 0x0d
    2718:	ae 87       	std	Y+14, r26	; 0x0e
    271a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    271c:	6c 85       	ldd	r22, Y+12	; 0x0c
    271e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2720:	8e 85       	ldd	r24, Y+14	; 0x0e
    2722:	9f 85       	ldd	r25, Y+15	; 0x0f
    2724:	20 e0       	ldi	r18, 0x00	; 0
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	4a ef       	ldi	r20, 0xFA	; 250
    272a:	54 e4       	ldi	r21, 0x44	; 68
    272c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2730:	dc 01       	movw	r26, r24
    2732:	cb 01       	movw	r24, r22
    2734:	88 87       	std	Y+8, r24	; 0x08
    2736:	99 87       	std	Y+9, r25	; 0x09
    2738:	aa 87       	std	Y+10, r26	; 0x0a
    273a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    273c:	68 85       	ldd	r22, Y+8	; 0x08
    273e:	79 85       	ldd	r23, Y+9	; 0x09
    2740:	8a 85       	ldd	r24, Y+10	; 0x0a
    2742:	9b 85       	ldd	r25, Y+11	; 0x0b
    2744:	20 e0       	ldi	r18, 0x00	; 0
    2746:	30 e0       	ldi	r19, 0x00	; 0
    2748:	40 e8       	ldi	r20, 0x80	; 128
    274a:	5f e3       	ldi	r21, 0x3F	; 63
    274c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2750:	88 23       	and	r24, r24
    2752:	2c f4       	brge	.+10     	; 0x275e <LCD_voidInit+0x592>
		__ticks = 1;
    2754:	81 e0       	ldi	r24, 0x01	; 1
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	9f 83       	std	Y+7, r25	; 0x07
    275a:	8e 83       	std	Y+6, r24	; 0x06
    275c:	3f c0       	rjmp	.+126    	; 0x27dc <LCD_voidInit+0x610>
	else if (__tmp > 65535)
    275e:	68 85       	ldd	r22, Y+8	; 0x08
    2760:	79 85       	ldd	r23, Y+9	; 0x09
    2762:	8a 85       	ldd	r24, Y+10	; 0x0a
    2764:	9b 85       	ldd	r25, Y+11	; 0x0b
    2766:	20 e0       	ldi	r18, 0x00	; 0
    2768:	3f ef       	ldi	r19, 0xFF	; 255
    276a:	4f e7       	ldi	r20, 0x7F	; 127
    276c:	57 e4       	ldi	r21, 0x47	; 71
    276e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2772:	18 16       	cp	r1, r24
    2774:	4c f5       	brge	.+82     	; 0x27c8 <LCD_voidInit+0x5fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2776:	6c 85       	ldd	r22, Y+12	; 0x0c
    2778:	7d 85       	ldd	r23, Y+13	; 0x0d
    277a:	8e 85       	ldd	r24, Y+14	; 0x0e
    277c:	9f 85       	ldd	r25, Y+15	; 0x0f
    277e:	20 e0       	ldi	r18, 0x00	; 0
    2780:	30 e0       	ldi	r19, 0x00	; 0
    2782:	40 e2       	ldi	r20, 0x20	; 32
    2784:	51 e4       	ldi	r21, 0x41	; 65
    2786:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    278a:	dc 01       	movw	r26, r24
    278c:	cb 01       	movw	r24, r22
    278e:	bc 01       	movw	r22, r24
    2790:	cd 01       	movw	r24, r26
    2792:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2796:	dc 01       	movw	r26, r24
    2798:	cb 01       	movw	r24, r22
    279a:	9f 83       	std	Y+7, r25	; 0x07
    279c:	8e 83       	std	Y+6, r24	; 0x06
    279e:	0f c0       	rjmp	.+30     	; 0x27be <LCD_voidInit+0x5f2>
    27a0:	88 ec       	ldi	r24, 0xC8	; 200
    27a2:	90 e0       	ldi	r25, 0x00	; 0
    27a4:	9d 83       	std	Y+5, r25	; 0x05
    27a6:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    27a8:	8c 81       	ldd	r24, Y+4	; 0x04
    27aa:	9d 81       	ldd	r25, Y+5	; 0x05
    27ac:	01 97       	sbiw	r24, 0x01	; 1
    27ae:	f1 f7       	brne	.-4      	; 0x27ac <LCD_voidInit+0x5e0>
    27b0:	9d 83       	std	Y+5, r25	; 0x05
    27b2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27b4:	8e 81       	ldd	r24, Y+6	; 0x06
    27b6:	9f 81       	ldd	r25, Y+7	; 0x07
    27b8:	01 97       	sbiw	r24, 0x01	; 1
    27ba:	9f 83       	std	Y+7, r25	; 0x07
    27bc:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27be:	8e 81       	ldd	r24, Y+6	; 0x06
    27c0:	9f 81       	ldd	r25, Y+7	; 0x07
    27c2:	00 97       	sbiw	r24, 0x00	; 0
    27c4:	69 f7       	brne	.-38     	; 0x27a0 <LCD_voidInit+0x5d4>
    27c6:	24 c0       	rjmp	.+72     	; 0x2810 <LCD_voidInit+0x644>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27c8:	68 85       	ldd	r22, Y+8	; 0x08
    27ca:	79 85       	ldd	r23, Y+9	; 0x09
    27cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    27ce:	9b 85       	ldd	r25, Y+11	; 0x0b
    27d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d4:	dc 01       	movw	r26, r24
    27d6:	cb 01       	movw	r24, r22
    27d8:	9f 83       	std	Y+7, r25	; 0x07
    27da:	8e 83       	std	Y+6, r24	; 0x06
    27dc:	8e 81       	ldd	r24, Y+6	; 0x06
    27de:	9f 81       	ldd	r25, Y+7	; 0x07
    27e0:	9b 83       	std	Y+3, r25	; 0x03
    27e2:	8a 83       	std	Y+2, r24	; 0x02
    27e4:	8a 81       	ldd	r24, Y+2	; 0x02
    27e6:	9b 81       	ldd	r25, Y+3	; 0x03
    27e8:	01 97       	sbiw	r24, 0x01	; 1
    27ea:	f1 f7       	brne	.-4      	; 0x27e8 <LCD_voidInit+0x61c>
    27ec:	9b 83       	std	Y+3, r25	; 0x03
    27ee:	8a 83       	std	Y+2, r24	; 0x02
    27f0:	0f c0       	rjmp	.+30     	; 0x2810 <LCD_voidInit+0x644>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    27f2:	69 89       	ldd	r22, Y+17	; 0x11
    27f4:	7a 89       	ldd	r23, Y+18	; 0x12
    27f6:	8b 89       	ldd	r24, Y+19	; 0x13
    27f8:	9c 89       	ldd	r25, Y+20	; 0x14
    27fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27fe:	dc 01       	movw	r26, r24
    2800:	cb 01       	movw	r24, r22
    2802:	88 8b       	std	Y+16, r24	; 0x10
    2804:	88 89       	ldd	r24, Y+16	; 0x10
    2806:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2808:	89 81       	ldd	r24, Y+1	; 0x01
    280a:	8a 95       	dec	r24
    280c:	f1 f7       	brne	.-4      	; 0x280a <LCD_voidInit+0x63e>
    280e:	89 83       	std	Y+1, r24	; 0x01
												 S  : Shifts the entire display
													  S=1 	--> Shifts the desplay (To left --> if I/D = 1 (moves to right) // To right --> if I/D = 0 (moves to left))
													  S=0   --> Display does not shift
													  */
													  
	LCD_voidSendCmnd(0b00000110);			    ///I/D=1 -- S=0
    2810:	86 e0       	ldi	r24, 0x06	; 6
    2812:	0e 94 17 14 	call	0x282e	; 0x282e <LCD_voidSendCmnd>
}
    2816:	ca 5a       	subi	r28, 0xAA	; 170
    2818:	df 4f       	sbci	r29, 0xFF	; 255
    281a:	0f b6       	in	r0, 0x3f	; 63
    281c:	f8 94       	cli
    281e:	de bf       	out	0x3e, r29	; 62
    2820:	0f be       	out	0x3f, r0	; 63
    2822:	cd bf       	out	0x3d, r28	; 61
    2824:	cf 91       	pop	r28
    2826:	df 91       	pop	r29
    2828:	1f 91       	pop	r17
    282a:	0f 91       	pop	r16
    282c:	08 95       	ret

0000282e <LCD_voidSendCmnd>:

/*************************************************************************************/

void LCD_voidSendCmnd(u8 Copy_u8Cmnd)
/**Function used to send command to the LCD**/
{
    282e:	df 93       	push	r29
    2830:	cf 93       	push	r28
    2832:	cd b7       	in	r28, 0x3d	; 61
    2834:	de b7       	in	r29, 0x3e	; 62
    2836:	69 97       	sbiw	r28, 0x19	; 25
    2838:	0f b6       	in	r0, 0x3f	; 63
    283a:	f8 94       	cli
    283c:	de bf       	out	0x3e, r29	; 62
    283e:	0f be       	out	0x3f, r0	; 63
    2840:	cd bf       	out	0x3d, r28	; 61
    2842:	89 8f       	std	Y+25, r24	; 0x19
	/*RS = 0*/
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT , LCD_u8_RS_PIN , DIO_u8_LOW);			//Depending on which port and which pin we used for RS pin, we set the values of PORT & PIN in config file
    2844:	83 e0       	ldi	r24, 0x03	; 3
    2846:	67 e0       	ldi	r22, 0x07	; 7
    2848:	40 e0       	ldi	r20, 0x00	; 0
    284a:	0e 94 a6 09 	call	0x134c	; 0x134c <DIO_u8SetPinValue>
	
	/*R/W = 0*/
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT , LCD_u8_RW_PIN , DIO_u8_LOW);			//Depending on which port and which pin we used for R/W pin, we set the values of PORT & PIN in config file
    284e:	83 e0       	ldi	r24, 0x03	; 3
    2850:	66 e0       	ldi	r22, 0x06	; 6
    2852:	40 e0       	ldi	r20, 0x00	; 0
    2854:	0e 94 a6 09 	call	0x134c	; 0x134c <DIO_u8SetPinValue>
	
	/*Write cmnd*/
	DIO_u8SetPortValue(LCD_u8_DATA_PORT , Copy_u8Cmnd);								//Depending on which port we used for pins D0 - D7, we set the values of PORT in config file
    2858:	82 e0       	ldi	r24, 0x02	; 2
    285a:	69 8d       	ldd	r22, Y+25	; 0x19
    285c:	0e 94 07 0c 	call	0x180e	; 0x180e <DIO_u8SetPortValue>
	
	/*E = 1*/
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT , LCD_u8_E_PIN , DIO_u8_HIGH);			//Depending on which port and which pin we used for E pin, we set the values of PORT & PIN in config file
    2860:	83 e0       	ldi	r24, 0x03	; 3
    2862:	65 e0       	ldi	r22, 0x05	; 5
    2864:	41 e0       	ldi	r20, 0x01	; 1
    2866:	0e 94 a6 09 	call	0x134c	; 0x134c <DIO_u8SetPinValue>
    286a:	80 e0       	ldi	r24, 0x00	; 0
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	a0 e8       	ldi	r26, 0x80	; 128
    2870:	bf e3       	ldi	r27, 0x3F	; 63
    2872:	8d 8b       	std	Y+21, r24	; 0x15
    2874:	9e 8b       	std	Y+22, r25	; 0x16
    2876:	af 8b       	std	Y+23, r26	; 0x17
    2878:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    287a:	6d 89       	ldd	r22, Y+21	; 0x15
    287c:	7e 89       	ldd	r23, Y+22	; 0x16
    287e:	8f 89       	ldd	r24, Y+23	; 0x17
    2880:	98 8d       	ldd	r25, Y+24	; 0x18
    2882:	2b ea       	ldi	r18, 0xAB	; 171
    2884:	3a ea       	ldi	r19, 0xAA	; 170
    2886:	4a e2       	ldi	r20, 0x2A	; 42
    2888:	50 e4       	ldi	r21, 0x40	; 64
    288a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    288e:	dc 01       	movw	r26, r24
    2890:	cb 01       	movw	r24, r22
    2892:	89 8b       	std	Y+17, r24	; 0x11
    2894:	9a 8b       	std	Y+18, r25	; 0x12
    2896:	ab 8b       	std	Y+19, r26	; 0x13
    2898:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    289a:	69 89       	ldd	r22, Y+17	; 0x11
    289c:	7a 89       	ldd	r23, Y+18	; 0x12
    289e:	8b 89       	ldd	r24, Y+19	; 0x13
    28a0:	9c 89       	ldd	r25, Y+20	; 0x14
    28a2:	20 e0       	ldi	r18, 0x00	; 0
    28a4:	30 e0       	ldi	r19, 0x00	; 0
    28a6:	40 e8       	ldi	r20, 0x80	; 128
    28a8:	5f e3       	ldi	r21, 0x3F	; 63
    28aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28ae:	88 23       	and	r24, r24
    28b0:	1c f4       	brge	.+6      	; 0x28b8 <LCD_voidSendCmnd+0x8a>
		__ticks = 1;
    28b2:	81 e0       	ldi	r24, 0x01	; 1
    28b4:	88 8b       	std	Y+16, r24	; 0x10
    28b6:	91 c0       	rjmp	.+290    	; 0x29da <LCD_voidSendCmnd+0x1ac>
	else if (__tmp > 255)
    28b8:	69 89       	ldd	r22, Y+17	; 0x11
    28ba:	7a 89       	ldd	r23, Y+18	; 0x12
    28bc:	8b 89       	ldd	r24, Y+19	; 0x13
    28be:	9c 89       	ldd	r25, Y+20	; 0x14
    28c0:	20 e0       	ldi	r18, 0x00	; 0
    28c2:	30 e0       	ldi	r19, 0x00	; 0
    28c4:	4f e7       	ldi	r20, 0x7F	; 127
    28c6:	53 e4       	ldi	r21, 0x43	; 67
    28c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28cc:	18 16       	cp	r1, r24
    28ce:	0c f0       	brlt	.+2      	; 0x28d2 <LCD_voidSendCmnd+0xa4>
    28d0:	7b c0       	rjmp	.+246    	; 0x29c8 <LCD_voidSendCmnd+0x19a>
	{
		_delay_ms(__us / 1000.0);
    28d2:	6d 89       	ldd	r22, Y+21	; 0x15
    28d4:	7e 89       	ldd	r23, Y+22	; 0x16
    28d6:	8f 89       	ldd	r24, Y+23	; 0x17
    28d8:	98 8d       	ldd	r25, Y+24	; 0x18
    28da:	20 e0       	ldi	r18, 0x00	; 0
    28dc:	30 e0       	ldi	r19, 0x00	; 0
    28de:	4a e7       	ldi	r20, 0x7A	; 122
    28e0:	54 e4       	ldi	r21, 0x44	; 68
    28e2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    28e6:	dc 01       	movw	r26, r24
    28e8:	cb 01       	movw	r24, r22
    28ea:	8c 87       	std	Y+12, r24	; 0x0c
    28ec:	9d 87       	std	Y+13, r25	; 0x0d
    28ee:	ae 87       	std	Y+14, r26	; 0x0e
    28f0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28f2:	6c 85       	ldd	r22, Y+12	; 0x0c
    28f4:	7d 85       	ldd	r23, Y+13	; 0x0d
    28f6:	8e 85       	ldd	r24, Y+14	; 0x0e
    28f8:	9f 85       	ldd	r25, Y+15	; 0x0f
    28fa:	20 e0       	ldi	r18, 0x00	; 0
    28fc:	30 e0       	ldi	r19, 0x00	; 0
    28fe:	4a ef       	ldi	r20, 0xFA	; 250
    2900:	54 e4       	ldi	r21, 0x44	; 68
    2902:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2906:	dc 01       	movw	r26, r24
    2908:	cb 01       	movw	r24, r22
    290a:	88 87       	std	Y+8, r24	; 0x08
    290c:	99 87       	std	Y+9, r25	; 0x09
    290e:	aa 87       	std	Y+10, r26	; 0x0a
    2910:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2912:	68 85       	ldd	r22, Y+8	; 0x08
    2914:	79 85       	ldd	r23, Y+9	; 0x09
    2916:	8a 85       	ldd	r24, Y+10	; 0x0a
    2918:	9b 85       	ldd	r25, Y+11	; 0x0b
    291a:	20 e0       	ldi	r18, 0x00	; 0
    291c:	30 e0       	ldi	r19, 0x00	; 0
    291e:	40 e8       	ldi	r20, 0x80	; 128
    2920:	5f e3       	ldi	r21, 0x3F	; 63
    2922:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2926:	88 23       	and	r24, r24
    2928:	2c f4       	brge	.+10     	; 0x2934 <LCD_voidSendCmnd+0x106>
		__ticks = 1;
    292a:	81 e0       	ldi	r24, 0x01	; 1
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	9f 83       	std	Y+7, r25	; 0x07
    2930:	8e 83       	std	Y+6, r24	; 0x06
    2932:	3f c0       	rjmp	.+126    	; 0x29b2 <LCD_voidSendCmnd+0x184>
	else if (__tmp > 65535)
    2934:	68 85       	ldd	r22, Y+8	; 0x08
    2936:	79 85       	ldd	r23, Y+9	; 0x09
    2938:	8a 85       	ldd	r24, Y+10	; 0x0a
    293a:	9b 85       	ldd	r25, Y+11	; 0x0b
    293c:	20 e0       	ldi	r18, 0x00	; 0
    293e:	3f ef       	ldi	r19, 0xFF	; 255
    2940:	4f e7       	ldi	r20, 0x7F	; 127
    2942:	57 e4       	ldi	r21, 0x47	; 71
    2944:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2948:	18 16       	cp	r1, r24
    294a:	4c f5       	brge	.+82     	; 0x299e <LCD_voidSendCmnd+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    294c:	6c 85       	ldd	r22, Y+12	; 0x0c
    294e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2950:	8e 85       	ldd	r24, Y+14	; 0x0e
    2952:	9f 85       	ldd	r25, Y+15	; 0x0f
    2954:	20 e0       	ldi	r18, 0x00	; 0
    2956:	30 e0       	ldi	r19, 0x00	; 0
    2958:	40 e2       	ldi	r20, 0x20	; 32
    295a:	51 e4       	ldi	r21, 0x41	; 65
    295c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2960:	dc 01       	movw	r26, r24
    2962:	cb 01       	movw	r24, r22
    2964:	bc 01       	movw	r22, r24
    2966:	cd 01       	movw	r24, r26
    2968:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    296c:	dc 01       	movw	r26, r24
    296e:	cb 01       	movw	r24, r22
    2970:	9f 83       	std	Y+7, r25	; 0x07
    2972:	8e 83       	std	Y+6, r24	; 0x06
    2974:	0f c0       	rjmp	.+30     	; 0x2994 <LCD_voidSendCmnd+0x166>
    2976:	88 ec       	ldi	r24, 0xC8	; 200
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	9d 83       	std	Y+5, r25	; 0x05
    297c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    297e:	8c 81       	ldd	r24, Y+4	; 0x04
    2980:	9d 81       	ldd	r25, Y+5	; 0x05
    2982:	01 97       	sbiw	r24, 0x01	; 1
    2984:	f1 f7       	brne	.-4      	; 0x2982 <LCD_voidSendCmnd+0x154>
    2986:	9d 83       	std	Y+5, r25	; 0x05
    2988:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    298a:	8e 81       	ldd	r24, Y+6	; 0x06
    298c:	9f 81       	ldd	r25, Y+7	; 0x07
    298e:	01 97       	sbiw	r24, 0x01	; 1
    2990:	9f 83       	std	Y+7, r25	; 0x07
    2992:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2994:	8e 81       	ldd	r24, Y+6	; 0x06
    2996:	9f 81       	ldd	r25, Y+7	; 0x07
    2998:	00 97       	sbiw	r24, 0x00	; 0
    299a:	69 f7       	brne	.-38     	; 0x2976 <LCD_voidSendCmnd+0x148>
    299c:	24 c0       	rjmp	.+72     	; 0x29e6 <LCD_voidSendCmnd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    299e:	68 85       	ldd	r22, Y+8	; 0x08
    29a0:	79 85       	ldd	r23, Y+9	; 0x09
    29a2:	8a 85       	ldd	r24, Y+10	; 0x0a
    29a4:	9b 85       	ldd	r25, Y+11	; 0x0b
    29a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29aa:	dc 01       	movw	r26, r24
    29ac:	cb 01       	movw	r24, r22
    29ae:	9f 83       	std	Y+7, r25	; 0x07
    29b0:	8e 83       	std	Y+6, r24	; 0x06
    29b2:	8e 81       	ldd	r24, Y+6	; 0x06
    29b4:	9f 81       	ldd	r25, Y+7	; 0x07
    29b6:	9b 83       	std	Y+3, r25	; 0x03
    29b8:	8a 83       	std	Y+2, r24	; 0x02
    29ba:	8a 81       	ldd	r24, Y+2	; 0x02
    29bc:	9b 81       	ldd	r25, Y+3	; 0x03
    29be:	01 97       	sbiw	r24, 0x01	; 1
    29c0:	f1 f7       	brne	.-4      	; 0x29be <LCD_voidSendCmnd+0x190>
    29c2:	9b 83       	std	Y+3, r25	; 0x03
    29c4:	8a 83       	std	Y+2, r24	; 0x02
    29c6:	0f c0       	rjmp	.+30     	; 0x29e6 <LCD_voidSendCmnd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    29c8:	69 89       	ldd	r22, Y+17	; 0x11
    29ca:	7a 89       	ldd	r23, Y+18	; 0x12
    29cc:	8b 89       	ldd	r24, Y+19	; 0x13
    29ce:	9c 89       	ldd	r25, Y+20	; 0x14
    29d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d4:	dc 01       	movw	r26, r24
    29d6:	cb 01       	movw	r24, r22
    29d8:	88 8b       	std	Y+16, r24	; 0x10
    29da:	88 89       	ldd	r24, Y+16	; 0x10
    29dc:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    29de:	89 81       	ldd	r24, Y+1	; 0x01
    29e0:	8a 95       	dec	r24
    29e2:	f1 f7       	brne	.-4      	; 0x29e0 <LCD_voidSendCmnd+0x1b2>
    29e4:	89 83       	std	Y+1, r24	; 0x01
	
	_delay_us(1);		///From LCD data sheet, E pulse width tw --> min = 230ns -->we can't use 0.23us(no fractions)
	
	/*E = 0*/
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT , LCD_u8_E_PIN , DIO_u8_LOW);				//Depending on which port and which pin we used for E pin, we set the values of PORT & PIN in config file
    29e6:	83 e0       	ldi	r24, 0x03	; 3
    29e8:	65 e0       	ldi	r22, 0x05	; 5
    29ea:	40 e0       	ldi	r20, 0x00	; 0
    29ec:	0e 94 a6 09 	call	0x134c	; 0x134c <DIO_u8SetPinValue>
}
    29f0:	69 96       	adiw	r28, 0x19	; 25
    29f2:	0f b6       	in	r0, 0x3f	; 63
    29f4:	f8 94       	cli
    29f6:	de bf       	out	0x3e, r29	; 62
    29f8:	0f be       	out	0x3f, r0	; 63
    29fa:	cd bf       	out	0x3d, r28	; 61
    29fc:	cf 91       	pop	r28
    29fe:	df 91       	pop	r29
    2a00:	08 95       	ret

00002a02 <LCD_voidSendChar>:

/*************************************************************************************/

void LCD_voidSendChar(u8 Copy_u8Char)
/**Function used to send char to the LCD**/
{
    2a02:	df 93       	push	r29
    2a04:	cf 93       	push	r28
    2a06:	cd b7       	in	r28, 0x3d	; 61
    2a08:	de b7       	in	r29, 0x3e	; 62
    2a0a:	69 97       	sbiw	r28, 0x19	; 25
    2a0c:	0f b6       	in	r0, 0x3f	; 63
    2a0e:	f8 94       	cli
    2a10:	de bf       	out	0x3e, r29	; 62
    2a12:	0f be       	out	0x3f, r0	; 63
    2a14:	cd bf       	out	0x3d, r28	; 61
    2a16:	89 8f       	std	Y+25, r24	; 0x19
	/*RS = 1*/
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT , LCD_u8_RS_PIN , DIO_u8_HIGH);		    //Depending on which port and which pin we used for RS pin, we set the values of PORT & PIN in config file
    2a18:	83 e0       	ldi	r24, 0x03	; 3
    2a1a:	67 e0       	ldi	r22, 0x07	; 7
    2a1c:	41 e0       	ldi	r20, 0x01	; 1
    2a1e:	0e 94 a6 09 	call	0x134c	; 0x134c <DIO_u8SetPinValue>
    
    /*R/W = 0*/
    DIO_u8SetPinValue(LCD_u8_CONTROL_PORT , LCD_u8_RW_PIN , DIO_u8_LOW);		    //Depending on which port and which pin we used for R/W pin, we set the values of PORT & PIN in config file
    2a22:	83 e0       	ldi	r24, 0x03	; 3
    2a24:	66 e0       	ldi	r22, 0x06	; 6
    2a26:	40 e0       	ldi	r20, 0x00	; 0
    2a28:	0e 94 a6 09 	call	0x134c	; 0x134c <DIO_u8SetPinValue>
    
    /*Write char*/
    DIO_u8SetPortValue(LCD_u8_DATA_PORT , Copy_u8Char);							    //Takes the ASCII code of the char (by placing the char between '') and it looks up the equivalent address to that in the CGROM
    2a2c:	82 e0       	ldi	r24, 0x02	; 2
    2a2e:	69 8d       	ldd	r22, Y+25	; 0x19
    2a30:	0e 94 07 0c 	call	0x180e	; 0x180e <DIO_u8SetPortValue>
    
    /*E = 1*/
    DIO_u8SetPinValue(LCD_u8_CONTROL_PORT , LCD_u8_E_PIN , DIO_u8_HIGH);		    //Depending on which port and which pin we used for E pin, we set the values of PORT & PIN in config file
    2a34:	83 e0       	ldi	r24, 0x03	; 3
    2a36:	65 e0       	ldi	r22, 0x05	; 5
    2a38:	41 e0       	ldi	r20, 0x01	; 1
    2a3a:	0e 94 a6 09 	call	0x134c	; 0x134c <DIO_u8SetPinValue>
    2a3e:	80 e0       	ldi	r24, 0x00	; 0
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	a0 e8       	ldi	r26, 0x80	; 128
    2a44:	bf e3       	ldi	r27, 0x3F	; 63
    2a46:	8d 8b       	std	Y+21, r24	; 0x15
    2a48:	9e 8b       	std	Y+22, r25	; 0x16
    2a4a:	af 8b       	std	Y+23, r26	; 0x17
    2a4c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2a4e:	6d 89       	ldd	r22, Y+21	; 0x15
    2a50:	7e 89       	ldd	r23, Y+22	; 0x16
    2a52:	8f 89       	ldd	r24, Y+23	; 0x17
    2a54:	98 8d       	ldd	r25, Y+24	; 0x18
    2a56:	2b ea       	ldi	r18, 0xAB	; 171
    2a58:	3a ea       	ldi	r19, 0xAA	; 170
    2a5a:	4a e2       	ldi	r20, 0x2A	; 42
    2a5c:	50 e4       	ldi	r21, 0x40	; 64
    2a5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a62:	dc 01       	movw	r26, r24
    2a64:	cb 01       	movw	r24, r22
    2a66:	89 8b       	std	Y+17, r24	; 0x11
    2a68:	9a 8b       	std	Y+18, r25	; 0x12
    2a6a:	ab 8b       	std	Y+19, r26	; 0x13
    2a6c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2a6e:	69 89       	ldd	r22, Y+17	; 0x11
    2a70:	7a 89       	ldd	r23, Y+18	; 0x12
    2a72:	8b 89       	ldd	r24, Y+19	; 0x13
    2a74:	9c 89       	ldd	r25, Y+20	; 0x14
    2a76:	20 e0       	ldi	r18, 0x00	; 0
    2a78:	30 e0       	ldi	r19, 0x00	; 0
    2a7a:	40 e8       	ldi	r20, 0x80	; 128
    2a7c:	5f e3       	ldi	r21, 0x3F	; 63
    2a7e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a82:	88 23       	and	r24, r24
    2a84:	1c f4       	brge	.+6      	; 0x2a8c <LCD_voidSendChar+0x8a>
		__ticks = 1;
    2a86:	81 e0       	ldi	r24, 0x01	; 1
    2a88:	88 8b       	std	Y+16, r24	; 0x10
    2a8a:	91 c0       	rjmp	.+290    	; 0x2bae <LCD_voidSendChar+0x1ac>
	else if (__tmp > 255)
    2a8c:	69 89       	ldd	r22, Y+17	; 0x11
    2a8e:	7a 89       	ldd	r23, Y+18	; 0x12
    2a90:	8b 89       	ldd	r24, Y+19	; 0x13
    2a92:	9c 89       	ldd	r25, Y+20	; 0x14
    2a94:	20 e0       	ldi	r18, 0x00	; 0
    2a96:	30 e0       	ldi	r19, 0x00	; 0
    2a98:	4f e7       	ldi	r20, 0x7F	; 127
    2a9a:	53 e4       	ldi	r21, 0x43	; 67
    2a9c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2aa0:	18 16       	cp	r1, r24
    2aa2:	0c f0       	brlt	.+2      	; 0x2aa6 <LCD_voidSendChar+0xa4>
    2aa4:	7b c0       	rjmp	.+246    	; 0x2b9c <LCD_voidSendChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    2aa6:	6d 89       	ldd	r22, Y+21	; 0x15
    2aa8:	7e 89       	ldd	r23, Y+22	; 0x16
    2aaa:	8f 89       	ldd	r24, Y+23	; 0x17
    2aac:	98 8d       	ldd	r25, Y+24	; 0x18
    2aae:	20 e0       	ldi	r18, 0x00	; 0
    2ab0:	30 e0       	ldi	r19, 0x00	; 0
    2ab2:	4a e7       	ldi	r20, 0x7A	; 122
    2ab4:	54 e4       	ldi	r21, 0x44	; 68
    2ab6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2aba:	dc 01       	movw	r26, r24
    2abc:	cb 01       	movw	r24, r22
    2abe:	8c 87       	std	Y+12, r24	; 0x0c
    2ac0:	9d 87       	std	Y+13, r25	; 0x0d
    2ac2:	ae 87       	std	Y+14, r26	; 0x0e
    2ac4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ac6:	6c 85       	ldd	r22, Y+12	; 0x0c
    2ac8:	7d 85       	ldd	r23, Y+13	; 0x0d
    2aca:	8e 85       	ldd	r24, Y+14	; 0x0e
    2acc:	9f 85       	ldd	r25, Y+15	; 0x0f
    2ace:	20 e0       	ldi	r18, 0x00	; 0
    2ad0:	30 e0       	ldi	r19, 0x00	; 0
    2ad2:	4a ef       	ldi	r20, 0xFA	; 250
    2ad4:	54 e4       	ldi	r21, 0x44	; 68
    2ad6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ada:	dc 01       	movw	r26, r24
    2adc:	cb 01       	movw	r24, r22
    2ade:	88 87       	std	Y+8, r24	; 0x08
    2ae0:	99 87       	std	Y+9, r25	; 0x09
    2ae2:	aa 87       	std	Y+10, r26	; 0x0a
    2ae4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2ae6:	68 85       	ldd	r22, Y+8	; 0x08
    2ae8:	79 85       	ldd	r23, Y+9	; 0x09
    2aea:	8a 85       	ldd	r24, Y+10	; 0x0a
    2aec:	9b 85       	ldd	r25, Y+11	; 0x0b
    2aee:	20 e0       	ldi	r18, 0x00	; 0
    2af0:	30 e0       	ldi	r19, 0x00	; 0
    2af2:	40 e8       	ldi	r20, 0x80	; 128
    2af4:	5f e3       	ldi	r21, 0x3F	; 63
    2af6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2afa:	88 23       	and	r24, r24
    2afc:	2c f4       	brge	.+10     	; 0x2b08 <LCD_voidSendChar+0x106>
		__ticks = 1;
    2afe:	81 e0       	ldi	r24, 0x01	; 1
    2b00:	90 e0       	ldi	r25, 0x00	; 0
    2b02:	9f 83       	std	Y+7, r25	; 0x07
    2b04:	8e 83       	std	Y+6, r24	; 0x06
    2b06:	3f c0       	rjmp	.+126    	; 0x2b86 <LCD_voidSendChar+0x184>
	else if (__tmp > 65535)
    2b08:	68 85       	ldd	r22, Y+8	; 0x08
    2b0a:	79 85       	ldd	r23, Y+9	; 0x09
    2b0c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b0e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b10:	20 e0       	ldi	r18, 0x00	; 0
    2b12:	3f ef       	ldi	r19, 0xFF	; 255
    2b14:	4f e7       	ldi	r20, 0x7F	; 127
    2b16:	57 e4       	ldi	r21, 0x47	; 71
    2b18:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b1c:	18 16       	cp	r1, r24
    2b1e:	4c f5       	brge	.+82     	; 0x2b72 <LCD_voidSendChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b20:	6c 85       	ldd	r22, Y+12	; 0x0c
    2b22:	7d 85       	ldd	r23, Y+13	; 0x0d
    2b24:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b26:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b28:	20 e0       	ldi	r18, 0x00	; 0
    2b2a:	30 e0       	ldi	r19, 0x00	; 0
    2b2c:	40 e2       	ldi	r20, 0x20	; 32
    2b2e:	51 e4       	ldi	r21, 0x41	; 65
    2b30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b34:	dc 01       	movw	r26, r24
    2b36:	cb 01       	movw	r24, r22
    2b38:	bc 01       	movw	r22, r24
    2b3a:	cd 01       	movw	r24, r26
    2b3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b40:	dc 01       	movw	r26, r24
    2b42:	cb 01       	movw	r24, r22
    2b44:	9f 83       	std	Y+7, r25	; 0x07
    2b46:	8e 83       	std	Y+6, r24	; 0x06
    2b48:	0f c0       	rjmp	.+30     	; 0x2b68 <LCD_voidSendChar+0x166>
    2b4a:	88 ec       	ldi	r24, 0xC8	; 200
    2b4c:	90 e0       	ldi	r25, 0x00	; 0
    2b4e:	9d 83       	std	Y+5, r25	; 0x05
    2b50:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b52:	8c 81       	ldd	r24, Y+4	; 0x04
    2b54:	9d 81       	ldd	r25, Y+5	; 0x05
    2b56:	01 97       	sbiw	r24, 0x01	; 1
    2b58:	f1 f7       	brne	.-4      	; 0x2b56 <LCD_voidSendChar+0x154>
    2b5a:	9d 83       	std	Y+5, r25	; 0x05
    2b5c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b5e:	8e 81       	ldd	r24, Y+6	; 0x06
    2b60:	9f 81       	ldd	r25, Y+7	; 0x07
    2b62:	01 97       	sbiw	r24, 0x01	; 1
    2b64:	9f 83       	std	Y+7, r25	; 0x07
    2b66:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b68:	8e 81       	ldd	r24, Y+6	; 0x06
    2b6a:	9f 81       	ldd	r25, Y+7	; 0x07
    2b6c:	00 97       	sbiw	r24, 0x00	; 0
    2b6e:	69 f7       	brne	.-38     	; 0x2b4a <LCD_voidSendChar+0x148>
    2b70:	24 c0       	rjmp	.+72     	; 0x2bba <LCD_voidSendChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b72:	68 85       	ldd	r22, Y+8	; 0x08
    2b74:	79 85       	ldd	r23, Y+9	; 0x09
    2b76:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b78:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b7e:	dc 01       	movw	r26, r24
    2b80:	cb 01       	movw	r24, r22
    2b82:	9f 83       	std	Y+7, r25	; 0x07
    2b84:	8e 83       	std	Y+6, r24	; 0x06
    2b86:	8e 81       	ldd	r24, Y+6	; 0x06
    2b88:	9f 81       	ldd	r25, Y+7	; 0x07
    2b8a:	9b 83       	std	Y+3, r25	; 0x03
    2b8c:	8a 83       	std	Y+2, r24	; 0x02
    2b8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b90:	9b 81       	ldd	r25, Y+3	; 0x03
    2b92:	01 97       	sbiw	r24, 0x01	; 1
    2b94:	f1 f7       	brne	.-4      	; 0x2b92 <LCD_voidSendChar+0x190>
    2b96:	9b 83       	std	Y+3, r25	; 0x03
    2b98:	8a 83       	std	Y+2, r24	; 0x02
    2b9a:	0f c0       	rjmp	.+30     	; 0x2bba <LCD_voidSendChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2b9c:	69 89       	ldd	r22, Y+17	; 0x11
    2b9e:	7a 89       	ldd	r23, Y+18	; 0x12
    2ba0:	8b 89       	ldd	r24, Y+19	; 0x13
    2ba2:	9c 89       	ldd	r25, Y+20	; 0x14
    2ba4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ba8:	dc 01       	movw	r26, r24
    2baa:	cb 01       	movw	r24, r22
    2bac:	88 8b       	std	Y+16, r24	; 0x10
    2bae:	88 89       	ldd	r24, Y+16	; 0x10
    2bb0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2bb2:	89 81       	ldd	r24, Y+1	; 0x01
    2bb4:	8a 95       	dec	r24
    2bb6:	f1 f7       	brne	.-4      	; 0x2bb4 <LCD_voidSendChar+0x1b2>
    2bb8:	89 83       	std	Y+1, r24	; 0x01
    
    _delay_us(1);		///From LCD data sheet, E pulse width tw --> min = 230ns -->we can't use 0.23us(no fractions)		
    
    /*E = 0*/
    DIO_u8SetPinValue(LCD_u8_CONTROL_PORT , LCD_u8_E_PIN , DIO_u8_LOW);	            //Depending on which port and which pin we used for E pin, we set the values of PORT & PIN in config file
    2bba:	83 e0       	ldi	r24, 0x03	; 3
    2bbc:	65 e0       	ldi	r22, 0x05	; 5
    2bbe:	40 e0       	ldi	r20, 0x00	; 0
    2bc0:	0e 94 a6 09 	call	0x134c	; 0x134c <DIO_u8SetPinValue>
} 	
    2bc4:	69 96       	adiw	r28, 0x19	; 25
    2bc6:	0f b6       	in	r0, 0x3f	; 63
    2bc8:	f8 94       	cli
    2bca:	de bf       	out	0x3e, r29	; 62
    2bcc:	0f be       	out	0x3f, r0	; 63
    2bce:	cd bf       	out	0x3d, r28	; 61
    2bd0:	cf 91       	pop	r28
    2bd2:	df 91       	pop	r29
    2bd4:	08 95       	ret

00002bd6 <LCD_voidSendString>:

/*************************************************************************************/

void LCD_voidSendString(u8 * Copy_pu8String)
/**Function used to send string to the LCD**/
{
    2bd6:	df 93       	push	r29
    2bd8:	cf 93       	push	r28
    2bda:	00 d0       	rcall	.+0      	; 0x2bdc <LCD_voidSendString+0x6>
    2bdc:	0f 92       	push	r0
    2bde:	cd b7       	in	r28, 0x3d	; 61
    2be0:	de b7       	in	r29, 0x3e	; 62
    2be2:	9b 83       	std	Y+3, r25	; 0x03
    2be4:	8a 83       	std	Y+2, r24	; 0x02
	for(u8 i=0 ; (*(Copy_pu8String+i))!='\0' ; i++)
    2be6:	19 82       	std	Y+1, r1	; 0x01
    2be8:	0e c0       	rjmp	.+28     	; 0x2c06 <LCD_voidSendString+0x30>
	{
		LCD_voidSendChar(*(Copy_pu8String+i));
    2bea:	89 81       	ldd	r24, Y+1	; 0x01
    2bec:	28 2f       	mov	r18, r24
    2bee:	30 e0       	ldi	r19, 0x00	; 0
    2bf0:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf2:	9b 81       	ldd	r25, Y+3	; 0x03
    2bf4:	fc 01       	movw	r30, r24
    2bf6:	e2 0f       	add	r30, r18
    2bf8:	f3 1f       	adc	r31, r19
    2bfa:	80 81       	ld	r24, Z
    2bfc:	0e 94 01 15 	call	0x2a02	; 0x2a02 <LCD_voidSendChar>
/*************************************************************************************/

void LCD_voidSendString(u8 * Copy_pu8String)
/**Function used to send string to the LCD**/
{
	for(u8 i=0 ; (*(Copy_pu8String+i))!='\0' ; i++)
    2c00:	89 81       	ldd	r24, Y+1	; 0x01
    2c02:	8f 5f       	subi	r24, 0xFF	; 255
    2c04:	89 83       	std	Y+1, r24	; 0x01
    2c06:	89 81       	ldd	r24, Y+1	; 0x01
    2c08:	28 2f       	mov	r18, r24
    2c0a:	30 e0       	ldi	r19, 0x00	; 0
    2c0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c0e:	9b 81       	ldd	r25, Y+3	; 0x03
    2c10:	fc 01       	movw	r30, r24
    2c12:	e2 0f       	add	r30, r18
    2c14:	f3 1f       	adc	r31, r19
    2c16:	80 81       	ld	r24, Z
    2c18:	88 23       	and	r24, r24
    2c1a:	39 f7       	brne	.-50     	; 0x2bea <LCD_voidSendString+0x14>
	{
		LCD_voidSendChar(*(Copy_pu8String+i));
	}
} 
    2c1c:	0f 90       	pop	r0
    2c1e:	0f 90       	pop	r0
    2c20:	0f 90       	pop	r0
    2c22:	cf 91       	pop	r28
    2c24:	df 91       	pop	r29
    2c26:	08 95       	ret

00002c28 <LCD_voidSendNum>:

/*************************************************************************************/

void LCD_voidSendNum(u32 Copy_u32Num)
/**Function used to send number to the LCD**/
{
    2c28:	ef 92       	push	r14
    2c2a:	ff 92       	push	r15
    2c2c:	0f 93       	push	r16
    2c2e:	1f 93       	push	r17
    2c30:	df 93       	push	r29
    2c32:	cf 93       	push	r28
    2c34:	cd b7       	in	r28, 0x3d	; 61
    2c36:	de b7       	in	r29, 0x3e	; 62
    2c38:	e9 97       	sbiw	r28, 0x39	; 57
    2c3a:	0f b6       	in	r0, 0x3f	; 63
    2c3c:	f8 94       	cli
    2c3e:	de bf       	out	0x3e, r29	; 62
    2c40:	0f be       	out	0x3f, r0	; 63
    2c42:	cd bf       	out	0x3d, r28	; 61
    2c44:	6e ab       	std	Y+54, r22	; 0x36
    2c46:	7f ab       	std	Y+55, r23	; 0x37
    2c48:	88 af       	std	Y+56, r24	; 0x38
    2c4a:	99 af       	std	Y+57, r25	; 0x39
	u32 Local_u32Divider = 10;		//u32 Local Variable - Used to get the digits of the number by finding the remainder on it
    2c4c:	8a e0       	ldi	r24, 0x0A	; 10
    2c4e:	90 e0       	ldi	r25, 0x00	; 0
    2c50:	a0 e0       	ldi	r26, 0x00	; 0
    2c52:	b0 e0       	ldi	r27, 0x00	; 0
    2c54:	8a 87       	std	Y+10, r24	; 0x0a
    2c56:	9b 87       	std	Y+11, r25	; 0x0b
    2c58:	ac 87       	std	Y+12, r26	; 0x0c
    2c5a:	bd 87       	std	Y+13, r27	; 0x0d
	u32 Local_u32Remainder ;		//u32 Local Variable - Used to get the remainder 
	u32 Local_u32Digit;				//u32 Local Variable - Used to hold the digits of the number
	
	u32 Local_u32DigitArr[10];		//u32 Local Array - Used to store the digits of the number
	u8 Local_u8_Counteri =1;		//u8 Local Variable - Used as a counter
    2c5c:	81 e0       	ldi	r24, 0x01	; 1
    2c5e:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u32Num == 0)
    2c60:	8e a9       	ldd	r24, Y+54	; 0x36
    2c62:	9f a9       	ldd	r25, Y+55	; 0x37
    2c64:	a8 ad       	ldd	r26, Y+56	; 0x38
    2c66:	b9 ad       	ldd	r27, Y+57	; 0x39
    2c68:	00 97       	sbiw	r24, 0x00	; 0
    2c6a:	a1 05       	cpc	r26, r1
    2c6c:	b1 05       	cpc	r27, r1
    2c6e:	09 f0       	breq	.+2      	; 0x2c72 <LCD_voidSendNum+0x4a>
    2c70:	73 c0       	rjmp	.+230    	; 0x2d58 <LCD_voidSendNum+0x130>
	{
		LCD_voidSendChar(48);
    2c72:	80 e3       	ldi	r24, 0x30	; 48
    2c74:	0e 94 01 15 	call	0x2a02	; 0x2a02 <LCD_voidSendChar>
    2c78:	6f c0       	rjmp	.+222    	; 0x2d58 <LCD_voidSendNum+0x130>
	}
	
	while(Copy_u32Num != 0)
	{
		Local_u32Remainder = Copy_u32Num % Local_u32Divider;			//The remainder is calculated for the multiples of ten tell the biggest digit
    2c7a:	8e a9       	ldd	r24, Y+54	; 0x36
    2c7c:	9f a9       	ldd	r25, Y+55	; 0x37
    2c7e:	a8 ad       	ldd	r26, Y+56	; 0x38
    2c80:	b9 ad       	ldd	r27, Y+57	; 0x39
    2c82:	2a 85       	ldd	r18, Y+10	; 0x0a
    2c84:	3b 85       	ldd	r19, Y+11	; 0x0b
    2c86:	4c 85       	ldd	r20, Y+12	; 0x0c
    2c88:	5d 85       	ldd	r21, Y+13	; 0x0d
    2c8a:	bc 01       	movw	r22, r24
    2c8c:	cd 01       	movw	r24, r26
    2c8e:	0e 94 4c 2a 	call	0x5498	; 0x5498 <__udivmodsi4>
    2c92:	dc 01       	movw	r26, r24
    2c94:	cb 01       	movw	r24, r22
    2c96:	8e 83       	std	Y+6, r24	; 0x06
    2c98:	9f 83       	std	Y+7, r25	; 0x07
    2c9a:	a8 87       	std	Y+8, r26	; 0x08
    2c9c:	b9 87       	std	Y+9, r27	; 0x09
		Local_u32Digit = Local_u32Remainder/(Local_u32Divider/10);		//Finding each digit by dividing the resultant remainder by the divider/10
    2c9e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ca0:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ca2:	ac 85       	ldd	r26, Y+12	; 0x0c
    2ca4:	bd 85       	ldd	r27, Y+13	; 0x0d
    2ca6:	2a e0       	ldi	r18, 0x0A	; 10
    2ca8:	30 e0       	ldi	r19, 0x00	; 0
    2caa:	40 e0       	ldi	r20, 0x00	; 0
    2cac:	50 e0       	ldi	r21, 0x00	; 0
    2cae:	bc 01       	movw	r22, r24
    2cb0:	cd 01       	movw	r24, r26
    2cb2:	0e 94 4c 2a 	call	0x5498	; 0x5498 <__udivmodsi4>
    2cb6:	da 01       	movw	r26, r20
    2cb8:	c9 01       	movw	r24, r18
    2cba:	9c 01       	movw	r18, r24
    2cbc:	ad 01       	movw	r20, r26
    2cbe:	8e 81       	ldd	r24, Y+6	; 0x06
    2cc0:	9f 81       	ldd	r25, Y+7	; 0x07
    2cc2:	a8 85       	ldd	r26, Y+8	; 0x08
    2cc4:	b9 85       	ldd	r27, Y+9	; 0x09
    2cc6:	bc 01       	movw	r22, r24
    2cc8:	cd 01       	movw	r24, r26
    2cca:	0e 94 4c 2a 	call	0x5498	; 0x5498 <__udivmodsi4>
    2cce:	da 01       	movw	r26, r20
    2cd0:	c9 01       	movw	r24, r18
    2cd2:	8a 83       	std	Y+2, r24	; 0x02
    2cd4:	9b 83       	std	Y+3, r25	; 0x03
    2cd6:	ac 83       	std	Y+4, r26	; 0x04
    2cd8:	bd 83       	std	Y+5, r27	; 0x05
		
		Local_u32DigitArr[Local_u8_Counteri]= Local_u32Digit;			//Storing the digits in the array		
    2cda:	89 81       	ldd	r24, Y+1	; 0x01
    2cdc:	88 2f       	mov	r24, r24
    2cde:	90 e0       	ldi	r25, 0x00	; 0
    2ce0:	9c 01       	movw	r18, r24
    2ce2:	22 0f       	add	r18, r18
    2ce4:	33 1f       	adc	r19, r19
    2ce6:	22 0f       	add	r18, r18
    2ce8:	33 1f       	adc	r19, r19
    2cea:	ce 01       	movw	r24, r28
    2cec:	01 96       	adiw	r24, 0x01	; 1
    2cee:	82 0f       	add	r24, r18
    2cf0:	93 1f       	adc	r25, r19
    2cf2:	fc 01       	movw	r30, r24
    2cf4:	3d 96       	adiw	r30, 0x0d	; 13
    2cf6:	8a 81       	ldd	r24, Y+2	; 0x02
    2cf8:	9b 81       	ldd	r25, Y+3	; 0x03
    2cfa:	ac 81       	ldd	r26, Y+4	; 0x04
    2cfc:	bd 81       	ldd	r27, Y+5	; 0x05
    2cfe:	80 83       	st	Z, r24
    2d00:	91 83       	std	Z+1, r25	; 0x01
    2d02:	a2 83       	std	Z+2, r26	; 0x02
    2d04:	b3 83       	std	Z+3, r27	; 0x03
		Local_u8_Counteri++;
    2d06:	89 81       	ldd	r24, Y+1	; 0x01
    2d08:	8f 5f       	subi	r24, 0xFF	; 255
    2d0a:	89 83       	std	Y+1, r24	; 0x01
		
		Copy_u32Num -= Local_u32Remainder;								//Calculating the number after finding the pervious digit
    2d0c:	2e a9       	ldd	r18, Y+54	; 0x36
    2d0e:	3f a9       	ldd	r19, Y+55	; 0x37
    2d10:	48 ad       	ldd	r20, Y+56	; 0x38
    2d12:	59 ad       	ldd	r21, Y+57	; 0x39
    2d14:	8e 81       	ldd	r24, Y+6	; 0x06
    2d16:	9f 81       	ldd	r25, Y+7	; 0x07
    2d18:	a8 85       	ldd	r26, Y+8	; 0x08
    2d1a:	b9 85       	ldd	r27, Y+9	; 0x09
    2d1c:	79 01       	movw	r14, r18
    2d1e:	8a 01       	movw	r16, r20
    2d20:	e8 1a       	sub	r14, r24
    2d22:	f9 0a       	sbc	r15, r25
    2d24:	0a 0b       	sbc	r16, r26
    2d26:	1b 0b       	sbc	r17, r27
    2d28:	d8 01       	movw	r26, r16
    2d2a:	c7 01       	movw	r24, r14
    2d2c:	8e ab       	std	Y+54, r24	; 0x36
    2d2e:	9f ab       	std	Y+55, r25	; 0x37
    2d30:	a8 af       	std	Y+56, r26	; 0x38
    2d32:	b9 af       	std	Y+57, r27	; 0x39
		Local_u32Divider *= 10;											//Increasing the divider each loop to get a higher multiple of ten
    2d34:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d36:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d38:	ac 85       	ldd	r26, Y+12	; 0x0c
    2d3a:	bd 85       	ldd	r27, Y+13	; 0x0d
    2d3c:	2a e0       	ldi	r18, 0x0A	; 10
    2d3e:	30 e0       	ldi	r19, 0x00	; 0
    2d40:	40 e0       	ldi	r20, 0x00	; 0
    2d42:	50 e0       	ldi	r21, 0x00	; 0
    2d44:	bc 01       	movw	r22, r24
    2d46:	cd 01       	movw	r24, r26
    2d48:	0e 94 19 2a 	call	0x5432	; 0x5432 <__mulsi3>
    2d4c:	dc 01       	movw	r26, r24
    2d4e:	cb 01       	movw	r24, r22
    2d50:	8a 87       	std	Y+10, r24	; 0x0a
    2d52:	9b 87       	std	Y+11, r25	; 0x0b
    2d54:	ac 87       	std	Y+12, r26	; 0x0c
    2d56:	bd 87       	std	Y+13, r27	; 0x0d
	if(Copy_u32Num == 0)
	{
		LCD_voidSendChar(48);
	}
	
	while(Copy_u32Num != 0)
    2d58:	8e a9       	ldd	r24, Y+54	; 0x36
    2d5a:	9f a9       	ldd	r25, Y+55	; 0x37
    2d5c:	a8 ad       	ldd	r26, Y+56	; 0x38
    2d5e:	b9 ad       	ldd	r27, Y+57	; 0x39
    2d60:	00 97       	sbiw	r24, 0x00	; 0
    2d62:	a1 05       	cpc	r26, r1
    2d64:	b1 05       	cpc	r27, r1
    2d66:	09 f0       	breq	.+2      	; 0x2d6a <LCD_voidSendNum+0x142>
    2d68:	88 cf       	rjmp	.-240    	; 0x2c7a <LCD_voidSendNum+0x52>
		
		Copy_u32Num -= Local_u32Remainder;								//Calculating the number after finding the pervious digit
		Local_u32Divider *= 10;											//Increasing the divider each loop to get a higher multiple of ten
	}
	
	Local_u8_Counteri--;
    2d6a:	89 81       	ldd	r24, Y+1	; 0x01
    2d6c:	81 50       	subi	r24, 0x01	; 1
    2d6e:	89 83       	std	Y+1, r24	; 0x01
    2d70:	18 c0       	rjmp	.+48     	; 0x2da2 <LCD_voidSendNum+0x17a>
	while(Local_u8_Counteri>0)											//Looping on the array to send the stored digits to the LCD
	{
		LCD_voidSendChar(Local_u32DigitArr[Local_u8_Counteri]+48);		//Sending the digits to LCD_voidSendChar() function. To calculate the ASCII for each digit we add the ASCII of zero = 48
    2d72:	89 81       	ldd	r24, Y+1	; 0x01
    2d74:	88 2f       	mov	r24, r24
    2d76:	90 e0       	ldi	r25, 0x00	; 0
    2d78:	9c 01       	movw	r18, r24
    2d7a:	22 0f       	add	r18, r18
    2d7c:	33 1f       	adc	r19, r19
    2d7e:	22 0f       	add	r18, r18
    2d80:	33 1f       	adc	r19, r19
    2d82:	ce 01       	movw	r24, r28
    2d84:	01 96       	adiw	r24, 0x01	; 1
    2d86:	82 0f       	add	r24, r18
    2d88:	93 1f       	adc	r25, r19
    2d8a:	fc 01       	movw	r30, r24
    2d8c:	3d 96       	adiw	r30, 0x0d	; 13
    2d8e:	80 81       	ld	r24, Z
    2d90:	91 81       	ldd	r25, Z+1	; 0x01
    2d92:	a2 81       	ldd	r26, Z+2	; 0x02
    2d94:	b3 81       	ldd	r27, Z+3	; 0x03
    2d96:	80 5d       	subi	r24, 0xD0	; 208
    2d98:	0e 94 01 15 	call	0x2a02	; 0x2a02 <LCD_voidSendChar>
		Local_u8_Counteri--;
    2d9c:	89 81       	ldd	r24, Y+1	; 0x01
    2d9e:	81 50       	subi	r24, 0x01	; 1
    2da0:	89 83       	std	Y+1, r24	; 0x01
		Copy_u32Num -= Local_u32Remainder;								//Calculating the number after finding the pervious digit
		Local_u32Divider *= 10;											//Increasing the divider each loop to get a higher multiple of ten
	}
	
	Local_u8_Counteri--;
	while(Local_u8_Counteri>0)											//Looping on the array to send the stored digits to the LCD
    2da2:	89 81       	ldd	r24, Y+1	; 0x01
    2da4:	88 23       	and	r24, r24
    2da6:	29 f7       	brne	.-54     	; 0x2d72 <LCD_voidSendNum+0x14a>
	{
		LCD_voidSendChar(Local_u32DigitArr[Local_u8_Counteri]+48);		//Sending the digits to LCD_voidSendChar() function. To calculate the ASCII for each digit we add the ASCII of zero = 48
		Local_u8_Counteri--;
	}

}	
    2da8:	e9 96       	adiw	r28, 0x39	; 57
    2daa:	0f b6       	in	r0, 0x3f	; 63
    2dac:	f8 94       	cli
    2dae:	de bf       	out	0x3e, r29	; 62
    2db0:	0f be       	out	0x3f, r0	; 63
    2db2:	cd bf       	out	0x3d, r28	; 61
    2db4:	cf 91       	pop	r28
    2db6:	df 91       	pop	r29
    2db8:	1f 91       	pop	r17
    2dba:	0f 91       	pop	r16
    2dbc:	ff 90       	pop	r15
    2dbe:	ef 90       	pop	r14
    2dc0:	08 95       	ret

00002dc2 <LCD_u8GoToXY>:

/*************************************************************************************/

u8 LCD_u8GoToXY(u8 Copy_u8LineNum , u8 Copy_u8Location)
{
    2dc2:	df 93       	push	r29
    2dc4:	cf 93       	push	r28
    2dc6:	00 d0       	rcall	.+0      	; 0x2dc8 <LCD_u8GoToXY+0x6>
    2dc8:	00 d0       	rcall	.+0      	; 0x2dca <LCD_u8GoToXY+0x8>
    2dca:	0f 92       	push	r0
    2dcc:	cd b7       	in	r28, 0x3d	; 61
    2dce:	de b7       	in	r29, 0x3e	; 62
    2dd0:	8a 83       	std	Y+2, r24	; 0x02
    2dd2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2dd4:	81 e0       	ldi	r24, 0x01	; 1
    2dd6:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Location <= 39)							//Because each line has 40 characters available (0 - 40)
    2dd8:	8b 81       	ldd	r24, Y+3	; 0x03
    2dda:	88 32       	cpi	r24, 0x28	; 40
    2ddc:	e0 f4       	brcc	.+56     	; 0x2e16 <LCD_u8GoToXY+0x54>
	{
		switch(Copy_u8LineNum)
    2dde:	8a 81       	ldd	r24, Y+2	; 0x02
    2de0:	28 2f       	mov	r18, r24
    2de2:	30 e0       	ldi	r19, 0x00	; 0
    2de4:	3d 83       	std	Y+5, r19	; 0x05
    2de6:	2c 83       	std	Y+4, r18	; 0x04
    2de8:	8c 81       	ldd	r24, Y+4	; 0x04
    2dea:	9d 81       	ldd	r25, Y+5	; 0x05
    2dec:	81 30       	cpi	r24, 0x01	; 1
    2dee:	91 05       	cpc	r25, r1
    2df0:	31 f0       	breq	.+12     	; 0x2dfe <LCD_u8GoToXY+0x3c>
    2df2:	2c 81       	ldd	r18, Y+4	; 0x04
    2df4:	3d 81       	ldd	r19, Y+5	; 0x05
    2df6:	22 30       	cpi	r18, 0x02	; 2
    2df8:	31 05       	cpc	r19, r1
    2dfa:	31 f0       	breq	.+12     	; 0x2e08 <LCD_u8GoToXY+0x46>
    2dfc:	0a c0       	rjmp	.+20     	; 0x2e12 <LCD_u8GoToXY+0x50>
		{
			case LCD_u8_LINE_ONE: LCD_voidSendCmnd(0x80 + Copy_u8Location);break;		//As the first line starts from address 0x80H --> 0b1 0000000
    2dfe:	8b 81       	ldd	r24, Y+3	; 0x03
    2e00:	80 58       	subi	r24, 0x80	; 128
    2e02:	0e 94 17 14 	call	0x282e	; 0x282e <LCD_voidSendCmnd>
    2e06:	08 c0       	rjmp	.+16     	; 0x2e18 <LCD_u8GoToXY+0x56>
			case LCD_u8_LINE_TWO: LCD_voidSendCmnd(0xC0 + Copy_u8Location);break;		//As the second line starts from address 0xC0H --> 0b1 0000000 + 64(decimal) = 0b1 1000000
    2e08:	8b 81       	ldd	r24, Y+3	; 0x03
    2e0a:	80 54       	subi	r24, 0x40	; 64
    2e0c:	0e 94 17 14 	call	0x282e	; 0x282e <LCD_voidSendCmnd>
    2e10:	03 c0       	rjmp	.+6      	; 0x2e18 <LCD_u8GoToXY+0x56>
			default:
			Local_u8ErrorState = STD_TYPES_NOK;			//In case of wrong line number
    2e12:	19 82       	std	Y+1, r1	; 0x01
    2e14:	01 c0       	rjmp	.+2      	; 0x2e18 <LCD_u8GoToXY+0x56>
		}
	}
	
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;				//In case of wrong line location
    2e16:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return Local_u8ErrorState;
    2e18:	89 81       	ldd	r24, Y+1	; 0x01
}									
    2e1a:	0f 90       	pop	r0
    2e1c:	0f 90       	pop	r0
    2e1e:	0f 90       	pop	r0
    2e20:	0f 90       	pop	r0
    2e22:	0f 90       	pop	r0
    2e24:	cf 91       	pop	r28
    2e26:	df 91       	pop	r29
    2e28:	08 95       	ret

00002e2a <LCD_voidClearScreen>:

/*************************************************************************************/

void LCD_voidClearScreen(void)
/**Function used to crear the display screen**/
{
    2e2a:	df 93       	push	r29
    2e2c:	cf 93       	push	r28
    2e2e:	cd b7       	in	r28, 0x3d	; 61
    2e30:	de b7       	in	r29, 0x3e	; 62
    2e32:	2e 97       	sbiw	r28, 0x0e	; 14
    2e34:	0f b6       	in	r0, 0x3f	; 63
    2e36:	f8 94       	cli
    2e38:	de bf       	out	0x3e, r29	; 62
    2e3a:	0f be       	out	0x3f, r0	; 63
    2e3c:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCmnd(0b00000001);
    2e3e:	81 e0       	ldi	r24, 0x01	; 1
    2e40:	0e 94 17 14 	call	0x282e	; 0x282e <LCD_voidSendCmnd>
    2e44:	80 e0       	ldi	r24, 0x00	; 0
    2e46:	90 e0       	ldi	r25, 0x00	; 0
    2e48:	a0 e0       	ldi	r26, 0x00	; 0
    2e4a:	b0 e4       	ldi	r27, 0x40	; 64
    2e4c:	8b 87       	std	Y+11, r24	; 0x0b
    2e4e:	9c 87       	std	Y+12, r25	; 0x0c
    2e50:	ad 87       	std	Y+13, r26	; 0x0d
    2e52:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e54:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e56:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e58:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e5c:	20 e0       	ldi	r18, 0x00	; 0
    2e5e:	30 e0       	ldi	r19, 0x00	; 0
    2e60:	4a ef       	ldi	r20, 0xFA	; 250
    2e62:	54 e4       	ldi	r21, 0x44	; 68
    2e64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e68:	dc 01       	movw	r26, r24
    2e6a:	cb 01       	movw	r24, r22
    2e6c:	8f 83       	std	Y+7, r24	; 0x07
    2e6e:	98 87       	std	Y+8, r25	; 0x08
    2e70:	a9 87       	std	Y+9, r26	; 0x09
    2e72:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e74:	6f 81       	ldd	r22, Y+7	; 0x07
    2e76:	78 85       	ldd	r23, Y+8	; 0x08
    2e78:	89 85       	ldd	r24, Y+9	; 0x09
    2e7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e7c:	20 e0       	ldi	r18, 0x00	; 0
    2e7e:	30 e0       	ldi	r19, 0x00	; 0
    2e80:	40 e8       	ldi	r20, 0x80	; 128
    2e82:	5f e3       	ldi	r21, 0x3F	; 63
    2e84:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e88:	88 23       	and	r24, r24
    2e8a:	2c f4       	brge	.+10     	; 0x2e96 <LCD_voidClearScreen+0x6c>
		__ticks = 1;
    2e8c:	81 e0       	ldi	r24, 0x01	; 1
    2e8e:	90 e0       	ldi	r25, 0x00	; 0
    2e90:	9e 83       	std	Y+6, r25	; 0x06
    2e92:	8d 83       	std	Y+5, r24	; 0x05
    2e94:	3f c0       	rjmp	.+126    	; 0x2f14 <LCD_voidClearScreen+0xea>
	else if (__tmp > 65535)
    2e96:	6f 81       	ldd	r22, Y+7	; 0x07
    2e98:	78 85       	ldd	r23, Y+8	; 0x08
    2e9a:	89 85       	ldd	r24, Y+9	; 0x09
    2e9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e9e:	20 e0       	ldi	r18, 0x00	; 0
    2ea0:	3f ef       	ldi	r19, 0xFF	; 255
    2ea2:	4f e7       	ldi	r20, 0x7F	; 127
    2ea4:	57 e4       	ldi	r21, 0x47	; 71
    2ea6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2eaa:	18 16       	cp	r1, r24
    2eac:	4c f5       	brge	.+82     	; 0x2f00 <LCD_voidClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eae:	6b 85       	ldd	r22, Y+11	; 0x0b
    2eb0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2eb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eb6:	20 e0       	ldi	r18, 0x00	; 0
    2eb8:	30 e0       	ldi	r19, 0x00	; 0
    2eba:	40 e2       	ldi	r20, 0x20	; 32
    2ebc:	51 e4       	ldi	r21, 0x41	; 65
    2ebe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ec2:	dc 01       	movw	r26, r24
    2ec4:	cb 01       	movw	r24, r22
    2ec6:	bc 01       	movw	r22, r24
    2ec8:	cd 01       	movw	r24, r26
    2eca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ece:	dc 01       	movw	r26, r24
    2ed0:	cb 01       	movw	r24, r22
    2ed2:	9e 83       	std	Y+6, r25	; 0x06
    2ed4:	8d 83       	std	Y+5, r24	; 0x05
    2ed6:	0f c0       	rjmp	.+30     	; 0x2ef6 <LCD_voidClearScreen+0xcc>
    2ed8:	88 ec       	ldi	r24, 0xC8	; 200
    2eda:	90 e0       	ldi	r25, 0x00	; 0
    2edc:	9c 83       	std	Y+4, r25	; 0x04
    2ede:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2ee0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ee4:	01 97       	sbiw	r24, 0x01	; 1
    2ee6:	f1 f7       	brne	.-4      	; 0x2ee4 <LCD_voidClearScreen+0xba>
    2ee8:	9c 83       	std	Y+4, r25	; 0x04
    2eea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eec:	8d 81       	ldd	r24, Y+5	; 0x05
    2eee:	9e 81       	ldd	r25, Y+6	; 0x06
    2ef0:	01 97       	sbiw	r24, 0x01	; 1
    2ef2:	9e 83       	std	Y+6, r25	; 0x06
    2ef4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ef6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ef8:	9e 81       	ldd	r25, Y+6	; 0x06
    2efa:	00 97       	sbiw	r24, 0x00	; 0
    2efc:	69 f7       	brne	.-38     	; 0x2ed8 <LCD_voidClearScreen+0xae>
    2efe:	14 c0       	rjmp	.+40     	; 0x2f28 <LCD_voidClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f00:	6f 81       	ldd	r22, Y+7	; 0x07
    2f02:	78 85       	ldd	r23, Y+8	; 0x08
    2f04:	89 85       	ldd	r24, Y+9	; 0x09
    2f06:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f0c:	dc 01       	movw	r26, r24
    2f0e:	cb 01       	movw	r24, r22
    2f10:	9e 83       	std	Y+6, r25	; 0x06
    2f12:	8d 83       	std	Y+5, r24	; 0x05
    2f14:	8d 81       	ldd	r24, Y+5	; 0x05
    2f16:	9e 81       	ldd	r25, Y+6	; 0x06
    2f18:	9a 83       	std	Y+2, r25	; 0x02
    2f1a:	89 83       	std	Y+1, r24	; 0x01
    2f1c:	89 81       	ldd	r24, Y+1	; 0x01
    2f1e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f20:	01 97       	sbiw	r24, 0x01	; 1
    2f22:	f1 f7       	brne	.-4      	; 0x2f20 <LCD_voidClearScreen+0xf6>
    2f24:	9a 83       	std	Y+2, r25	; 0x02
    2f26:	89 83       	std	Y+1, r24	; 0x01
	//Wait more than 1.53ms
	_delay_ms(2);
}
    2f28:	2e 96       	adiw	r28, 0x0e	; 14
    2f2a:	0f b6       	in	r0, 0x3f	; 63
    2f2c:	f8 94       	cli
    2f2e:	de bf       	out	0x3e, r29	; 62
    2f30:	0f be       	out	0x3f, r0	; 63
    2f32:	cd bf       	out	0x3d, r28	; 61
    2f34:	cf 91       	pop	r28
    2f36:	df 91       	pop	r29
    2f38:	08 95       	ret

00002f3a <LCD_u8CreateSpecialChar>:

/*************************************************************************************/

u8 LCD_u8CreateSpecialChar(u8 Copy_u8SpecialCharNum , u8 * Copy_pu8Pattern)
/**Function used to create a new special character**/
{
    2f3a:	df 93       	push	r29
    2f3c:	cf 93       	push	r28
    2f3e:	cd b7       	in	r28, 0x3d	; 61
    2f40:	de b7       	in	r29, 0x3e	; 62
    2f42:	2e 97       	sbiw	r28, 0x0e	; 14
    2f44:	0f b6       	in	r0, 0x3f	; 63
    2f46:	f8 94       	cli
    2f48:	de bf       	out	0x3e, r29	; 62
    2f4a:	0f be       	out	0x3f, r0	; 63
    2f4c:	cd bf       	out	0x3d, r28	; 61
    2f4e:	8a 87       	std	Y+10, r24	; 0x0a
    2f50:	7c 87       	std	Y+12, r23	; 0x0c
    2f52:	6b 87       	std	Y+11, r22	; 0x0b
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2f54:	81 e0       	ldi	r24, 0x01	; 1
    2f56:	89 87       	std	Y+9, r24	; 0x09
	if(Copy_u8SpecialCharNum <= 7)
    2f58:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f5a:	88 30       	cpi	r24, 0x08	; 8
    2f5c:	08 f0       	brcs	.+2      	; 0x2f60 <LCD_u8CreateSpecialChar+0x26>
    2f5e:	f1 c0       	rjmp	.+482    	; 0x3142 <LCD_u8CreateSpecialChar+0x208>
	{	
		switch(Copy_u8SpecialCharNum)
    2f60:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f62:	28 2f       	mov	r18, r24
    2f64:	30 e0       	ldi	r19, 0x00	; 0
    2f66:	3e 87       	std	Y+14, r19	; 0x0e
    2f68:	2d 87       	std	Y+13, r18	; 0x0d
    2f6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f6e:	83 30       	cpi	r24, 0x03	; 3
    2f70:	91 05       	cpc	r25, r1
    2f72:	09 f4       	brne	.+2      	; 0x2f76 <LCD_u8CreateSpecialChar+0x3c>
    2f74:	73 c0       	rjmp	.+230    	; 0x305c <LCD_u8CreateSpecialChar+0x122>
    2f76:	2d 85       	ldd	r18, Y+13	; 0x0d
    2f78:	3e 85       	ldd	r19, Y+14	; 0x0e
    2f7a:	24 30       	cpi	r18, 0x04	; 4
    2f7c:	31 05       	cpc	r19, r1
    2f7e:	84 f4       	brge	.+32     	; 0x2fa0 <LCD_u8CreateSpecialChar+0x66>
    2f80:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f82:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f84:	81 30       	cpi	r24, 0x01	; 1
    2f86:	91 05       	cpc	r25, r1
    2f88:	d9 f1       	breq	.+118    	; 0x3000 <LCD_u8CreateSpecialChar+0xc6>
    2f8a:	2d 85       	ldd	r18, Y+13	; 0x0d
    2f8c:	3e 85       	ldd	r19, Y+14	; 0x0e
    2f8e:	22 30       	cpi	r18, 0x02	; 2
    2f90:	31 05       	cpc	r19, r1
    2f92:	0c f0       	brlt	.+2      	; 0x2f96 <LCD_u8CreateSpecialChar+0x5c>
    2f94:	4c c0       	rjmp	.+152    	; 0x302e <LCD_u8CreateSpecialChar+0xf4>
    2f96:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f98:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f9a:	00 97       	sbiw	r24, 0x00	; 0
    2f9c:	d1 f0       	breq	.+52     	; 0x2fd2 <LCD_u8CreateSpecialChar+0x98>
    2f9e:	d2 c0       	rjmp	.+420    	; 0x3144 <LCD_u8CreateSpecialChar+0x20a>
    2fa0:	2d 85       	ldd	r18, Y+13	; 0x0d
    2fa2:	3e 85       	ldd	r19, Y+14	; 0x0e
    2fa4:	25 30       	cpi	r18, 0x05	; 5
    2fa6:	31 05       	cpc	r19, r1
    2fa8:	09 f4       	brne	.+2      	; 0x2fac <LCD_u8CreateSpecialChar+0x72>
    2faa:	86 c0       	rjmp	.+268    	; 0x30b8 <LCD_u8CreateSpecialChar+0x17e>
    2fac:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fae:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fb0:	85 30       	cpi	r24, 0x05	; 5
    2fb2:	91 05       	cpc	r25, r1
    2fb4:	0c f4       	brge	.+2      	; 0x2fb8 <LCD_u8CreateSpecialChar+0x7e>
    2fb6:	69 c0       	rjmp	.+210    	; 0x308a <LCD_u8CreateSpecialChar+0x150>
    2fb8:	2d 85       	ldd	r18, Y+13	; 0x0d
    2fba:	3e 85       	ldd	r19, Y+14	; 0x0e
    2fbc:	26 30       	cpi	r18, 0x06	; 6
    2fbe:	31 05       	cpc	r19, r1
    2fc0:	09 f4       	brne	.+2      	; 0x2fc4 <LCD_u8CreateSpecialChar+0x8a>
    2fc2:	91 c0       	rjmp	.+290    	; 0x30e6 <LCD_u8CreateSpecialChar+0x1ac>
    2fc4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fc6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fc8:	87 30       	cpi	r24, 0x07	; 7
    2fca:	91 05       	cpc	r25, r1
    2fcc:	09 f4       	brne	.+2      	; 0x2fd0 <LCD_u8CreateSpecialChar+0x96>
    2fce:	a2 c0       	rjmp	.+324    	; 0x3114 <LCD_u8CreateSpecialChar+0x1da>
    2fd0:	b9 c0       	rjmp	.+370    	; 0x3144 <LCD_u8CreateSpecialChar+0x20a>
		{
			case LCD_u8_SPECIAL_CHAR0:
			LCD_voidSendCmnd(LCD_u8_SPECIAL_CHAR0_Address);		//Set CGRAM Address to write the character
    2fd2:	80 e4       	ldi	r24, 0x40	; 64
    2fd4:	0e 94 17 14 	call	0x282e	; 0x282e <LCD_voidSendCmnd>
			for(u8 i=0 ; i<8 ; i++)
    2fd8:	18 86       	std	Y+8, r1	; 0x08
    2fda:	0e c0       	rjmp	.+28     	; 0x2ff8 <LCD_u8CreateSpecialChar+0xbe>
			{
				LCD_voidSendChar(*(Copy_pu8Pattern+i));			//Saving the pattern to the CGRAM
    2fdc:	88 85       	ldd	r24, Y+8	; 0x08
    2fde:	28 2f       	mov	r18, r24
    2fe0:	30 e0       	ldi	r19, 0x00	; 0
    2fe2:	8b 85       	ldd	r24, Y+11	; 0x0b
    2fe4:	9c 85       	ldd	r25, Y+12	; 0x0c
    2fe6:	fc 01       	movw	r30, r24
    2fe8:	e2 0f       	add	r30, r18
    2fea:	f3 1f       	adc	r31, r19
    2fec:	80 81       	ld	r24, Z
    2fee:	0e 94 01 15 	call	0x2a02	; 0x2a02 <LCD_voidSendChar>
	{	
		switch(Copy_u8SpecialCharNum)
		{
			case LCD_u8_SPECIAL_CHAR0:
			LCD_voidSendCmnd(LCD_u8_SPECIAL_CHAR0_Address);		//Set CGRAM Address to write the character
			for(u8 i=0 ; i<8 ; i++)
    2ff2:	88 85       	ldd	r24, Y+8	; 0x08
    2ff4:	8f 5f       	subi	r24, 0xFF	; 255
    2ff6:	88 87       	std	Y+8, r24	; 0x08
    2ff8:	88 85       	ldd	r24, Y+8	; 0x08
    2ffa:	88 30       	cpi	r24, 0x08	; 8
    2ffc:	78 f3       	brcs	.-34     	; 0x2fdc <LCD_u8CreateSpecialChar+0xa2>
    2ffe:	a2 c0       	rjmp	.+324    	; 0x3144 <LCD_u8CreateSpecialChar+0x20a>
			}
			break;
			
			
			case LCD_u8_SPECIAL_CHAR1:
			LCD_voidSendCmnd(LCD_u8_SPECIAL_CHAR1_Address);		//Set CGRAM Address to write the character
    3000:	88 e4       	ldi	r24, 0x48	; 72
    3002:	0e 94 17 14 	call	0x282e	; 0x282e <LCD_voidSendCmnd>
			for(u8 i=0 ; i<8 ; i++)
    3006:	1f 82       	std	Y+7, r1	; 0x07
    3008:	0e c0       	rjmp	.+28     	; 0x3026 <LCD_u8CreateSpecialChar+0xec>
			{
				LCD_voidSendChar(*(Copy_pu8Pattern+i));			//Saving the pattern to the CGRAM
    300a:	8f 81       	ldd	r24, Y+7	; 0x07
    300c:	28 2f       	mov	r18, r24
    300e:	30 e0       	ldi	r19, 0x00	; 0
    3010:	8b 85       	ldd	r24, Y+11	; 0x0b
    3012:	9c 85       	ldd	r25, Y+12	; 0x0c
    3014:	fc 01       	movw	r30, r24
    3016:	e2 0f       	add	r30, r18
    3018:	f3 1f       	adc	r31, r19
    301a:	80 81       	ld	r24, Z
    301c:	0e 94 01 15 	call	0x2a02	; 0x2a02 <LCD_voidSendChar>
			break;
			
			
			case LCD_u8_SPECIAL_CHAR1:
			LCD_voidSendCmnd(LCD_u8_SPECIAL_CHAR1_Address);		//Set CGRAM Address to write the character
			for(u8 i=0 ; i<8 ; i++)
    3020:	8f 81       	ldd	r24, Y+7	; 0x07
    3022:	8f 5f       	subi	r24, 0xFF	; 255
    3024:	8f 83       	std	Y+7, r24	; 0x07
    3026:	8f 81       	ldd	r24, Y+7	; 0x07
    3028:	88 30       	cpi	r24, 0x08	; 8
    302a:	78 f3       	brcs	.-34     	; 0x300a <LCD_u8CreateSpecialChar+0xd0>
    302c:	8b c0       	rjmp	.+278    	; 0x3144 <LCD_u8CreateSpecialChar+0x20a>
			}
			break;
			
			
			case LCD_u8_SPECIAL_CHAR2:
			LCD_voidSendCmnd(LCD_u8_SPECIAL_CHAR2_Address);		//Set CGRAM Address to write the character
    302e:	80 e5       	ldi	r24, 0x50	; 80
    3030:	0e 94 17 14 	call	0x282e	; 0x282e <LCD_voidSendCmnd>
			for(u8 i=0 ; i<8 ; i++)
    3034:	1e 82       	std	Y+6, r1	; 0x06
    3036:	0e c0       	rjmp	.+28     	; 0x3054 <LCD_u8CreateSpecialChar+0x11a>
			{
				LCD_voidSendChar(*(Copy_pu8Pattern+i));			//Saving the pattern to the CGRAM
    3038:	8e 81       	ldd	r24, Y+6	; 0x06
    303a:	28 2f       	mov	r18, r24
    303c:	30 e0       	ldi	r19, 0x00	; 0
    303e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3040:	9c 85       	ldd	r25, Y+12	; 0x0c
    3042:	fc 01       	movw	r30, r24
    3044:	e2 0f       	add	r30, r18
    3046:	f3 1f       	adc	r31, r19
    3048:	80 81       	ld	r24, Z
    304a:	0e 94 01 15 	call	0x2a02	; 0x2a02 <LCD_voidSendChar>
			break;
			
			
			case LCD_u8_SPECIAL_CHAR2:
			LCD_voidSendCmnd(LCD_u8_SPECIAL_CHAR2_Address);		//Set CGRAM Address to write the character
			for(u8 i=0 ; i<8 ; i++)
    304e:	8e 81       	ldd	r24, Y+6	; 0x06
    3050:	8f 5f       	subi	r24, 0xFF	; 255
    3052:	8e 83       	std	Y+6, r24	; 0x06
    3054:	8e 81       	ldd	r24, Y+6	; 0x06
    3056:	88 30       	cpi	r24, 0x08	; 8
    3058:	78 f3       	brcs	.-34     	; 0x3038 <LCD_u8CreateSpecialChar+0xfe>
    305a:	74 c0       	rjmp	.+232    	; 0x3144 <LCD_u8CreateSpecialChar+0x20a>
			}
			break;
			
			
			case LCD_u8_SPECIAL_CHAR3:
			LCD_voidSendCmnd(LCD_u8_SPECIAL_CHAR3_Address);		//Set CGRAM Address to write the character
    305c:	88 e5       	ldi	r24, 0x58	; 88
    305e:	0e 94 17 14 	call	0x282e	; 0x282e <LCD_voidSendCmnd>
			for(u8 i=0 ; i<8 ; i++)
    3062:	1d 82       	std	Y+5, r1	; 0x05
    3064:	0e c0       	rjmp	.+28     	; 0x3082 <LCD_u8CreateSpecialChar+0x148>
			{
				LCD_voidSendChar(*(Copy_pu8Pattern+i));			//Saving the pattern to the CGRAM
    3066:	8d 81       	ldd	r24, Y+5	; 0x05
    3068:	28 2f       	mov	r18, r24
    306a:	30 e0       	ldi	r19, 0x00	; 0
    306c:	8b 85       	ldd	r24, Y+11	; 0x0b
    306e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3070:	fc 01       	movw	r30, r24
    3072:	e2 0f       	add	r30, r18
    3074:	f3 1f       	adc	r31, r19
    3076:	80 81       	ld	r24, Z
    3078:	0e 94 01 15 	call	0x2a02	; 0x2a02 <LCD_voidSendChar>
			break;
			
			
			case LCD_u8_SPECIAL_CHAR3:
			LCD_voidSendCmnd(LCD_u8_SPECIAL_CHAR3_Address);		//Set CGRAM Address to write the character
			for(u8 i=0 ; i<8 ; i++)
    307c:	8d 81       	ldd	r24, Y+5	; 0x05
    307e:	8f 5f       	subi	r24, 0xFF	; 255
    3080:	8d 83       	std	Y+5, r24	; 0x05
    3082:	8d 81       	ldd	r24, Y+5	; 0x05
    3084:	88 30       	cpi	r24, 0x08	; 8
    3086:	78 f3       	brcs	.-34     	; 0x3066 <LCD_u8CreateSpecialChar+0x12c>
    3088:	5d c0       	rjmp	.+186    	; 0x3144 <LCD_u8CreateSpecialChar+0x20a>
			}
			break;
			
			
			case LCD_u8_SPECIAL_CHAR4:
			LCD_voidSendCmnd(LCD_u8_SPECIAL_CHAR4_Address);		//Set CGRAM Address to write the character
    308a:	80 e6       	ldi	r24, 0x60	; 96
    308c:	0e 94 17 14 	call	0x282e	; 0x282e <LCD_voidSendCmnd>
			for(u8 i=0 ; i<8 ; i++)
    3090:	1c 82       	std	Y+4, r1	; 0x04
    3092:	0e c0       	rjmp	.+28     	; 0x30b0 <LCD_u8CreateSpecialChar+0x176>
			{
				LCD_voidSendChar(*(Copy_pu8Pattern+i));			//Saving the pattern to the CGRAM
    3094:	8c 81       	ldd	r24, Y+4	; 0x04
    3096:	28 2f       	mov	r18, r24
    3098:	30 e0       	ldi	r19, 0x00	; 0
    309a:	8b 85       	ldd	r24, Y+11	; 0x0b
    309c:	9c 85       	ldd	r25, Y+12	; 0x0c
    309e:	fc 01       	movw	r30, r24
    30a0:	e2 0f       	add	r30, r18
    30a2:	f3 1f       	adc	r31, r19
    30a4:	80 81       	ld	r24, Z
    30a6:	0e 94 01 15 	call	0x2a02	; 0x2a02 <LCD_voidSendChar>
			break;
			
			
			case LCD_u8_SPECIAL_CHAR4:
			LCD_voidSendCmnd(LCD_u8_SPECIAL_CHAR4_Address);		//Set CGRAM Address to write the character
			for(u8 i=0 ; i<8 ; i++)
    30aa:	8c 81       	ldd	r24, Y+4	; 0x04
    30ac:	8f 5f       	subi	r24, 0xFF	; 255
    30ae:	8c 83       	std	Y+4, r24	; 0x04
    30b0:	8c 81       	ldd	r24, Y+4	; 0x04
    30b2:	88 30       	cpi	r24, 0x08	; 8
    30b4:	78 f3       	brcs	.-34     	; 0x3094 <LCD_u8CreateSpecialChar+0x15a>
    30b6:	46 c0       	rjmp	.+140    	; 0x3144 <LCD_u8CreateSpecialChar+0x20a>
			}
			break;
			
			
			case LCD_u8_SPECIAL_CHAR5:
			LCD_voidSendCmnd(LCD_u8_SPECIAL_CHAR5_Address);		//Set CGRAM Address to write the character
    30b8:	88 e6       	ldi	r24, 0x68	; 104
    30ba:	0e 94 17 14 	call	0x282e	; 0x282e <LCD_voidSendCmnd>
			for(u8 i=0 ; i<8 ; i++)
    30be:	1b 82       	std	Y+3, r1	; 0x03
    30c0:	0e c0       	rjmp	.+28     	; 0x30de <LCD_u8CreateSpecialChar+0x1a4>
			{
				LCD_voidSendChar(*(Copy_pu8Pattern+i));			//Saving the pattern to the CGRAM
    30c2:	8b 81       	ldd	r24, Y+3	; 0x03
    30c4:	28 2f       	mov	r18, r24
    30c6:	30 e0       	ldi	r19, 0x00	; 0
    30c8:	8b 85       	ldd	r24, Y+11	; 0x0b
    30ca:	9c 85       	ldd	r25, Y+12	; 0x0c
    30cc:	fc 01       	movw	r30, r24
    30ce:	e2 0f       	add	r30, r18
    30d0:	f3 1f       	adc	r31, r19
    30d2:	80 81       	ld	r24, Z
    30d4:	0e 94 01 15 	call	0x2a02	; 0x2a02 <LCD_voidSendChar>
			break;
			
			
			case LCD_u8_SPECIAL_CHAR5:
			LCD_voidSendCmnd(LCD_u8_SPECIAL_CHAR5_Address);		//Set CGRAM Address to write the character
			for(u8 i=0 ; i<8 ; i++)
    30d8:	8b 81       	ldd	r24, Y+3	; 0x03
    30da:	8f 5f       	subi	r24, 0xFF	; 255
    30dc:	8b 83       	std	Y+3, r24	; 0x03
    30de:	8b 81       	ldd	r24, Y+3	; 0x03
    30e0:	88 30       	cpi	r24, 0x08	; 8
    30e2:	78 f3       	brcs	.-34     	; 0x30c2 <LCD_u8CreateSpecialChar+0x188>
    30e4:	2f c0       	rjmp	.+94     	; 0x3144 <LCD_u8CreateSpecialChar+0x20a>
			}
			break;
			
			
			case LCD_u8_SPECIAL_CHAR6:
			LCD_voidSendCmnd(LCD_u8_SPECIAL_CHAR6_Address);		//Set CGRAM Address to write the character
    30e6:	80 e7       	ldi	r24, 0x70	; 112
    30e8:	0e 94 17 14 	call	0x282e	; 0x282e <LCD_voidSendCmnd>
			for(u8 i=0 ; i<8 ; i++)
    30ec:	1a 82       	std	Y+2, r1	; 0x02
    30ee:	0e c0       	rjmp	.+28     	; 0x310c <LCD_u8CreateSpecialChar+0x1d2>
			{
				LCD_voidSendChar(*(Copy_pu8Pattern+i));			//Saving the pattern to the CGRAM
    30f0:	8a 81       	ldd	r24, Y+2	; 0x02
    30f2:	28 2f       	mov	r18, r24
    30f4:	30 e0       	ldi	r19, 0x00	; 0
    30f6:	8b 85       	ldd	r24, Y+11	; 0x0b
    30f8:	9c 85       	ldd	r25, Y+12	; 0x0c
    30fa:	fc 01       	movw	r30, r24
    30fc:	e2 0f       	add	r30, r18
    30fe:	f3 1f       	adc	r31, r19
    3100:	80 81       	ld	r24, Z
    3102:	0e 94 01 15 	call	0x2a02	; 0x2a02 <LCD_voidSendChar>
			break;
			
			
			case LCD_u8_SPECIAL_CHAR6:
			LCD_voidSendCmnd(LCD_u8_SPECIAL_CHAR6_Address);		//Set CGRAM Address to write the character
			for(u8 i=0 ; i<8 ; i++)
    3106:	8a 81       	ldd	r24, Y+2	; 0x02
    3108:	8f 5f       	subi	r24, 0xFF	; 255
    310a:	8a 83       	std	Y+2, r24	; 0x02
    310c:	8a 81       	ldd	r24, Y+2	; 0x02
    310e:	88 30       	cpi	r24, 0x08	; 8
    3110:	78 f3       	brcs	.-34     	; 0x30f0 <LCD_u8CreateSpecialChar+0x1b6>
    3112:	18 c0       	rjmp	.+48     	; 0x3144 <LCD_u8CreateSpecialChar+0x20a>
			}
			break;
			
			
			case LCD_u8_SPECIAL_CHAR7:
			LCD_voidSendCmnd(LCD_u8_SPECIAL_CHAR7_Address);		//Set CGRAM Address to write the character
    3114:	88 e7       	ldi	r24, 0x78	; 120
    3116:	0e 94 17 14 	call	0x282e	; 0x282e <LCD_voidSendCmnd>
			for(u8 i=0 ; i<8 ; i++)
    311a:	19 82       	std	Y+1, r1	; 0x01
    311c:	0e c0       	rjmp	.+28     	; 0x313a <LCD_u8CreateSpecialChar+0x200>
			{
				LCD_voidSendChar(*(Copy_pu8Pattern+i));			//Saving the pattern to the CGRAM
    311e:	89 81       	ldd	r24, Y+1	; 0x01
    3120:	28 2f       	mov	r18, r24
    3122:	30 e0       	ldi	r19, 0x00	; 0
    3124:	8b 85       	ldd	r24, Y+11	; 0x0b
    3126:	9c 85       	ldd	r25, Y+12	; 0x0c
    3128:	fc 01       	movw	r30, r24
    312a:	e2 0f       	add	r30, r18
    312c:	f3 1f       	adc	r31, r19
    312e:	80 81       	ld	r24, Z
    3130:	0e 94 01 15 	call	0x2a02	; 0x2a02 <LCD_voidSendChar>
			break;
			
			
			case LCD_u8_SPECIAL_CHAR7:
			LCD_voidSendCmnd(LCD_u8_SPECIAL_CHAR7_Address);		//Set CGRAM Address to write the character
			for(u8 i=0 ; i<8 ; i++)
    3134:	89 81       	ldd	r24, Y+1	; 0x01
    3136:	8f 5f       	subi	r24, 0xFF	; 255
    3138:	89 83       	std	Y+1, r24	; 0x01
    313a:	89 81       	ldd	r24, Y+1	; 0x01
    313c:	88 30       	cpi	r24, 0x08	; 8
    313e:	78 f3       	brcs	.-34     	; 0x311e <LCD_u8CreateSpecialChar+0x1e4>
    3140:	01 c0       	rjmp	.+2      	; 0x3144 <LCD_u8CreateSpecialChar+0x20a>

	}
	
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    3142:	19 86       	std	Y+9, r1	; 0x09
	}

	return Local_u8ErrorState;
    3144:	89 85       	ldd	r24, Y+9	; 0x09
}
    3146:	2e 96       	adiw	r28, 0x0e	; 14
    3148:	0f b6       	in	r0, 0x3f	; 63
    314a:	f8 94       	cli
    314c:	de bf       	out	0x3e, r29	; 62
    314e:	0f be       	out	0x3f, r0	; 63
    3150:	cd bf       	out	0x3d, r28	; 61
    3152:	cf 91       	pop	r28
    3154:	df 91       	pop	r29
    3156:	08 95       	ret

00003158 <LCD_u8SendSpecialChar>:

/*************************************************************************************/

u8 LCD_u8SendSpecialChar(u8 Copy_u8SpecialCharNum , u8 Copy_u8LineNum , u8 Copy_u8Location)
/**Function used to send a special character to the LCD**/
{
    3158:	df 93       	push	r29
    315a:	cf 93       	push	r28
    315c:	00 d0       	rcall	.+0      	; 0x315e <LCD_u8SendSpecialChar+0x6>
    315e:	00 d0       	rcall	.+0      	; 0x3160 <LCD_u8SendSpecialChar+0x8>
    3160:	cd b7       	in	r28, 0x3d	; 61
    3162:	de b7       	in	r29, 0x3e	; 62
    3164:	8a 83       	std	Y+2, r24	; 0x02
    3166:	6b 83       	std	Y+3, r22	; 0x03
    3168:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
    316a:	81 e0       	ldi	r24, 0x01	; 1
    316c:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8SpecialCharNum <= 7 && ((Copy_u8LineNum == 1) || (Copy_u8LineNum == 2)) && Copy_u8Location <= 39)
    316e:	8a 81       	ldd	r24, Y+2	; 0x02
    3170:	88 30       	cpi	r24, 0x08	; 8
    3172:	88 f4       	brcc	.+34     	; 0x3196 <LCD_u8SendSpecialChar+0x3e>
    3174:	8b 81       	ldd	r24, Y+3	; 0x03
    3176:	81 30       	cpi	r24, 0x01	; 1
    3178:	19 f0       	breq	.+6      	; 0x3180 <LCD_u8SendSpecialChar+0x28>
    317a:	8b 81       	ldd	r24, Y+3	; 0x03
    317c:	82 30       	cpi	r24, 0x02	; 2
    317e:	59 f4       	brne	.+22     	; 0x3196 <LCD_u8SendSpecialChar+0x3e>
    3180:	8c 81       	ldd	r24, Y+4	; 0x04
    3182:	88 32       	cpi	r24, 0x28	; 40
    3184:	40 f4       	brcc	.+16     	; 0x3196 <LCD_u8SendSpecialChar+0x3e>
	{
		LCD_u8GoToXY(Copy_u8LineNum , Copy_u8Location);
    3186:	8b 81       	ldd	r24, Y+3	; 0x03
    3188:	6c 81       	ldd	r22, Y+4	; 0x04
    318a:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8SpecialCharNum);
    318e:	8a 81       	ldd	r24, Y+2	; 0x02
    3190:	0e 94 01 15 	call	0x2a02	; 0x2a02 <LCD_voidSendChar>
    3194:	01 c0       	rjmp	.+2      	; 0x3198 <LCD_u8SendSpecialChar+0x40>
	}
	
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    3196:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    3198:	89 81       	ldd	r24, Y+1	; 0x01
}
    319a:	0f 90       	pop	r0
    319c:	0f 90       	pop	r0
    319e:	0f 90       	pop	r0
    31a0:	0f 90       	pop	r0
    31a2:	cf 91       	pop	r28
    31a4:	df 91       	pop	r29
    31a6:	08 95       	ret

000031a8 <LCD_u8_MoveCursor>:

/*************************************************************************************/

void	LCD_u8_MoveCursor(u8 Copy_MovingDirection)
{
    31a8:	df 93       	push	r29
    31aa:	cf 93       	push	r28
    31ac:	0f 92       	push	r0
    31ae:	cd b7       	in	r28, 0x3d	; 61
    31b0:	de b7       	in	r29, 0x3e	; 62
    31b2:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_MovingDirection == LCD_u8MoveLeft)
    31b4:	89 81       	ldd	r24, Y+1	; 0x01
    31b6:	88 23       	and	r24, r24
    31b8:	21 f4       	brne	.+8      	; 0x31c2 <LCD_u8_MoveCursor+0x1a>
	{
		/*Move cursor left cmnd*/
		LCD_voidSendCmnd(0b00010000);
    31ba:	80 e1       	ldi	r24, 0x10	; 16
    31bc:	0e 94 17 14 	call	0x282e	; 0x282e <LCD_voidSendCmnd>
    31c0:	06 c0       	rjmp	.+12     	; 0x31ce <LCD_u8_MoveCursor+0x26>
	}
	else if(Copy_MovingDirection == LCD_u8MoveRight)
    31c2:	89 81       	ldd	r24, Y+1	; 0x01
    31c4:	81 30       	cpi	r24, 0x01	; 1
    31c6:	19 f4       	brne	.+6      	; 0x31ce <LCD_u8_MoveCursor+0x26>
	{
		/*Move cursor right cmnd*/
		LCD_voidSendCmnd(0b00010100);
    31c8:	84 e1       	ldi	r24, 0x14	; 20
    31ca:	0e 94 17 14 	call	0x282e	; 0x282e <LCD_voidSendCmnd>
	}
}
    31ce:	0f 90       	pop	r0
    31d0:	cf 91       	pop	r28
    31d2:	df 91       	pop	r29
    31d4:	08 95       	ret

000031d6 <LCD_u8_MoveScreen>:

/*************************************************************************************/

void	LCD_u8_MoveScreen(u8 Copy_MovingDirection)
{
    31d6:	df 93       	push	r29
    31d8:	cf 93       	push	r28
    31da:	0f 92       	push	r0
    31dc:	cd b7       	in	r28, 0x3d	; 61
    31de:	de b7       	in	r29, 0x3e	; 62
    31e0:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_MovingDirection == LCD_u8MoveLeft)
    31e2:	89 81       	ldd	r24, Y+1	; 0x01
    31e4:	88 23       	and	r24, r24
    31e6:	21 f4       	brne	.+8      	; 0x31f0 <LCD_u8_MoveScreen+0x1a>
	{
		/*Move cursor left cmnd*/
		LCD_voidSendCmnd(0b00011000);
    31e8:	88 e1       	ldi	r24, 0x18	; 24
    31ea:	0e 94 17 14 	call	0x282e	; 0x282e <LCD_voidSendCmnd>
    31ee:	06 c0       	rjmp	.+12     	; 0x31fc <LCD_u8_MoveScreen+0x26>
	}
	else if(Copy_MovingDirection == LCD_u8MoveRight)
    31f0:	89 81       	ldd	r24, Y+1	; 0x01
    31f2:	81 30       	cpi	r24, 0x01	; 1
    31f4:	19 f4       	brne	.+6      	; 0x31fc <LCD_u8_MoveScreen+0x26>
	{
		/*Move cursor right cmnd*/
		LCD_voidSendCmnd(0b00011100);
    31f6:	8c e1       	ldi	r24, 0x1C	; 28
    31f8:	0e 94 17 14 	call	0x282e	; 0x282e <LCD_voidSendCmnd>
	}
}
    31fc:	0f 90       	pop	r0
    31fe:	cf 91       	pop	r28
    3200:	df 91       	pop	r29
    3202:	08 95       	ret

00003204 <TIMER0_u8SetCallBack_OV>:

///-------------------------------------------------------------------------------------------------------------------------

u8 TIMER0_u8SetCallBack_OV(u16 Copy_u16CounterValue , void (*Copy_pf)(void))				//We've to make them only one Call back function
/**Call Back function for Normal Mode**/
{
    3204:	df 93       	push	r29
    3206:	cf 93       	push	r28
    3208:	00 d0       	rcall	.+0      	; 0x320a <TIMER0_u8SetCallBack_OV+0x6>
    320a:	00 d0       	rcall	.+0      	; 0x320c <TIMER0_u8SetCallBack_OV+0x8>
    320c:	0f 92       	push	r0
    320e:	cd b7       	in	r28, 0x3d	; 61
    3210:	de b7       	in	r29, 0x3e	; 62
    3212:	9b 83       	std	Y+3, r25	; 0x03
    3214:	8a 83       	std	Y+2, r24	; 0x02
    3216:	7d 83       	std	Y+5, r23	; 0x05
    3218:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
    321a:	81 e0       	ldi	r24, 0x01	; 1
    321c:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
    321e:	8c 81       	ldd	r24, Y+4	; 0x04
    3220:	9d 81       	ldd	r25, Y+5	; 0x05
    3222:	00 97       	sbiw	r24, 0x00	; 0
    3224:	69 f0       	breq	.+26     	; 0x3240 <TIMER0_u8SetCallBack_OV+0x3c>
	{
		TIMER0_pfOV = Copy_pf;
    3226:	8c 81       	ldd	r24, Y+4	; 0x04
    3228:	9d 81       	ldd	r25, Y+5	; 0x05
    322a:	90 93 d4 01 	sts	0x01D4, r25
    322e:	80 93 d3 01 	sts	0x01D3, r24
		TIMER0_u16OV_CounterValue = Copy_u16CounterValue;
    3232:	8a 81       	ldd	r24, Y+2	; 0x02
    3234:	9b 81       	ldd	r25, Y+3	; 0x03
    3236:	90 93 f5 01 	sts	0x01F5, r25
    323a:	80 93 f4 01 	sts	0x01F4, r24
    323e:	01 c0       	rjmp	.+2      	; 0x3242 <TIMER0_u8SetCallBack_OV+0x3e>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    3240:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    3242:	89 81       	ldd	r24, Y+1	; 0x01
}
    3244:	0f 90       	pop	r0
    3246:	0f 90       	pop	r0
    3248:	0f 90       	pop	r0
    324a:	0f 90       	pop	r0
    324c:	0f 90       	pop	r0
    324e:	cf 91       	pop	r28
    3250:	df 91       	pop	r29
    3252:	08 95       	ret

00003254 <TIMER0_u8SetCallBack_CTC>:

///-------------------------------------------------------------------------------------------------------------------------

u8 TIMER0_u8SetCallBack_CTC(u16 Copy_u16CounterValue , void (*Copy_pf)(void))
/**Call Back function for CTC Mode**/
{
    3254:	df 93       	push	r29
    3256:	cf 93       	push	r28
    3258:	00 d0       	rcall	.+0      	; 0x325a <TIMER0_u8SetCallBack_CTC+0x6>
    325a:	00 d0       	rcall	.+0      	; 0x325c <TIMER0_u8SetCallBack_CTC+0x8>
    325c:	0f 92       	push	r0
    325e:	cd b7       	in	r28, 0x3d	; 61
    3260:	de b7       	in	r29, 0x3e	; 62
    3262:	9b 83       	std	Y+3, r25	; 0x03
    3264:	8a 83       	std	Y+2, r24	; 0x02
    3266:	7d 83       	std	Y+5, r23	; 0x05
    3268:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
    326a:	81 e0       	ldi	r24, 0x01	; 1
    326c:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
    326e:	8c 81       	ldd	r24, Y+4	; 0x04
    3270:	9d 81       	ldd	r25, Y+5	; 0x05
    3272:	00 97       	sbiw	r24, 0x00	; 0
    3274:	69 f0       	breq	.+26     	; 0x3290 <TIMER0_u8SetCallBack_CTC+0x3c>
	{
		TIMER0_pfCTC = Copy_pf;
    3276:	8c 81       	ldd	r24, Y+4	; 0x04
    3278:	9d 81       	ldd	r25, Y+5	; 0x05
    327a:	90 93 d6 01 	sts	0x01D6, r25
    327e:	80 93 d5 01 	sts	0x01D5, r24
		TIMER0_u16CTC_CounterValue = Copy_u16CounterValue;
    3282:	8a 81       	ldd	r24, Y+2	; 0x02
    3284:	9b 81       	ldd	r25, Y+3	; 0x03
    3286:	90 93 f8 01 	sts	0x01F8, r25
    328a:	80 93 f7 01 	sts	0x01F7, r24
    328e:	01 c0       	rjmp	.+2      	; 0x3292 <TIMER0_u8SetCallBack_CTC+0x3e>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    3290:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    3292:	89 81       	ldd	r24, Y+1	; 0x01
}
    3294:	0f 90       	pop	r0
    3296:	0f 90       	pop	r0
    3298:	0f 90       	pop	r0
    329a:	0f 90       	pop	r0
    329c:	0f 90       	pop	r0
    329e:	cf 91       	pop	r28
    32a0:	df 91       	pop	r29
    32a2:	08 95       	ret

000032a4 <TIMER0_voidSetCompareMatchValue>:

///-------------------------------------------------------------------------------------------------------------------------

void TIMER0_voidSetCompareMatchValue(u8 Copy_u8OCR0Value)
{
    32a4:	df 93       	push	r29
    32a6:	cf 93       	push	r28
    32a8:	0f 92       	push	r0
    32aa:	cd b7       	in	r28, 0x3d	; 61
    32ac:	de b7       	in	r29, 0x3e	; 62
    32ae:	89 83       	std	Y+1, r24	; 0x01
	/*Set OCR value*/
	TIMER0_u8_OCR0_REG = Copy_u8OCR0Value;
    32b0:	ec e5       	ldi	r30, 0x5C	; 92
    32b2:	f0 e0       	ldi	r31, 0x00	; 0
    32b4:	89 81       	ldd	r24, Y+1	; 0x01
    32b6:	80 83       	st	Z, r24
}
    32b8:	0f 90       	pop	r0
    32ba:	cf 91       	pop	r28
    32bc:	df 91       	pop	r29
    32be:	08 95       	ret

000032c0 <TIMER0_voidSetPReloadValue>:

///-------------------------------------------------------------------------------------------------------------------------

void TIMER0_voidSetPReloadValue(u8 Copy_u8PreloadValue)
{
    32c0:	df 93       	push	r29
    32c2:	cf 93       	push	r28
    32c4:	0f 92       	push	r0
    32c6:	cd b7       	in	r28, 0x3d	; 61
    32c8:	de b7       	in	r29, 0x3e	; 62
    32ca:	89 83       	std	Y+1, r24	; 0x01
	/*Set preload value*/
	TIMER0_u8_TCNT0_REG = Copy_u8PreloadValue;
    32cc:	e2 e5       	ldi	r30, 0x52	; 82
    32ce:	f0 e0       	ldi	r31, 0x00	; 0
    32d0:	89 81       	ldd	r24, Y+1	; 0x01
    32d2:	80 83       	st	Z, r24
	/*pass preolad value to OV ISR function*/
	TIMER0_u8PreloadValue = Copy_u8PreloadValue;
    32d4:	89 81       	ldd	r24, Y+1	; 0x01
    32d6:	80 93 f6 01 	sts	0x01F6, r24
}
    32da:	0f 90       	pop	r0
    32dc:	cf 91       	pop	r28
    32de:	df 91       	pop	r29
    32e0:	08 95       	ret

000032e2 <TIMER0_u8GetCounterValue>:

///-------------------------------------------------------------------------------------------------------------------------

u8   TIMER0_u8GetCounterValue(u8 * Copy_pu8CounterValue)
{
    32e2:	df 93       	push	r29
    32e4:	cf 93       	push	r28
    32e6:	00 d0       	rcall	.+0      	; 0x32e8 <TIMER0_u8GetCounterValue+0x6>
    32e8:	0f 92       	push	r0
    32ea:	cd b7       	in	r28, 0x3d	; 61
    32ec:	de b7       	in	r29, 0x3e	; 62
    32ee:	9b 83       	std	Y+3, r25	; 0x03
    32f0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    32f2:	81 e0       	ldi	r24, 0x01	; 1
    32f4:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu8CounterValue != NULL)
    32f6:	8a 81       	ldd	r24, Y+2	; 0x02
    32f8:	9b 81       	ldd	r25, Y+3	; 0x03
    32fa:	00 97       	sbiw	r24, 0x00	; 0
    32fc:	39 f0       	breq	.+14     	; 0x330c <TIMER0_u8GetCounterValue+0x2a>
	{
		*Copy_pu8CounterValue = TIMER0_u8_TCNT0_REG;
    32fe:	e2 e5       	ldi	r30, 0x52	; 82
    3300:	f0 e0       	ldi	r31, 0x00	; 0
    3302:	80 81       	ld	r24, Z
    3304:	ea 81       	ldd	r30, Y+2	; 0x02
    3306:	fb 81       	ldd	r31, Y+3	; 0x03
    3308:	80 83       	st	Z, r24
    330a:	01 c0       	rjmp	.+2      	; 0x330e <TIMER0_u8GetCounterValue+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    330c:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    330e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3310:	0f 90       	pop	r0
    3312:	0f 90       	pop	r0
    3314:	0f 90       	pop	r0
    3316:	cf 91       	pop	r28
    3318:	df 91       	pop	r29
    331a:	08 95       	ret

0000331c <TIMER0_voidInit>:

///-------------------------------------------------------------------------------------------------------------------------

u8 TIMER0_voidInit(void)
{
    331c:	df 93       	push	r29
    331e:	cf 93       	push	r28
    3320:	0f 92       	push	r0
    3322:	cd b7       	in	r28, 0x3d	; 61
    3324:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8ErrorState = STD_TYPES_OK;
    3326:	81 e0       	ldi	r24, 0x01	; 1
    3328:	89 83       	std	Y+1, r24	; 0x01
	#elif TIMER0_u8_INITIAL_WAVE_GENERATION_MODE == TIMER0_u8_INITIAL_CTC					//10
		SET_BIT(TIMER0_u8_TCCR0_REG , TIMER0_TCCR0_WGM01_BIT);
		CLR_BIT(TIMER0_u8_TCCR0_REG , TIMER0_TCCR0_WGM00_BIT);
		//TIMER0_u8ModeCheck = 1;
	#elif TIMER0_u8_INITIAL_WAVE_GENERATION_MODE == TIMER0_u8_INITIAL_FAST_PWM				//11
		SET_BIT(TIMER0_u8_TCCR0_REG , TIMER0_TCCR0_WGM01_BIT);
    332a:	a3 e5       	ldi	r26, 0x53	; 83
    332c:	b0 e0       	ldi	r27, 0x00	; 0
    332e:	e3 e5       	ldi	r30, 0x53	; 83
    3330:	f0 e0       	ldi	r31, 0x00	; 0
    3332:	80 81       	ld	r24, Z
    3334:	88 60       	ori	r24, 0x08	; 8
    3336:	8c 93       	st	X, r24
		SET_BIT(TIMER0_u8_TCCR0_REG , TIMER0_TCCR0_WGM00_BIT);
    3338:	a3 e5       	ldi	r26, 0x53	; 83
    333a:	b0 e0       	ldi	r27, 0x00	; 0
    333c:	e3 e5       	ldi	r30, 0x53	; 83
    333e:	f0 e0       	ldi	r31, 0x00	; 0
    3340:	80 81       	ld	r24, Z
    3342:	80 64       	ori	r24, 0x40	; 64
    3344:	8c 93       	st	X, r24
			}
			break;
		case TIMER0_u8_INITIAL_FAST_PWM_CLR_OC0_ON_COMPARE_MATCH_SET_OC0_AT_TOP:
			if(TIMER0_u8_INITIAL_WAVE_GENERATION_MODE == TIMER0_u8_INITIAL_FAST_PWM)
			{
				SET_BIT(TIMER0_u8_TCCR0_REG , TIMER0_TCCR0_COM01_BIT);
    3346:	a3 e5       	ldi	r26, 0x53	; 83
    3348:	b0 e0       	ldi	r27, 0x00	; 0
    334a:	e3 e5       	ldi	r30, 0x53	; 83
    334c:	f0 e0       	ldi	r31, 0x00	; 0
    334e:	80 81       	ld	r24, Z
    3350:	80 62       	ori	r24, 0x20	; 32
    3352:	8c 93       	st	X, r24
				CLR_BIT(TIMER0_u8_TCCR0_REG , TIMER0_TCCR0_COM00_BIT);
    3354:	a3 e5       	ldi	r26, 0x53	; 83
    3356:	b0 e0       	ldi	r27, 0x00	; 0
    3358:	e3 e5       	ldi	r30, 0x53	; 83
    335a:	f0 e0       	ldi	r31, 0x00	; 0
    335c:	80 81       	ld	r24, Z
    335e:	8f 7e       	andi	r24, 0xEF	; 239
    3360:	8c 93       	st	X, r24
	}
	
	
	/*Interrupt Flag Selection*/
	#if  TIMER0_u8_INITIAL_INTERRUPT_FLAG == TIMER0_u8_INITIAL_OVERFLOW_FLAG
		CLR_BIT(TIMER0_u8_TIMSK_REG , TIMER0_TIMSK_OCIE0_BIT);
    3362:	a9 e5       	ldi	r26, 0x59	; 89
    3364:	b0 e0       	ldi	r27, 0x00	; 0
    3366:	e9 e5       	ldi	r30, 0x59	; 89
    3368:	f0 e0       	ldi	r31, 0x00	; 0
    336a:	80 81       	ld	r24, Z
    336c:	8d 7f       	andi	r24, 0xFD	; 253
    336e:	8c 93       	st	X, r24
		SET_BIT(TIMER0_u8_TIMSK_REG , TIMER0_TIMSK_TOIE0_BIT);
    3370:	a9 e5       	ldi	r26, 0x59	; 89
    3372:	b0 e0       	ldi	r27, 0x00	; 0
    3374:	e9 e5       	ldi	r30, 0x59	; 89
    3376:	f0 e0       	ldi	r31, 0x00	; 0
    3378:	80 81       	ld	r24, Z
    337a:	81 60       	ori	r24, 0x01	; 1
    337c:	8c 93       	st	X, r24
	#elif TIMER0_u8_INITIAL_CLOCK_SELECTION == TIMER0_u8_INITIAL_NO_PRESCALLING							//001
		CLR_BIT(TIMER0_u8_TCCR0_REG , TIMER0_TCCR0_CS02_BIT);					
		CLR_BIT(TIMER0_u8_TCCR0_REG , TIMER0_TCCR0_CS01_BIT);					
		SET_BIT(TIMER0_u8_TCCR0_REG , TIMER0_TCCR0_CS00_BIT);					
	#elif TIMER0_u8_INITIAL_CLOCK_SELECTION == TIMER0_u8_INITIAL_PRESCALER_8							//010
		CLR_BIT(TIMER0_u8_TCCR0_REG , TIMER0_TCCR0_CS02_BIT);					
    337e:	a3 e5       	ldi	r26, 0x53	; 83
    3380:	b0 e0       	ldi	r27, 0x00	; 0
    3382:	e3 e5       	ldi	r30, 0x53	; 83
    3384:	f0 e0       	ldi	r31, 0x00	; 0
    3386:	80 81       	ld	r24, Z
    3388:	8b 7f       	andi	r24, 0xFB	; 251
    338a:	8c 93       	st	X, r24
		SET_BIT(TIMER0_u8_TCCR0_REG , TIMER0_TCCR0_CS01_BIT);					
    338c:	a3 e5       	ldi	r26, 0x53	; 83
    338e:	b0 e0       	ldi	r27, 0x00	; 0
    3390:	e3 e5       	ldi	r30, 0x53	; 83
    3392:	f0 e0       	ldi	r31, 0x00	; 0
    3394:	80 81       	ld	r24, Z
    3396:	82 60       	ori	r24, 0x02	; 2
    3398:	8c 93       	st	X, r24
		CLR_BIT(TIMER0_u8_TCCR0_REG , TIMER0_TCCR0_CS00_BIT);					
    339a:	a3 e5       	ldi	r26, 0x53	; 83
    339c:	b0 e0       	ldi	r27, 0x00	; 0
    339e:	e3 e5       	ldi	r30, 0x53	; 83
    33a0:	f0 e0       	ldi	r31, 0x00	; 0
    33a2:	80 81       	ld	r24, Z
    33a4:	8e 7f       	andi	r24, 0xFE	; 254
    33a6:	8c 93       	st	X, r24
		SET_BIT(TIMER0_u8_TCCR0_REG , TIMER0_TCCR0_CS02_BIT);
		SET_BIT(TIMER0_u8_TCCR0_REG , TIMER0_TCCR0_CS01_BIT);
		SET_BIT(TIMER0_u8_TCCR0_REG , TIMER0_TCCR0_CS00_BIT);
	#endif
	
	return Local_u8ErrorState;
    33a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    33aa:	0f 90       	pop	r0
    33ac:	cf 91       	pop	r28
    33ae:	df 91       	pop	r29
    33b0:	08 95       	ret

000033b2 <__vector_11>:
///-------------------------------------------------------------------------------------------------------------------------

/*Prototype for ISR function of Timer0 OV*/
void __vector_11(void)			__attribute__((signal));
void __vector_11(void)
{
    33b2:	1f 92       	push	r1
    33b4:	0f 92       	push	r0
    33b6:	0f b6       	in	r0, 0x3f	; 63
    33b8:	0f 92       	push	r0
    33ba:	11 24       	eor	r1, r1
    33bc:	2f 93       	push	r18
    33be:	3f 93       	push	r19
    33c0:	4f 93       	push	r20
    33c2:	5f 93       	push	r21
    33c4:	6f 93       	push	r22
    33c6:	7f 93       	push	r23
    33c8:	8f 93       	push	r24
    33ca:	9f 93       	push	r25
    33cc:	af 93       	push	r26
    33ce:	bf 93       	push	r27
    33d0:	ef 93       	push	r30
    33d2:	ff 93       	push	r31
    33d4:	df 93       	push	r29
    33d6:	cf 93       	push	r28
    33d8:	cd b7       	in	r28, 0x3d	; 61
    33da:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterOVF = 0;
	Local_u16CounterOVF++;
    33dc:	80 91 d7 01 	lds	r24, 0x01D7
    33e0:	90 91 d8 01 	lds	r25, 0x01D8
    33e4:	01 96       	adiw	r24, 0x01	; 1
    33e6:	90 93 d8 01 	sts	0x01D8, r25
    33ea:	80 93 d7 01 	sts	0x01D7, r24
	if(Local_u16CounterOVF == TIMER0_u16OV_CounterValue)
    33ee:	20 91 d7 01 	lds	r18, 0x01D7
    33f2:	30 91 d8 01 	lds	r19, 0x01D8
    33f6:	80 91 f4 01 	lds	r24, 0x01F4
    33fa:	90 91 f5 01 	lds	r25, 0x01F5
    33fe:	28 17       	cp	r18, r24
    3400:	39 07       	cpc	r19, r25
    3402:	a1 f4       	brne	.+40     	; 0x342c <__vector_11+0x7a>
	{

		/*Update Preload Value*/
		TIMER0_u8_TCNT0_REG = TIMER0_u8PreloadValue;
    3404:	e2 e5       	ldi	r30, 0x52	; 82
    3406:	f0 e0       	ldi	r31, 0x00	; 0
    3408:	80 91 f6 01 	lds	r24, 0x01F6
    340c:	80 83       	st	Z, r24

		/*Update OV Counter*/
		Local_u16CounterOVF = 0;
    340e:	10 92 d8 01 	sts	0x01D8, r1
    3412:	10 92 d7 01 	sts	0x01D7, r1
		
		/*Call the application function*/
		if(TIMER0_pfOV != NULL)
    3416:	80 91 d3 01 	lds	r24, 0x01D3
    341a:	90 91 d4 01 	lds	r25, 0x01D4
    341e:	00 97       	sbiw	r24, 0x00	; 0
    3420:	29 f0       	breq	.+10     	; 0x342c <__vector_11+0x7a>
		{
			/*Dereferencing of the pointer*/
			TIMER0_pfOV();
    3422:	e0 91 d3 01 	lds	r30, 0x01D3
    3426:	f0 91 d4 01 	lds	r31, 0x01D4
    342a:	09 95       	icall
		}
	}
}
    342c:	cf 91       	pop	r28
    342e:	df 91       	pop	r29
    3430:	ff 91       	pop	r31
    3432:	ef 91       	pop	r30
    3434:	bf 91       	pop	r27
    3436:	af 91       	pop	r26
    3438:	9f 91       	pop	r25
    343a:	8f 91       	pop	r24
    343c:	7f 91       	pop	r23
    343e:	6f 91       	pop	r22
    3440:	5f 91       	pop	r21
    3442:	4f 91       	pop	r20
    3444:	3f 91       	pop	r19
    3446:	2f 91       	pop	r18
    3448:	0f 90       	pop	r0
    344a:	0f be       	out	0x3f, r0	; 63
    344c:	0f 90       	pop	r0
    344e:	1f 90       	pop	r1
    3450:	18 95       	reti

00003452 <__vector_10>:
///-------------------------------------------------------------------------------------------------------------------------

/*Prototype for ISR function of Timer0 Compare Match*/
void __vector_10(void)			__attribute__((signal));
void __vector_10(void)
{
    3452:	1f 92       	push	r1
    3454:	0f 92       	push	r0
    3456:	0f b6       	in	r0, 0x3f	; 63
    3458:	0f 92       	push	r0
    345a:	11 24       	eor	r1, r1
    345c:	2f 93       	push	r18
    345e:	3f 93       	push	r19
    3460:	4f 93       	push	r20
    3462:	5f 93       	push	r21
    3464:	6f 93       	push	r22
    3466:	7f 93       	push	r23
    3468:	8f 93       	push	r24
    346a:	9f 93       	push	r25
    346c:	af 93       	push	r26
    346e:	bf 93       	push	r27
    3470:	ef 93       	push	r30
    3472:	ff 93       	push	r31
    3474:	df 93       	push	r29
    3476:	cf 93       	push	r28
    3478:	cd b7       	in	r28, 0x3d	; 61
    347a:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterCTC = 0;
	Local_u16CounterCTC++;
    347c:	80 91 d9 01 	lds	r24, 0x01D9
    3480:	90 91 da 01 	lds	r25, 0x01DA
    3484:	01 96       	adiw	r24, 0x01	; 1
    3486:	90 93 da 01 	sts	0x01DA, r25
    348a:	80 93 d9 01 	sts	0x01D9, r24
	if(Local_u16CounterCTC == TIMER0_u16CTC_CounterValue)
    348e:	20 91 d9 01 	lds	r18, 0x01D9
    3492:	30 91 da 01 	lds	r19, 0x01DA
    3496:	80 91 f7 01 	lds	r24, 0x01F7
    349a:	90 91 f8 01 	lds	r25, 0x01F8
    349e:	28 17       	cp	r18, r24
    34a0:	39 07       	cpc	r19, r25
    34a2:	79 f4       	brne	.+30     	; 0x34c2 <__vector_10+0x70>
	{
		/*Update OV Counter*/
		Local_u16CounterCTC = 0;
    34a4:	10 92 da 01 	sts	0x01DA, r1
    34a8:	10 92 d9 01 	sts	0x01D9, r1
		
		/*Call the application function*/
		if(TIMER0_pfCTC != NULL)
    34ac:	80 91 d5 01 	lds	r24, 0x01D5
    34b0:	90 91 d6 01 	lds	r25, 0x01D6
    34b4:	00 97       	sbiw	r24, 0x00	; 0
    34b6:	29 f0       	breq	.+10     	; 0x34c2 <__vector_10+0x70>
		{
			/*Dereferencing of the pointer*/
			TIMER0_pfCTC();
    34b8:	e0 91 d5 01 	lds	r30, 0x01D5
    34bc:	f0 91 d6 01 	lds	r31, 0x01D6
    34c0:	09 95       	icall
		}
	}
}
    34c2:	cf 91       	pop	r28
    34c4:	df 91       	pop	r29
    34c6:	ff 91       	pop	r31
    34c8:	ef 91       	pop	r30
    34ca:	bf 91       	pop	r27
    34cc:	af 91       	pop	r26
    34ce:	9f 91       	pop	r25
    34d0:	8f 91       	pop	r24
    34d2:	7f 91       	pop	r23
    34d4:	6f 91       	pop	r22
    34d6:	5f 91       	pop	r21
    34d8:	4f 91       	pop	r20
    34da:	3f 91       	pop	r19
    34dc:	2f 91       	pop	r18
    34de:	0f 90       	pop	r0
    34e0:	0f be       	out	0x3f, r0	; 63
    34e2:	0f 90       	pop	r0
    34e4:	1f 90       	pop	r1
    34e6:	18 95       	reti

000034e8 <TIMER1_u8SetCallBack_OV>:
volatile static u16 TIMER1_u16OnPeriod = 0;
volatile static u16 TIMER1_u16OffPeriod = 0;


u8   TIMER1_u8SetCallBack_OV		  (u32 Copy_u32CounterValue , void (*Copy_pf)(void))
{
    34e8:	df 93       	push	r29
    34ea:	cf 93       	push	r28
    34ec:	cd b7       	in	r28, 0x3d	; 61
    34ee:	de b7       	in	r29, 0x3e	; 62
    34f0:	27 97       	sbiw	r28, 0x07	; 7
    34f2:	0f b6       	in	r0, 0x3f	; 63
    34f4:	f8 94       	cli
    34f6:	de bf       	out	0x3e, r29	; 62
    34f8:	0f be       	out	0x3f, r0	; 63
    34fa:	cd bf       	out	0x3d, r28	; 61
    34fc:	6a 83       	std	Y+2, r22	; 0x02
    34fe:	7b 83       	std	Y+3, r23	; 0x03
    3500:	8c 83       	std	Y+4, r24	; 0x04
    3502:	9d 83       	std	Y+5, r25	; 0x05
    3504:	5f 83       	std	Y+7, r21	; 0x07
    3506:	4e 83       	std	Y+6, r20	; 0x06
	u8 Local_u8ErrorState = STD_TYPES_OK;
    3508:	81 e0       	ldi	r24, 0x01	; 1
    350a:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
    350c:	8e 81       	ldd	r24, Y+6	; 0x06
    350e:	9f 81       	ldd	r25, Y+7	; 0x07
    3510:	00 97       	sbiw	r24, 0x00	; 0
    3512:	99 f0       	breq	.+38     	; 0x353a <TIMER1_u8SetCallBack_OV+0x52>
	{
		TIMER1_pfOV = Copy_pf;
    3514:	8e 81       	ldd	r24, Y+6	; 0x06
    3516:	9f 81       	ldd	r25, Y+7	; 0x07
    3518:	90 93 dc 01 	sts	0x01DC, r25
    351c:	80 93 db 01 	sts	0x01DB, r24
		TIMER1_u32OV_CounterValue = Copy_u32CounterValue;
    3520:	8a 81       	ldd	r24, Y+2	; 0x02
    3522:	9b 81       	ldd	r25, Y+3	; 0x03
    3524:	ac 81       	ldd	r26, Y+4	; 0x04
    3526:	bd 81       	ldd	r27, Y+5	; 0x05
    3528:	80 93 f9 01 	sts	0x01F9, r24
    352c:	90 93 fa 01 	sts	0x01FA, r25
    3530:	a0 93 fb 01 	sts	0x01FB, r26
    3534:	b0 93 fc 01 	sts	0x01FC, r27
    3538:	01 c0       	rjmp	.+2      	; 0x353c <TIMER1_u8SetCallBack_OV+0x54>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    353a:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    353c:	89 81       	ldd	r24, Y+1	; 0x01
}
    353e:	27 96       	adiw	r28, 0x07	; 7
    3540:	0f b6       	in	r0, 0x3f	; 63
    3542:	f8 94       	cli
    3544:	de bf       	out	0x3e, r29	; 62
    3546:	0f be       	out	0x3f, r0	; 63
    3548:	cd bf       	out	0x3d, r28	; 61
    354a:	cf 91       	pop	r28
    354c:	df 91       	pop	r29
    354e:	08 95       	ret

00003550 <TIMER1_u8SetCallBack_CTC_A>:

///-------------------------------------------------------------------------------------------------------------------------

u8   TIMER1_u8SetCallBack_CTC_A		  (u32 Copy_u32CounterValue , void (*Copy_pf)(void))
{
    3550:	df 93       	push	r29
    3552:	cf 93       	push	r28
    3554:	cd b7       	in	r28, 0x3d	; 61
    3556:	de b7       	in	r29, 0x3e	; 62
    3558:	27 97       	sbiw	r28, 0x07	; 7
    355a:	0f b6       	in	r0, 0x3f	; 63
    355c:	f8 94       	cli
    355e:	de bf       	out	0x3e, r29	; 62
    3560:	0f be       	out	0x3f, r0	; 63
    3562:	cd bf       	out	0x3d, r28	; 61
    3564:	6a 83       	std	Y+2, r22	; 0x02
    3566:	7b 83       	std	Y+3, r23	; 0x03
    3568:	8c 83       	std	Y+4, r24	; 0x04
    356a:	9d 83       	std	Y+5, r25	; 0x05
    356c:	5f 83       	std	Y+7, r21	; 0x07
    356e:	4e 83       	std	Y+6, r20	; 0x06
	u8 Local_u8ErrorState = STD_TYPES_OK;
    3570:	81 e0       	ldi	r24, 0x01	; 1
    3572:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
    3574:	8e 81       	ldd	r24, Y+6	; 0x06
    3576:	9f 81       	ldd	r25, Y+7	; 0x07
    3578:	00 97       	sbiw	r24, 0x00	; 0
    357a:	99 f0       	breq	.+38     	; 0x35a2 <TIMER1_u8SetCallBack_CTC_A+0x52>
	{
		TIMER1_pfCTCA = Copy_pf;
    357c:	8e 81       	ldd	r24, Y+6	; 0x06
    357e:	9f 81       	ldd	r25, Y+7	; 0x07
    3580:	90 93 de 01 	sts	0x01DE, r25
    3584:	80 93 dd 01 	sts	0x01DD, r24
		TIMER1_u32CTCA_CounterValue = Copy_u32CounterValue;
    3588:	8a 81       	ldd	r24, Y+2	; 0x02
    358a:	9b 81       	ldd	r25, Y+3	; 0x03
    358c:	ac 81       	ldd	r26, Y+4	; 0x04
    358e:	bd 81       	ldd	r27, Y+5	; 0x05
    3590:	80 93 ff 01 	sts	0x01FF, r24
    3594:	90 93 00 02 	sts	0x0200, r25
    3598:	a0 93 01 02 	sts	0x0201, r26
    359c:	b0 93 02 02 	sts	0x0202, r27
    35a0:	01 c0       	rjmp	.+2      	; 0x35a4 <TIMER1_u8SetCallBack_CTC_A+0x54>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    35a2:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    35a4:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    35a6:	27 96       	adiw	r28, 0x07	; 7
    35a8:	0f b6       	in	r0, 0x3f	; 63
    35aa:	f8 94       	cli
    35ac:	de bf       	out	0x3e, r29	; 62
    35ae:	0f be       	out	0x3f, r0	; 63
    35b0:	cd bf       	out	0x3d, r28	; 61
    35b2:	cf 91       	pop	r28
    35b4:	df 91       	pop	r29
    35b6:	08 95       	ret

000035b8 <TIMER1_u8SetCallBack_CTC_B>:

///-------------------------------------------------------------------------------------------------------------------------

u8   TIMER1_u8SetCallBack_CTC_B		  (u32 Copy_u32CounterValue , void (*Copy_pf)(void))
{
    35b8:	df 93       	push	r29
    35ba:	cf 93       	push	r28
    35bc:	cd b7       	in	r28, 0x3d	; 61
    35be:	de b7       	in	r29, 0x3e	; 62
    35c0:	27 97       	sbiw	r28, 0x07	; 7
    35c2:	0f b6       	in	r0, 0x3f	; 63
    35c4:	f8 94       	cli
    35c6:	de bf       	out	0x3e, r29	; 62
    35c8:	0f be       	out	0x3f, r0	; 63
    35ca:	cd bf       	out	0x3d, r28	; 61
    35cc:	6a 83       	std	Y+2, r22	; 0x02
    35ce:	7b 83       	std	Y+3, r23	; 0x03
    35d0:	8c 83       	std	Y+4, r24	; 0x04
    35d2:	9d 83       	std	Y+5, r25	; 0x05
    35d4:	5f 83       	std	Y+7, r21	; 0x07
    35d6:	4e 83       	std	Y+6, r20	; 0x06
	u8 Local_u8ErrorState = STD_TYPES_OK;
    35d8:	81 e0       	ldi	r24, 0x01	; 1
    35da:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
    35dc:	8e 81       	ldd	r24, Y+6	; 0x06
    35de:	9f 81       	ldd	r25, Y+7	; 0x07
    35e0:	00 97       	sbiw	r24, 0x00	; 0
    35e2:	99 f0       	breq	.+38     	; 0x360a <TIMER1_u8SetCallBack_CTC_B+0x52>
	{
		TIMER1_pfCTCB = Copy_pf;
    35e4:	8e 81       	ldd	r24, Y+6	; 0x06
    35e6:	9f 81       	ldd	r25, Y+7	; 0x07
    35e8:	90 93 e0 01 	sts	0x01E0, r25
    35ec:	80 93 df 01 	sts	0x01DF, r24
		TIMER1_u32CTCB_CounterValue = Copy_u32CounterValue;
    35f0:	8a 81       	ldd	r24, Y+2	; 0x02
    35f2:	9b 81       	ldd	r25, Y+3	; 0x03
    35f4:	ac 81       	ldd	r26, Y+4	; 0x04
    35f6:	bd 81       	ldd	r27, Y+5	; 0x05
    35f8:	80 93 03 02 	sts	0x0203, r24
    35fc:	90 93 04 02 	sts	0x0204, r25
    3600:	a0 93 05 02 	sts	0x0205, r26
    3604:	b0 93 06 02 	sts	0x0206, r27
    3608:	01 c0       	rjmp	.+2      	; 0x360c <TIMER1_u8SetCallBack_CTC_B+0x54>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    360a:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    360c:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    360e:	27 96       	adiw	r28, 0x07	; 7
    3610:	0f b6       	in	r0, 0x3f	; 63
    3612:	f8 94       	cli
    3614:	de bf       	out	0x3e, r29	; 62
    3616:	0f be       	out	0x3f, r0	; 63
    3618:	cd bf       	out	0x3d, r28	; 61
    361a:	cf 91       	pop	r28
    361c:	df 91       	pop	r29
    361e:	08 95       	ret

00003620 <TIMER1_voidSetCompareMatchValue_A>:

///-------------------------------------------------------------------------------------------------------------------------

void TIMER1_voidSetCompareMatchValue_A(u16 Copy_u16OCR1AValue)
{
    3620:	df 93       	push	r29
    3622:	cf 93       	push	r28
    3624:	00 d0       	rcall	.+0      	; 0x3626 <TIMER1_voidSetCompareMatchValue_A+0x6>
    3626:	cd b7       	in	r28, 0x3d	; 61
    3628:	de b7       	in	r29, 0x3e	; 62
    362a:	9a 83       	std	Y+2, r25	; 0x02
    362c:	89 83       	std	Y+1, r24	; 0x01
	/*Set OCRA value*/
	TIMER1_u16_OCR1ALH_REG = Copy_u16OCR1AValue;
    362e:	ea e4       	ldi	r30, 0x4A	; 74
    3630:	f0 e0       	ldi	r31, 0x00	; 0
    3632:	89 81       	ldd	r24, Y+1	; 0x01
    3634:	9a 81       	ldd	r25, Y+2	; 0x02
    3636:	91 83       	std	Z+1, r25	; 0x01
    3638:	80 83       	st	Z, r24
	
}
    363a:	0f 90       	pop	r0
    363c:	0f 90       	pop	r0
    363e:	cf 91       	pop	r28
    3640:	df 91       	pop	r29
    3642:	08 95       	ret

00003644 <TIMER1_voidSetCompareMatchValue_B>:

///-------------------------------------------------------------------------------------------------------------------------

void TIMER1_voidSetCompareMatchValue_B(u16 Copy_u16OCR1BValue)
{
    3644:	df 93       	push	r29
    3646:	cf 93       	push	r28
    3648:	00 d0       	rcall	.+0      	; 0x364a <TIMER1_voidSetCompareMatchValue_B+0x6>
    364a:	cd b7       	in	r28, 0x3d	; 61
    364c:	de b7       	in	r29, 0x3e	; 62
    364e:	9a 83       	std	Y+2, r25	; 0x02
    3650:	89 83       	std	Y+1, r24	; 0x01
	/*Set OCRB value*/
	TIMER1_u16_OCR1BLH_REG = Copy_u16OCR1BValue;
    3652:	e8 e4       	ldi	r30, 0x48	; 72
    3654:	f0 e0       	ldi	r31, 0x00	; 0
    3656:	89 81       	ldd	r24, Y+1	; 0x01
    3658:	9a 81       	ldd	r25, Y+2	; 0x02
    365a:	91 83       	std	Z+1, r25	; 0x01
    365c:	80 83       	st	Z, r24
	
}
    365e:	0f 90       	pop	r0
    3660:	0f 90       	pop	r0
    3662:	cf 91       	pop	r28
    3664:	df 91       	pop	r29
    3666:	08 95       	ret

00003668 <TIMER1_voidSetPReloadValue>:

///-------------------------------------------------------------------------------------------------------------------------

void TIMER1_voidSetPReloadValue		  (u16 Copy_u16PreloadValue)
{
    3668:	df 93       	push	r29
    366a:	cf 93       	push	r28
    366c:	00 d0       	rcall	.+0      	; 0x366e <TIMER1_voidSetPReloadValue+0x6>
    366e:	cd b7       	in	r28, 0x3d	; 61
    3670:	de b7       	in	r29, 0x3e	; 62
    3672:	9a 83       	std	Y+2, r25	; 0x02
    3674:	89 83       	std	Y+1, r24	; 0x01
	/*Set Preload Value*/
	TIMER1_u16_TCNT1LH_REG = Copy_u16PreloadValue;
    3676:	ec e4       	ldi	r30, 0x4C	; 76
    3678:	f0 e0       	ldi	r31, 0x00	; 0
    367a:	89 81       	ldd	r24, Y+1	; 0x01
    367c:	9a 81       	ldd	r25, Y+2	; 0x02
    367e:	91 83       	std	Z+1, r25	; 0x01
    3680:	80 83       	st	Z, r24
	
	/*Send it to global variable*/
	TIMER1_u16PreloadValue = Copy_u16PreloadValue;
    3682:	89 81       	ldd	r24, Y+1	; 0x01
    3684:	9a 81       	ldd	r25, Y+2	; 0x02
    3686:	90 93 fe 01 	sts	0x01FE, r25
    368a:	80 93 fd 01 	sts	0x01FD, r24
	
}
    368e:	0f 90       	pop	r0
    3690:	0f 90       	pop	r0
    3692:	cf 91       	pop	r28
    3694:	df 91       	pop	r29
    3696:	08 95       	ret

00003698 <TIMER1_voidSetInputCaptureValue>:

///-------------------------------------------------------------------------------------------------------------------------

void TIMER1_voidSetInputCaptureValue   (u16 Copy_u16InputCaptureValue)
{
    3698:	df 93       	push	r29
    369a:	cf 93       	push	r28
    369c:	00 d0       	rcall	.+0      	; 0x369e <TIMER1_voidSetInputCaptureValue+0x6>
    369e:	cd b7       	in	r28, 0x3d	; 61
    36a0:	de b7       	in	r29, 0x3e	; 62
    36a2:	9a 83       	std	Y+2, r25	; 0x02
    36a4:	89 83       	std	Y+1, r24	; 0x01
	/*Set ICR1 value */
	TIMER1_u16_ICR1LH_REG = Copy_u16InputCaptureValue;
    36a6:	e6 e4       	ldi	r30, 0x46	; 70
    36a8:	f0 e0       	ldi	r31, 0x00	; 0
    36aa:	89 81       	ldd	r24, Y+1	; 0x01
    36ac:	9a 81       	ldd	r25, Y+2	; 0x02
    36ae:	91 83       	std	Z+1, r25	; 0x01
    36b0:	80 83       	st	Z, r24
}
    36b2:	0f 90       	pop	r0
    36b4:	0f 90       	pop	r0
    36b6:	cf 91       	pop	r28
    36b8:	df 91       	pop	r29
    36ba:	08 95       	ret

000036bc <TIMER1_u8GetCounterValue>:

///-------------------------------------------------------------------------------------------------------------------------

u8   TIMER1_u8GetCounterValue(u16 * Copy_pu16CounterValue)
{
    36bc:	df 93       	push	r29
    36be:	cf 93       	push	r28
    36c0:	00 d0       	rcall	.+0      	; 0x36c2 <TIMER1_u8GetCounterValue+0x6>
    36c2:	0f 92       	push	r0
    36c4:	cd b7       	in	r28, 0x3d	; 61
    36c6:	de b7       	in	r29, 0x3e	; 62
    36c8:	9b 83       	std	Y+3, r25	; 0x03
    36ca:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    36cc:	81 e0       	ldi	r24, 0x01	; 1
    36ce:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu16CounterValue != NULL)
    36d0:	8a 81       	ldd	r24, Y+2	; 0x02
    36d2:	9b 81       	ldd	r25, Y+3	; 0x03
    36d4:	00 97       	sbiw	r24, 0x00	; 0
    36d6:	49 f0       	breq	.+18     	; 0x36ea <TIMER1_u8GetCounterValue+0x2e>
	{
		*Copy_pu16CounterValue = TIMER1_u16_TCNT1LH_REG;
    36d8:	ec e4       	ldi	r30, 0x4C	; 76
    36da:	f0 e0       	ldi	r31, 0x00	; 0
    36dc:	80 81       	ld	r24, Z
    36de:	91 81       	ldd	r25, Z+1	; 0x01
    36e0:	ea 81       	ldd	r30, Y+2	; 0x02
    36e2:	fb 81       	ldd	r31, Y+3	; 0x03
    36e4:	91 83       	std	Z+1, r25	; 0x01
    36e6:	80 83       	st	Z, r24
    36e8:	01 c0       	rjmp	.+2      	; 0x36ec <TIMER1_u8GetCounterValue+0x30>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    36ea:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    36ec:	89 81       	ldd	r24, Y+1	; 0x01
}
    36ee:	0f 90       	pop	r0
    36f0:	0f 90       	pop	r0
    36f2:	0f 90       	pop	r0
    36f4:	cf 91       	pop	r28
    36f6:	df 91       	pop	r29
    36f8:	08 95       	ret

000036fa <TIMER1_voidHW_ICUInit>:

///-------------------------------------------------------------------------------------------------------------------------

void TIMER1_voidHW_ICUInit(void)
{
    36fa:	df 93       	push	r29
    36fc:	cf 93       	push	r28
    36fe:	cd b7       	in	r28, 0x3d	; 61
    3700:	de b7       	in	r29, 0x3e	; 62
	/*Select Trigger source for ICU interrupt as raising edge*/
	SET_BIT(TIMER1_u8_TCCR1B_REG , TIMER1_TCCR1B_ICES1_BIT);		//Will be changed in ISR function
    3702:	ae e4       	ldi	r26, 0x4E	; 78
    3704:	b0 e0       	ldi	r27, 0x00	; 0
    3706:	ee e4       	ldi	r30, 0x4E	; 78
    3708:	f0 e0       	ldi	r31, 0x00	; 0
    370a:	80 81       	ld	r24, Z
    370c:	80 64       	ori	r24, 0x40	; 64
    370e:	8c 93       	st	X, r24

	/*INPUT_CAPTURE_INTERRUPT_ENABLE*/
	SET_BIT(TIMER0_u8_TIMSK_REG , TIMER1_TIMSK_TICIE1_BIT);
    3710:	a9 e5       	ldi	r26, 0x59	; 89
    3712:	b0 e0       	ldi	r27, 0x00	; 0
    3714:	e9 e5       	ldi	r30, 0x59	; 89
    3716:	f0 e0       	ldi	r31, 0x00	; 0
    3718:	80 81       	ld	r24, Z
    371a:	80 62       	ori	r24, 0x20	; 32
    371c:	8c 93       	st	X, r24
}
    371e:	cf 91       	pop	r28
    3720:	df 91       	pop	r29
    3722:	08 95       	ret

00003724 <TIMER1_u8GetPWMOnPeriod>:

///-------------------------------------------------------------------------------------------------------------------------

u8   TIMER1_u8GetPWMOnPeriod		   (u16 * Copy_pu16OnTime)
{
    3724:	df 93       	push	r29
    3726:	cf 93       	push	r28
    3728:	00 d0       	rcall	.+0      	; 0x372a <TIMER1_u8GetPWMOnPeriod+0x6>
    372a:	0f 92       	push	r0
    372c:	cd b7       	in	r28, 0x3d	; 61
    372e:	de b7       	in	r29, 0x3e	; 62
    3730:	9b 83       	std	Y+3, r25	; 0x03
    3732:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    3734:	81 e0       	ldi	r24, 0x01	; 1
    3736:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu16OnTime != NULL)
    3738:	8a 81       	ldd	r24, Y+2	; 0x02
    373a:	9b 81       	ldd	r25, Y+3	; 0x03
    373c:	00 97       	sbiw	r24, 0x00	; 0
    373e:	49 f0       	breq	.+18     	; 0x3752 <TIMER1_u8GetPWMOnPeriod+0x2e>
	{
		*Copy_pu16OnTime = TIMER1_u16OnPeriod;
    3740:	80 91 e1 01 	lds	r24, 0x01E1
    3744:	90 91 e2 01 	lds	r25, 0x01E2
    3748:	ea 81       	ldd	r30, Y+2	; 0x02
    374a:	fb 81       	ldd	r31, Y+3	; 0x03
    374c:	91 83       	std	Z+1, r25	; 0x01
    374e:	80 83       	st	Z, r24
    3750:	01 c0       	rjmp	.+2      	; 0x3754 <TIMER1_u8GetPWMOnPeriod+0x30>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    3752:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return Local_u8ErrorState;
    3754:	89 81       	ldd	r24, Y+1	; 0x01
}
    3756:	0f 90       	pop	r0
    3758:	0f 90       	pop	r0
    375a:	0f 90       	pop	r0
    375c:	cf 91       	pop	r28
    375e:	df 91       	pop	r29
    3760:	08 95       	ret

00003762 <TIMER1_u8GetPWMTotalPeriod>:

///-------------------------------------------------------------------------------------------------------------------------

u8   TIMER1_u8GetPWMTotalPeriod		   (u32 * Copy_pu32TotalTime)
{
    3762:	df 93       	push	r29
    3764:	cf 93       	push	r28
    3766:	00 d0       	rcall	.+0      	; 0x3768 <TIMER1_u8GetPWMTotalPeriod+0x6>
    3768:	0f 92       	push	r0
    376a:	cd b7       	in	r28, 0x3d	; 61
    376c:	de b7       	in	r29, 0x3e	; 62
    376e:	9b 83       	std	Y+3, r25	; 0x03
    3770:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    3772:	81 e0       	ldi	r24, 0x01	; 1
    3774:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu32TotalTime != NULL)
    3776:	8a 81       	ldd	r24, Y+2	; 0x02
    3778:	9b 81       	ldd	r25, Y+3	; 0x03
    377a:	00 97       	sbiw	r24, 0x00	; 0
    377c:	a1 f0       	breq	.+40     	; 0x37a6 <TIMER1_u8GetPWMTotalPeriod+0x44>
	{
		*Copy_pu32TotalTime = TIMER1_u16OnPeriod + TIMER1_u16OffPeriod;
    377e:	20 91 e1 01 	lds	r18, 0x01E1
    3782:	30 91 e2 01 	lds	r19, 0x01E2
    3786:	80 91 e3 01 	lds	r24, 0x01E3
    378a:	90 91 e4 01 	lds	r25, 0x01E4
    378e:	82 0f       	add	r24, r18
    3790:	93 1f       	adc	r25, r19
    3792:	cc 01       	movw	r24, r24
    3794:	a0 e0       	ldi	r26, 0x00	; 0
    3796:	b0 e0       	ldi	r27, 0x00	; 0
    3798:	ea 81       	ldd	r30, Y+2	; 0x02
    379a:	fb 81       	ldd	r31, Y+3	; 0x03
    379c:	80 83       	st	Z, r24
    379e:	91 83       	std	Z+1, r25	; 0x01
    37a0:	a2 83       	std	Z+2, r26	; 0x02
    37a2:	b3 83       	std	Z+3, r27	; 0x03
    37a4:	01 c0       	rjmp	.+2      	; 0x37a8 <TIMER1_u8GetPWMTotalPeriod+0x46>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    37a6:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return Local_u8ErrorState;
    37a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    37aa:	0f 90       	pop	r0
    37ac:	0f 90       	pop	r0
    37ae:	0f 90       	pop	r0
    37b0:	cf 91       	pop	r28
    37b2:	df 91       	pop	r29
    37b4:	08 95       	ret

000037b6 <TIMER1_u8GerDutyCycle>:

///-------------------------------------------------------------------------------------------------------------------------

u8	 TIMER1_u8GerDutyCycle			   (u8 * Copy_pu8DutyCycle)
{
    37b6:	df 93       	push	r29
    37b8:	cf 93       	push	r28
    37ba:	00 d0       	rcall	.+0      	; 0x37bc <TIMER1_u8GerDutyCycle+0x6>
    37bc:	0f 92       	push	r0
    37be:	cd b7       	in	r28, 0x3d	; 61
    37c0:	de b7       	in	r29, 0x3e	; 62
    37c2:	9b 83       	std	Y+3, r25	; 0x03
    37c4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    37c6:	81 e0       	ldi	r24, 0x01	; 1
    37c8:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu8DutyCycle != NULL)
    37ca:	8a 81       	ldd	r24, Y+2	; 0x02
    37cc:	9b 81       	ldd	r25, Y+3	; 0x03
    37ce:	00 97       	sbiw	r24, 0x00	; 0
    37d0:	31 f1       	breq	.+76     	; 0x381e <TIMER1_u8GerDutyCycle+0x68>
	{
		*Copy_pu8DutyCycle = (u8)(TIMER1_u16OnPeriod * 100UL)/(TIMER1_u16OnPeriod + TIMER1_u16OffPeriod);
    37d2:	80 91 e1 01 	lds	r24, 0x01E1
    37d6:	90 91 e2 01 	lds	r25, 0x01E2
    37da:	cc 01       	movw	r24, r24
    37dc:	a0 e0       	ldi	r26, 0x00	; 0
    37de:	b0 e0       	ldi	r27, 0x00	; 0
    37e0:	24 e6       	ldi	r18, 0x64	; 100
    37e2:	30 e0       	ldi	r19, 0x00	; 0
    37e4:	40 e0       	ldi	r20, 0x00	; 0
    37e6:	50 e0       	ldi	r21, 0x00	; 0
    37e8:	bc 01       	movw	r22, r24
    37ea:	cd 01       	movw	r24, r26
    37ec:	0e 94 19 2a 	call	0x5432	; 0x5432 <__mulsi3>
    37f0:	dc 01       	movw	r26, r24
    37f2:	cb 01       	movw	r24, r22
    37f4:	48 2f       	mov	r20, r24
    37f6:	50 e0       	ldi	r21, 0x00	; 0
    37f8:	20 91 e1 01 	lds	r18, 0x01E1
    37fc:	30 91 e2 01 	lds	r19, 0x01E2
    3800:	80 91 e3 01 	lds	r24, 0x01E3
    3804:	90 91 e4 01 	lds	r25, 0x01E4
    3808:	28 0f       	add	r18, r24
    380a:	39 1f       	adc	r19, r25
    380c:	ca 01       	movw	r24, r20
    380e:	b9 01       	movw	r22, r18
    3810:	0e 94 38 2a 	call	0x5470	; 0x5470 <__udivmodhi4>
    3814:	cb 01       	movw	r24, r22
    3816:	ea 81       	ldd	r30, Y+2	; 0x02
    3818:	fb 81       	ldd	r31, Y+3	; 0x03
    381a:	80 83       	st	Z, r24
    381c:	01 c0       	rjmp	.+2      	; 0x3820 <TIMER1_u8GerDutyCycle+0x6a>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    381e:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return Local_u8ErrorState;
    3820:	89 81       	ldd	r24, Y+1	; 0x01
}
    3822:	0f 90       	pop	r0
    3824:	0f 90       	pop	r0
    3826:	0f 90       	pop	r0
    3828:	cf 91       	pop	r28
    382a:	df 91       	pop	r29
    382c:	08 95       	ret

0000382e <TIMER1_voidInit>:

///-------------------------------------------------------------------------------------------------------------------------
u8   TIMER1_voidInit(void)
{
    382e:	df 93       	push	r29
    3830:	cf 93       	push	r28
    3832:	0f 92       	push	r0
    3834:	cd b7       	in	r28, 0x3d	; 61
    3836:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8ErrorState = STD_TYPES_OK;
    3838:	81 e0       	ldi	r24, 0x01	; 1
    383a:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(TIMER1_u8_TCCR1A_REG , TIMER1_TCCR1A_WGM10_BIT);	
		CLR_BIT(TIMER1_u8_TCCR1A_REG , TIMER1_TCCR1A_WGM11_BIT);	
		SET_BIT(TIMER1_u8_TCCR1B_REG , TIMER1_TCCR1B_WGM12_BIT);
		SET_BIT(TIMER1_u8_TCCR1B_REG , TIMER1_TCCR1B_WGM13_BIT);																											
	#elif TIMER1_u16_INITIAL_WAVE_GENERATION_MODE == TIMER1_u16_INITIAL_FAST_PWM_TOP_ICR1                           //1110
		CLR_BIT(TIMER1_u8_TCCR1A_REG , TIMER1_TCCR1A_WGM10_BIT);	
    383c:	af e4       	ldi	r26, 0x4F	; 79
    383e:	b0 e0       	ldi	r27, 0x00	; 0
    3840:	ef e4       	ldi	r30, 0x4F	; 79
    3842:	f0 e0       	ldi	r31, 0x00	; 0
    3844:	80 81       	ld	r24, Z
    3846:	8e 7f       	andi	r24, 0xFE	; 254
    3848:	8c 93       	st	X, r24
		SET_BIT(TIMER1_u8_TCCR1A_REG , TIMER1_TCCR1A_WGM11_BIT);	
    384a:	af e4       	ldi	r26, 0x4F	; 79
    384c:	b0 e0       	ldi	r27, 0x00	; 0
    384e:	ef e4       	ldi	r30, 0x4F	; 79
    3850:	f0 e0       	ldi	r31, 0x00	; 0
    3852:	80 81       	ld	r24, Z
    3854:	82 60       	ori	r24, 0x02	; 2
    3856:	8c 93       	st	X, r24
		SET_BIT(TIMER1_u8_TCCR1B_REG , TIMER1_TCCR1B_WGM12_BIT);
    3858:	ae e4       	ldi	r26, 0x4E	; 78
    385a:	b0 e0       	ldi	r27, 0x00	; 0
    385c:	ee e4       	ldi	r30, 0x4E	; 78
    385e:	f0 e0       	ldi	r31, 0x00	; 0
    3860:	80 81       	ld	r24, Z
    3862:	88 60       	ori	r24, 0x08	; 8
    3864:	8c 93       	st	X, r24
		SET_BIT(TIMER1_u8_TCCR1B_REG , TIMER1_TCCR1B_WGM13_BIT);																											
    3866:	ae e4       	ldi	r26, 0x4E	; 78
    3868:	b0 e0       	ldi	r27, 0x00	; 0
    386a:	ee e4       	ldi	r30, 0x4E	; 78
    386c:	f0 e0       	ldi	r31, 0x00	; 0
    386e:	80 81       	ld	r24, Z
    3870:	80 61       	ori	r24, 0x10	; 16
    3872:	8c 93       	st	X, r24
			}
			break;
		case TIMER1_u16_INITIAL_FAST_PWM_CLR_OC1A_ON_COMPARE_MATCH_SET_OC1A_AT_TOP:
			if((TIMER1_u16_INITIAL_WAVE_GENERATION_MODE == TIMER1_u16_INITIAL_FAST_PWM_8BIT) || (TIMER1_u16_INITIAL_WAVE_GENERATION_MODE == TIMER1_u16_INITIAL_FAST_PWM_9BIT) || (TIMER1_u16_INITIAL_WAVE_GENERATION_MODE == TIMER1_u16_INITIAL_FAST_PWM_10BIT) || (TIMER1_u16_INITIAL_WAVE_GENERATION_MODE == TIMER1_u16_INITIAL_FAST_PWM_TOP_ICR1) || (TIMER1_u16_INITIAL_WAVE_GENERATION_MODE == TIMER1_u16_INITIAL_FAST_PWM_TOP_OCR1A))
			{
				SET_BIT(TIMER1_u8_TCCR1A_REG , TIMER1_TCCR1A_COM1A1_BIT);
    3874:	af e4       	ldi	r26, 0x4F	; 79
    3876:	b0 e0       	ldi	r27, 0x00	; 0
    3878:	ef e4       	ldi	r30, 0x4F	; 79
    387a:	f0 e0       	ldi	r31, 0x00	; 0
    387c:	80 81       	ld	r24, Z
    387e:	80 68       	ori	r24, 0x80	; 128
    3880:	8c 93       	st	X, r24
				CLR_BIT(TIMER1_u8_TCCR1A_REG , TIMER1_TCCR1A_COM1A0_BIT);
    3882:	af e4       	ldi	r26, 0x4F	; 79
    3884:	b0 e0       	ldi	r27, 0x00	; 0
    3886:	ef e4       	ldi	r30, 0x4F	; 79
    3888:	f0 e0       	ldi	r31, 0x00	; 0
    388a:	80 81       	ld	r24, Z
    388c:	8f 7b       	andi	r24, 0xBF	; 191
    388e:	8c 93       	st	X, r24
				CLR_BIT(TIMER1_u8_TCCR1A_REG , TIMER1_TCCR1A_COM1B1_BIT);
				CLR_BIT(TIMER1_u8_TCCR1A_REG , TIMER1_TCCR1A_COM1B0_BIT);
			}
			else
			{
				Local_u8ErrorState = STD_TYPES_NOK;
    3890:	19 82       	std	Y+1, r1	; 0x01
	//	CLR_BIT(TIMER0_u8_TIMSK_REG , TIMER1_TIMSK_TOIE1_BIT);
	//	CLR_BIT(TIMER0_u8_TIMSK_REG , TIMER1_TIMSK_OCIE1B_BIT);
	//	CLR_BIT(TIMER0_u8_TIMSK_REG , TIMER1_TIMSK_OCIE1A_BIT);
	//	SET_BIT(TIMER0_u8_TIMSK_REG , TIMER1_TIMSK_TICIE1_BIT);
	#elif  TIMER1_u8_INITIAL_INTERRUPT_ENABLE == TIMER1_u16_INITIAL_NO_ENABLED_INTERRUPTS
		CLR_BIT(TIMER0_u8_TIMSK_REG , TIMER1_TIMSK_TOIE1_BIT);
    3892:	a9 e5       	ldi	r26, 0x59	; 89
    3894:	b0 e0       	ldi	r27, 0x00	; 0
    3896:	e9 e5       	ldi	r30, 0x59	; 89
    3898:	f0 e0       	ldi	r31, 0x00	; 0
    389a:	80 81       	ld	r24, Z
    389c:	8b 7f       	andi	r24, 0xFB	; 251
    389e:	8c 93       	st	X, r24
		CLR_BIT(TIMER0_u8_TIMSK_REG , TIMER1_TIMSK_OCIE1B_BIT);
    38a0:	a9 e5       	ldi	r26, 0x59	; 89
    38a2:	b0 e0       	ldi	r27, 0x00	; 0
    38a4:	e9 e5       	ldi	r30, 0x59	; 89
    38a6:	f0 e0       	ldi	r31, 0x00	; 0
    38a8:	80 81       	ld	r24, Z
    38aa:	87 7f       	andi	r24, 0xF7	; 247
    38ac:	8c 93       	st	X, r24
		CLR_BIT(TIMER0_u8_TIMSK_REG , TIMER1_TIMSK_OCIE1A_BIT);
    38ae:	a9 e5       	ldi	r26, 0x59	; 89
    38b0:	b0 e0       	ldi	r27, 0x00	; 0
    38b2:	e9 e5       	ldi	r30, 0x59	; 89
    38b4:	f0 e0       	ldi	r31, 0x00	; 0
    38b6:	80 81       	ld	r24, Z
    38b8:	8f 7e       	andi	r24, 0xEF	; 239
    38ba:	8c 93       	st	X, r24
		CLR_BIT(TIMER0_u8_TIMSK_REG , TIMER1_TIMSK_TICIE1_BIT);
    38bc:	a9 e5       	ldi	r26, 0x59	; 89
    38be:	b0 e0       	ldi	r27, 0x00	; 0
    38c0:	e9 e5       	ldi	r30, 0x59	; 89
    38c2:	f0 e0       	ldi	r31, 0x00	; 0
    38c4:	80 81       	ld	r24, Z
    38c6:	8f 7d       	andi	r24, 0xDF	; 223
    38c8:	8c 93       	st	X, r24
	#elif TIMER1_u16_INITIAL_CLOCK_SELECTION == TIMER1_u16_INITIAL_NO_PRESCALLING							//001
		CLR_BIT(TIMER1_u8_TCCR1B_REG , TIMER1_TCCR1B_CS12_BIT);					
		CLR_BIT(TIMER1_u8_TCCR1B_REG , TIMER1_TCCR1B_CS11_BIT);					
		SET_BIT(TIMER1_u8_TCCR1B_REG , TIMER1_TCCR1B_CS10_BIT);					
	#elif TIMER1_u16_INITIAL_CLOCK_SELECTION == TIMER1_u16_INITIAL_PRESCALER_8								//010
		CLR_BIT(TIMER1_u8_TCCR1B_REG , TIMER1_TCCR1B_CS12_BIT);					
    38ca:	ae e4       	ldi	r26, 0x4E	; 78
    38cc:	b0 e0       	ldi	r27, 0x00	; 0
    38ce:	ee e4       	ldi	r30, 0x4E	; 78
    38d0:	f0 e0       	ldi	r31, 0x00	; 0
    38d2:	80 81       	ld	r24, Z
    38d4:	8b 7f       	andi	r24, 0xFB	; 251
    38d6:	8c 93       	st	X, r24
		SET_BIT(TIMER1_u8_TCCR1B_REG , TIMER1_TCCR1B_CS11_BIT);					
    38d8:	ae e4       	ldi	r26, 0x4E	; 78
    38da:	b0 e0       	ldi	r27, 0x00	; 0
    38dc:	ee e4       	ldi	r30, 0x4E	; 78
    38de:	f0 e0       	ldi	r31, 0x00	; 0
    38e0:	80 81       	ld	r24, Z
    38e2:	82 60       	ori	r24, 0x02	; 2
    38e4:	8c 93       	st	X, r24
		CLR_BIT(TIMER1_u8_TCCR1B_REG , TIMER1_TCCR1B_CS10_BIT);					
    38e6:	ae e4       	ldi	r26, 0x4E	; 78
    38e8:	b0 e0       	ldi	r27, 0x00	; 0
    38ea:	ee e4       	ldi	r30, 0x4E	; 78
    38ec:	f0 e0       	ldi	r31, 0x00	; 0
    38ee:	80 81       	ld	r24, Z
    38f0:	8e 7f       	andi	r24, 0xFE	; 254
    38f2:	8c 93       	st	X, r24
	#elif TIMER1_u16_INITIAL_CLOCK_SELECTION == TIMER1_u16_INITIAL_EXTERNAL_CLOCK_SOURCE_RISING_EDGE		//111
		SET_BIT(TIMER1_u8_TCCR1B_REG , TIMER1_TCCR1B_CS12_BIT);
		SET_BIT(TIMER1_u8_TCCR1B_REG , TIMER1_TCCR1B_CS11_BIT);
		SET_BIT(TIMER1_u8_TCCR1B_REG , TIMER1_TCCR1B_CS10_BIT);
	#endif
		return Local_u8ErrorState;
    38f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    38f6:	0f 90       	pop	r0
    38f8:	cf 91       	pop	r28
    38fa:	df 91       	pop	r29
    38fc:	08 95       	ret

000038fe <__vector_9>:
///-------------------------------------------------------------------------------------------------------------------------

/*Prototype for ISR function of Timer1 OV*/
void __vector_9(void)			__attribute__((signal));
void __vector_9(void)
{
    38fe:	1f 92       	push	r1
    3900:	0f 92       	push	r0
    3902:	0f b6       	in	r0, 0x3f	; 63
    3904:	0f 92       	push	r0
    3906:	11 24       	eor	r1, r1
    3908:	2f 93       	push	r18
    390a:	3f 93       	push	r19
    390c:	4f 93       	push	r20
    390e:	5f 93       	push	r21
    3910:	6f 93       	push	r22
    3912:	7f 93       	push	r23
    3914:	8f 93       	push	r24
    3916:	9f 93       	push	r25
    3918:	af 93       	push	r26
    391a:	bf 93       	push	r27
    391c:	ef 93       	push	r30
    391e:	ff 93       	push	r31
    3920:	df 93       	push	r29
    3922:	cf 93       	push	r28
    3924:	cd b7       	in	r28, 0x3d	; 61
    3926:	de b7       	in	r29, 0x3e	; 62
	static u32 Local_u32CounterOVF = 0;
	Local_u32CounterOVF++;
    3928:	80 91 e5 01 	lds	r24, 0x01E5
    392c:	90 91 e6 01 	lds	r25, 0x01E6
    3930:	a0 91 e7 01 	lds	r26, 0x01E7
    3934:	b0 91 e8 01 	lds	r27, 0x01E8
    3938:	01 96       	adiw	r24, 0x01	; 1
    393a:	a1 1d       	adc	r26, r1
    393c:	b1 1d       	adc	r27, r1
    393e:	80 93 e5 01 	sts	0x01E5, r24
    3942:	90 93 e6 01 	sts	0x01E6, r25
    3946:	a0 93 e7 01 	sts	0x01E7, r26
    394a:	b0 93 e8 01 	sts	0x01E8, r27
	if(Local_u32CounterOVF == TIMER1_u32OV_CounterValue)
    394e:	20 91 e5 01 	lds	r18, 0x01E5
    3952:	30 91 e6 01 	lds	r19, 0x01E6
    3956:	40 91 e7 01 	lds	r20, 0x01E7
    395a:	50 91 e8 01 	lds	r21, 0x01E8
    395e:	80 91 f9 01 	lds	r24, 0x01F9
    3962:	90 91 fa 01 	lds	r25, 0x01FA
    3966:	a0 91 fb 01 	lds	r26, 0x01FB
    396a:	b0 91 fc 01 	lds	r27, 0x01FC
    396e:	28 17       	cp	r18, r24
    3970:	39 07       	cpc	r19, r25
    3972:	4a 07       	cpc	r20, r26
    3974:	5b 07       	cpc	r21, r27
    3976:	d9 f4       	brne	.+54     	; 0x39ae <__vector_9+0xb0>
	{

		/*Update Preload Value*/
		TIMER1_u16_TCNT1LH_REG = TIMER1_u16PreloadValue;
    3978:	ec e4       	ldi	r30, 0x4C	; 76
    397a:	f0 e0       	ldi	r31, 0x00	; 0
    397c:	80 91 fd 01 	lds	r24, 0x01FD
    3980:	90 91 fe 01 	lds	r25, 0x01FE
    3984:	91 83       	std	Z+1, r25	; 0x01
    3986:	80 83       	st	Z, r24

		/*Update OV Counter*/
		Local_u32CounterOVF = 0;
    3988:	10 92 e5 01 	sts	0x01E5, r1
    398c:	10 92 e6 01 	sts	0x01E6, r1
    3990:	10 92 e7 01 	sts	0x01E7, r1
    3994:	10 92 e8 01 	sts	0x01E8, r1
		
		/*Call the application function*/
		if(TIMER1_pfOV != NULL)
    3998:	80 91 db 01 	lds	r24, 0x01DB
    399c:	90 91 dc 01 	lds	r25, 0x01DC
    39a0:	00 97       	sbiw	r24, 0x00	; 0
    39a2:	29 f0       	breq	.+10     	; 0x39ae <__vector_9+0xb0>
		{
			/*Dereferencing of the pointer*/
			TIMER1_pfOV();
    39a4:	e0 91 db 01 	lds	r30, 0x01DB
    39a8:	f0 91 dc 01 	lds	r31, 0x01DC
    39ac:	09 95       	icall
		}
	}
}
    39ae:	cf 91       	pop	r28
    39b0:	df 91       	pop	r29
    39b2:	ff 91       	pop	r31
    39b4:	ef 91       	pop	r30
    39b6:	bf 91       	pop	r27
    39b8:	af 91       	pop	r26
    39ba:	9f 91       	pop	r25
    39bc:	8f 91       	pop	r24
    39be:	7f 91       	pop	r23
    39c0:	6f 91       	pop	r22
    39c2:	5f 91       	pop	r21
    39c4:	4f 91       	pop	r20
    39c6:	3f 91       	pop	r19
    39c8:	2f 91       	pop	r18
    39ca:	0f 90       	pop	r0
    39cc:	0f be       	out	0x3f, r0	; 63
    39ce:	0f 90       	pop	r0
    39d0:	1f 90       	pop	r1
    39d2:	18 95       	reti

000039d4 <__vector_7>:
//-------------------------------------------------------------------------------------------------------------------------

/*Prototype for ISR function of Timer1 CTC A*/
void __vector_7(void)			__attribute__((signal));
void __vector_7(void)
{
    39d4:	1f 92       	push	r1
    39d6:	0f 92       	push	r0
    39d8:	0f b6       	in	r0, 0x3f	; 63
    39da:	0f 92       	push	r0
    39dc:	11 24       	eor	r1, r1
    39de:	2f 93       	push	r18
    39e0:	3f 93       	push	r19
    39e2:	4f 93       	push	r20
    39e4:	5f 93       	push	r21
    39e6:	6f 93       	push	r22
    39e8:	7f 93       	push	r23
    39ea:	8f 93       	push	r24
    39ec:	9f 93       	push	r25
    39ee:	af 93       	push	r26
    39f0:	bf 93       	push	r27
    39f2:	ef 93       	push	r30
    39f4:	ff 93       	push	r31
    39f6:	df 93       	push	r29
    39f8:	cf 93       	push	r28
    39fa:	cd b7       	in	r28, 0x3d	; 61
    39fc:	de b7       	in	r29, 0x3e	; 62
	static u32 Local_u32CounterCTCA = 0;
	Local_u32CounterCTCA++;
    39fe:	80 91 e9 01 	lds	r24, 0x01E9
    3a02:	90 91 ea 01 	lds	r25, 0x01EA
    3a06:	a0 91 eb 01 	lds	r26, 0x01EB
    3a0a:	b0 91 ec 01 	lds	r27, 0x01EC
    3a0e:	01 96       	adiw	r24, 0x01	; 1
    3a10:	a1 1d       	adc	r26, r1
    3a12:	b1 1d       	adc	r27, r1
    3a14:	80 93 e9 01 	sts	0x01E9, r24
    3a18:	90 93 ea 01 	sts	0x01EA, r25
    3a1c:	a0 93 eb 01 	sts	0x01EB, r26
    3a20:	b0 93 ec 01 	sts	0x01EC, r27
	if(Local_u32CounterCTCA == TIMER1_u32CTCA_CounterValue)
    3a24:	20 91 e9 01 	lds	r18, 0x01E9
    3a28:	30 91 ea 01 	lds	r19, 0x01EA
    3a2c:	40 91 eb 01 	lds	r20, 0x01EB
    3a30:	50 91 ec 01 	lds	r21, 0x01EC
    3a34:	80 91 ff 01 	lds	r24, 0x01FF
    3a38:	90 91 00 02 	lds	r25, 0x0200
    3a3c:	a0 91 01 02 	lds	r26, 0x0201
    3a40:	b0 91 02 02 	lds	r27, 0x0202
    3a44:	28 17       	cp	r18, r24
    3a46:	39 07       	cpc	r19, r25
    3a48:	4a 07       	cpc	r20, r26
    3a4a:	5b 07       	cpc	r21, r27
    3a4c:	99 f4       	brne	.+38     	; 0x3a74 <__vector_7+0xa0>
	{
		/*Update OV Counter*/
		Local_u32CounterCTCA = 0;
    3a4e:	10 92 e9 01 	sts	0x01E9, r1
    3a52:	10 92 ea 01 	sts	0x01EA, r1
    3a56:	10 92 eb 01 	sts	0x01EB, r1
    3a5a:	10 92 ec 01 	sts	0x01EC, r1
		
		/*Call the application function*/
		if(TIMER1_pfCTCA != NULL)
    3a5e:	80 91 dd 01 	lds	r24, 0x01DD
    3a62:	90 91 de 01 	lds	r25, 0x01DE
    3a66:	00 97       	sbiw	r24, 0x00	; 0
    3a68:	29 f0       	breq	.+10     	; 0x3a74 <__vector_7+0xa0>
		{
			/*Dereferencing of the pointer*/
			TIMER1_pfCTCA();
    3a6a:	e0 91 dd 01 	lds	r30, 0x01DD
    3a6e:	f0 91 de 01 	lds	r31, 0x01DE
    3a72:	09 95       	icall
		}
	}
	
}
    3a74:	cf 91       	pop	r28
    3a76:	df 91       	pop	r29
    3a78:	ff 91       	pop	r31
    3a7a:	ef 91       	pop	r30
    3a7c:	bf 91       	pop	r27
    3a7e:	af 91       	pop	r26
    3a80:	9f 91       	pop	r25
    3a82:	8f 91       	pop	r24
    3a84:	7f 91       	pop	r23
    3a86:	6f 91       	pop	r22
    3a88:	5f 91       	pop	r21
    3a8a:	4f 91       	pop	r20
    3a8c:	3f 91       	pop	r19
    3a8e:	2f 91       	pop	r18
    3a90:	0f 90       	pop	r0
    3a92:	0f be       	out	0x3f, r0	; 63
    3a94:	0f 90       	pop	r0
    3a96:	1f 90       	pop	r1
    3a98:	18 95       	reti

00003a9a <__vector_8>:
///-------------------------------------------------------------------------------------------------------------------------

/*Prototype for ISR function of Timer1 CTC B*/
void __vector_8(void)			__attribute__((signal));
void __vector_8(void)
{
    3a9a:	1f 92       	push	r1
    3a9c:	0f 92       	push	r0
    3a9e:	0f b6       	in	r0, 0x3f	; 63
    3aa0:	0f 92       	push	r0
    3aa2:	11 24       	eor	r1, r1
    3aa4:	2f 93       	push	r18
    3aa6:	3f 93       	push	r19
    3aa8:	4f 93       	push	r20
    3aaa:	5f 93       	push	r21
    3aac:	6f 93       	push	r22
    3aae:	7f 93       	push	r23
    3ab0:	8f 93       	push	r24
    3ab2:	9f 93       	push	r25
    3ab4:	af 93       	push	r26
    3ab6:	bf 93       	push	r27
    3ab8:	ef 93       	push	r30
    3aba:	ff 93       	push	r31
    3abc:	df 93       	push	r29
    3abe:	cf 93       	push	r28
    3ac0:	cd b7       	in	r28, 0x3d	; 61
    3ac2:	de b7       	in	r29, 0x3e	; 62
	static u32 Local_u32CounterCTCB = 0;
	Local_u32CounterCTCB++;
    3ac4:	80 91 ed 01 	lds	r24, 0x01ED
    3ac8:	90 91 ee 01 	lds	r25, 0x01EE
    3acc:	a0 91 ef 01 	lds	r26, 0x01EF
    3ad0:	b0 91 f0 01 	lds	r27, 0x01F0
    3ad4:	01 96       	adiw	r24, 0x01	; 1
    3ad6:	a1 1d       	adc	r26, r1
    3ad8:	b1 1d       	adc	r27, r1
    3ada:	80 93 ed 01 	sts	0x01ED, r24
    3ade:	90 93 ee 01 	sts	0x01EE, r25
    3ae2:	a0 93 ef 01 	sts	0x01EF, r26
    3ae6:	b0 93 f0 01 	sts	0x01F0, r27
	if(Local_u32CounterCTCB == TIMER1_u32CTCB_CounterValue)
    3aea:	20 91 ed 01 	lds	r18, 0x01ED
    3aee:	30 91 ee 01 	lds	r19, 0x01EE
    3af2:	40 91 ef 01 	lds	r20, 0x01EF
    3af6:	50 91 f0 01 	lds	r21, 0x01F0
    3afa:	80 91 03 02 	lds	r24, 0x0203
    3afe:	90 91 04 02 	lds	r25, 0x0204
    3b02:	a0 91 05 02 	lds	r26, 0x0205
    3b06:	b0 91 06 02 	lds	r27, 0x0206
    3b0a:	28 17       	cp	r18, r24
    3b0c:	39 07       	cpc	r19, r25
    3b0e:	4a 07       	cpc	r20, r26
    3b10:	5b 07       	cpc	r21, r27
    3b12:	99 f4       	brne	.+38     	; 0x3b3a <__vector_8+0xa0>
	{
		/*Update OV Counter*/
		Local_u32CounterCTCB = 0;
    3b14:	10 92 ed 01 	sts	0x01ED, r1
    3b18:	10 92 ee 01 	sts	0x01EE, r1
    3b1c:	10 92 ef 01 	sts	0x01EF, r1
    3b20:	10 92 f0 01 	sts	0x01F0, r1
		
		/*Call the application function*/
		if(TIMER1_pfCTCB != NULL)
    3b24:	80 91 df 01 	lds	r24, 0x01DF
    3b28:	90 91 e0 01 	lds	r25, 0x01E0
    3b2c:	00 97       	sbiw	r24, 0x00	; 0
    3b2e:	29 f0       	breq	.+10     	; 0x3b3a <__vector_8+0xa0>
		{
			/*Dereferencing of the pointer*/
			TIMER1_pfCTCB();
    3b30:	e0 91 df 01 	lds	r30, 0x01DF
    3b34:	f0 91 e0 01 	lds	r31, 0x01E0
    3b38:	09 95       	icall
		}
	}
}
    3b3a:	cf 91       	pop	r28
    3b3c:	df 91       	pop	r29
    3b3e:	ff 91       	pop	r31
    3b40:	ef 91       	pop	r30
    3b42:	bf 91       	pop	r27
    3b44:	af 91       	pop	r26
    3b46:	9f 91       	pop	r25
    3b48:	8f 91       	pop	r24
    3b4a:	7f 91       	pop	r23
    3b4c:	6f 91       	pop	r22
    3b4e:	5f 91       	pop	r21
    3b50:	4f 91       	pop	r20
    3b52:	3f 91       	pop	r19
    3b54:	2f 91       	pop	r18
    3b56:	0f 90       	pop	r0
    3b58:	0f be       	out	0x3f, r0	; 63
    3b5a:	0f 90       	pop	r0
    3b5c:	1f 90       	pop	r1
    3b5e:	18 95       	reti

00003b60 <__vector_6>:
///-------------------------------------------------------------------------------------------------------------------------

/*Prototype for ISR function of Timer1 ISR mode*/
void __vector_6(void)			__attribute__((signal));
void __vector_6(void)
{
    3b60:	1f 92       	push	r1
    3b62:	0f 92       	push	r0
    3b64:	0f b6       	in	r0, 0x3f	; 63
    3b66:	0f 92       	push	r0
    3b68:	11 24       	eor	r1, r1
    3b6a:	2f 93       	push	r18
    3b6c:	3f 93       	push	r19
    3b6e:	8f 93       	push	r24
    3b70:	9f 93       	push	r25
    3b72:	af 93       	push	r26
    3b74:	bf 93       	push	r27
    3b76:	ef 93       	push	r30
    3b78:	ff 93       	push	r31
    3b7a:	df 93       	push	r29
    3b7c:	cf 93       	push	r28
    3b7e:	00 d0       	rcall	.+0      	; 0x3b80 <__vector_6+0x20>
    3b80:	cd b7       	in	r28, 0x3d	; 61
    3b82:	de b7       	in	r29, 0x3e	; 62
	u16 Local_u16TimerValue = TIMER1_u16_ICR1LH_REG;
    3b84:	e6 e4       	ldi	r30, 0x46	; 70
    3b86:	f0 e0       	ldi	r31, 0x00	; 0
    3b88:	80 81       	ld	r24, Z
    3b8a:	91 81       	ldd	r25, Z+1	; 0x01
    3b8c:	9a 83       	std	Y+2, r25	; 0x02
    3b8e:	89 83       	std	Y+1, r24	; 0x01
	static u8 Local_u8Flag = 0;
	static u16 Local_u16OldValue = 0;
	
	if(Local_u8Flag == 0)		/*Raising Edge*/
    3b90:	80 91 f3 01 	lds	r24, 0x01F3
    3b94:	88 23       	and	r24, r24
    3b96:	b9 f4       	brne	.+46     	; 0x3bc6 <__vector_6+0x66>
	{
		/*Calculate the off period*/
		TIMER1_u16OffPeriod = Local_u16TimerValue - Local_u16OldValue;
    3b98:	20 91 f1 01 	lds	r18, 0x01F1
    3b9c:	30 91 f2 01 	lds	r19, 0x01F2
    3ba0:	89 81       	ldd	r24, Y+1	; 0x01
    3ba2:	9a 81       	ldd	r25, Y+2	; 0x02
    3ba4:	82 1b       	sub	r24, r18
    3ba6:	93 0b       	sbc	r25, r19
    3ba8:	90 93 e4 01 	sts	0x01E4, r25
    3bac:	80 93 e3 01 	sts	0x01E3, r24
		/*Change Trigger source to falling edge*/
		CLR_BIT(TIMER1_u8_TCCR1B_REG , TIMER1_TCCR1B_ICES1_BIT);
    3bb0:	ae e4       	ldi	r26, 0x4E	; 78
    3bb2:	b0 e0       	ldi	r27, 0x00	; 0
    3bb4:	ee e4       	ldi	r30, 0x4E	; 78
    3bb6:	f0 e0       	ldi	r31, 0x00	; 0
    3bb8:	80 81       	ld	r24, Z
    3bba:	8f 7b       	andi	r24, 0xBF	; 191
    3bbc:	8c 93       	st	X, r24
		/*Change the flag*/
		Local_u8Flag = 1;
    3bbe:	81 e0       	ldi	r24, 0x01	; 1
    3bc0:	80 93 f3 01 	sts	0x01F3, r24
    3bc4:	15 c0       	rjmp	.+42     	; 0x3bf0 <__vector_6+0x90>
	}
	else						/*Falling Edge*/
	{
		/*Calculate the on period*/
		TIMER1_u16OnPeriod = Local_u16TimerValue - Local_u16OldValue;
    3bc6:	20 91 f1 01 	lds	r18, 0x01F1
    3bca:	30 91 f2 01 	lds	r19, 0x01F2
    3bce:	89 81       	ldd	r24, Y+1	; 0x01
    3bd0:	9a 81       	ldd	r25, Y+2	; 0x02
    3bd2:	82 1b       	sub	r24, r18
    3bd4:	93 0b       	sbc	r25, r19
    3bd6:	90 93 e2 01 	sts	0x01E2, r25
    3bda:	80 93 e1 01 	sts	0x01E1, r24
		/*Change Trigger source to raising edge*/
		SET_BIT(TIMER1_u8_TCCR1B_REG , TIMER1_TCCR1B_ICES1_BIT);
    3bde:	ae e4       	ldi	r26, 0x4E	; 78
    3be0:	b0 e0       	ldi	r27, 0x00	; 0
    3be2:	ee e4       	ldi	r30, 0x4E	; 78
    3be4:	f0 e0       	ldi	r31, 0x00	; 0
    3be6:	80 81       	ld	r24, Z
    3be8:	80 64       	ori	r24, 0x40	; 64
    3bea:	8c 93       	st	X, r24
		/*Cahnge the flag*/
		Local_u8Flag = 0;
    3bec:	10 92 f3 01 	sts	0x01F3, r1
	}
	Local_u16OldValue = Local_u16TimerValue;				 //Get the value that is stored in ICR1 register
    3bf0:	89 81       	ldd	r24, Y+1	; 0x01
    3bf2:	9a 81       	ldd	r25, Y+2	; 0x02
    3bf4:	90 93 f2 01 	sts	0x01F2, r25
    3bf8:	80 93 f1 01 	sts	0x01F1, r24
}
    3bfc:	0f 90       	pop	r0
    3bfe:	0f 90       	pop	r0
    3c00:	cf 91       	pop	r28
    3c02:	df 91       	pop	r29
    3c04:	ff 91       	pop	r31
    3c06:	ef 91       	pop	r30
    3c08:	bf 91       	pop	r27
    3c0a:	af 91       	pop	r26
    3c0c:	9f 91       	pop	r25
    3c0e:	8f 91       	pop	r24
    3c10:	3f 91       	pop	r19
    3c12:	2f 91       	pop	r18
    3c14:	0f 90       	pop	r0
    3c16:	0f be       	out	0x3f, r0	; 63
    3c18:	0f 90       	pop	r0
    3c1a:	1f 90       	pop	r1
    3c1c:	18 95       	reti

00003c1e <main>:
void  App_voidTempControlSystem  (u16 Copy_u16DigitalReturnedValue);		//Application using LM35(Temperature sensor)
void  App_voidLightControlSystem (u16 Copy_u16DigitalReturnedValueLDR);		//Application using LDR(Light Dependent Resistor)
void  App_voidGetBackToMenuEXTI  (void);									//Function to get back to the main menu by changing the value of the ChooseService variable

int main(void)
{
    3c1e:	df 93       	push	r29
    3c20:	cf 93       	push	r28
    3c22:	cd b7       	in	r28, 0x3d	; 61
    3c24:	de b7       	in	r29, 0x3e	; 62
    3c26:	c0 55       	subi	r28, 0x50	; 80
    3c28:	d1 40       	sbci	r29, 0x01	; 1
    3c2a:	0f b6       	in	r0, 0x3f	; 63
    3c2c:	f8 94       	cli
    3c2e:	de bf       	out	0x3e, r29	; 62
    3c30:	0f be       	out	0x3f, r0	; 63
    3c32:	cd bf       	out	0x3d, r28	; 61
/*----------------Local Variables----------------*/
	//Arrays of u8 to send strings to LCD
	u8 Local_Au8LCDStr1[] = "....Welcome....";
    3c34:	9e 01       	movw	r18, r28
    3c36:	22 5d       	subi	r18, 0xD2	; 210
    3c38:	3f 4f       	sbci	r19, 0xFF	; 255
    3c3a:	c5 5f       	subi	r28, 0xF5	; 245
    3c3c:	de 4f       	sbci	r29, 0xFE	; 254
    3c3e:	39 83       	std	Y+1, r19	; 0x01
    3c40:	28 83       	st	Y, r18
    3c42:	cb 50       	subi	r28, 0x0B	; 11
    3c44:	d1 40       	sbci	r29, 0x01	; 1
    3c46:	80 e6       	ldi	r24, 0x60	; 96
    3c48:	90 e0       	ldi	r25, 0x00	; 0
    3c4a:	c3 5f       	subi	r28, 0xF3	; 243
    3c4c:	de 4f       	sbci	r29, 0xFE	; 254
    3c4e:	99 83       	std	Y+1, r25	; 0x01
    3c50:	88 83       	st	Y, r24
    3c52:	cd 50       	subi	r28, 0x0D	; 13
    3c54:	d1 40       	sbci	r29, 0x01	; 1
    3c56:	90 e1       	ldi	r25, 0x10	; 16
    3c58:	c1 5f       	subi	r28, 0xF1	; 241
    3c5a:	de 4f       	sbci	r29, 0xFE	; 254
    3c5c:	98 83       	st	Y, r25
    3c5e:	cf 50       	subi	r28, 0x0F	; 15
    3c60:	d1 40       	sbci	r29, 0x01	; 1
    3c62:	c3 5f       	subi	r28, 0xF3	; 243
    3c64:	de 4f       	sbci	r29, 0xFE	; 254
    3c66:	e8 81       	ld	r30, Y
    3c68:	f9 81       	ldd	r31, Y+1	; 0x01
    3c6a:	cd 50       	subi	r28, 0x0D	; 13
    3c6c:	d1 40       	sbci	r29, 0x01	; 1
    3c6e:	00 80       	ld	r0, Z
    3c70:	c3 5f       	subi	r28, 0xF3	; 243
    3c72:	de 4f       	sbci	r29, 0xFE	; 254
    3c74:	28 81       	ld	r18, Y
    3c76:	39 81       	ldd	r19, Y+1	; 0x01
    3c78:	cd 50       	subi	r28, 0x0D	; 13
    3c7a:	d1 40       	sbci	r29, 0x01	; 1
    3c7c:	2f 5f       	subi	r18, 0xFF	; 255
    3c7e:	3f 4f       	sbci	r19, 0xFF	; 255
    3c80:	c3 5f       	subi	r28, 0xF3	; 243
    3c82:	de 4f       	sbci	r29, 0xFE	; 254
    3c84:	39 83       	std	Y+1, r19	; 0x01
    3c86:	28 83       	st	Y, r18
    3c88:	cd 50       	subi	r28, 0x0D	; 13
    3c8a:	d1 40       	sbci	r29, 0x01	; 1
    3c8c:	c5 5f       	subi	r28, 0xF5	; 245
    3c8e:	de 4f       	sbci	r29, 0xFE	; 254
    3c90:	e8 81       	ld	r30, Y
    3c92:	f9 81       	ldd	r31, Y+1	; 0x01
    3c94:	cb 50       	subi	r28, 0x0B	; 11
    3c96:	d1 40       	sbci	r29, 0x01	; 1
    3c98:	00 82       	st	Z, r0
    3c9a:	c5 5f       	subi	r28, 0xF5	; 245
    3c9c:	de 4f       	sbci	r29, 0xFE	; 254
    3c9e:	28 81       	ld	r18, Y
    3ca0:	39 81       	ldd	r19, Y+1	; 0x01
    3ca2:	cb 50       	subi	r28, 0x0B	; 11
    3ca4:	d1 40       	sbci	r29, 0x01	; 1
    3ca6:	2f 5f       	subi	r18, 0xFF	; 255
    3ca8:	3f 4f       	sbci	r19, 0xFF	; 255
    3caa:	c5 5f       	subi	r28, 0xF5	; 245
    3cac:	de 4f       	sbci	r29, 0xFE	; 254
    3cae:	39 83       	std	Y+1, r19	; 0x01
    3cb0:	28 83       	st	Y, r18
    3cb2:	cb 50       	subi	r28, 0x0B	; 11
    3cb4:	d1 40       	sbci	r29, 0x01	; 1
    3cb6:	c1 5f       	subi	r28, 0xF1	; 241
    3cb8:	de 4f       	sbci	r29, 0xFE	; 254
    3cba:	38 81       	ld	r19, Y
    3cbc:	cf 50       	subi	r28, 0x0F	; 15
    3cbe:	d1 40       	sbci	r29, 0x01	; 1
    3cc0:	31 50       	subi	r19, 0x01	; 1
    3cc2:	c1 5f       	subi	r28, 0xF1	; 241
    3cc4:	de 4f       	sbci	r29, 0xFE	; 254
    3cc6:	38 83       	st	Y, r19
    3cc8:	cf 50       	subi	r28, 0x0F	; 15
    3cca:	d1 40       	sbci	r29, 0x01	; 1
    3ccc:	c1 5f       	subi	r28, 0xF1	; 241
    3cce:	de 4f       	sbci	r29, 0xFE	; 254
    3cd0:	88 81       	ld	r24, Y
    3cd2:	cf 50       	subi	r28, 0x0F	; 15
    3cd4:	d1 40       	sbci	r29, 0x01	; 1
    3cd6:	88 23       	and	r24, r24
    3cd8:	21 f6       	brne	.-120    	; 0x3c62 <main+0x44>
	u8 Local_Au8LCDStr2[] = "login->Press(E)";
    3cda:	fe 01       	movw	r30, r28
    3cdc:	fe 96       	adiw	r30, 0x3e	; 62
    3cde:	c0 5f       	subi	r28, 0xF0	; 240
    3ce0:	de 4f       	sbci	r29, 0xFE	; 254
    3ce2:	f9 83       	std	Y+1, r31	; 0x01
    3ce4:	e8 83       	st	Y, r30
    3ce6:	c0 51       	subi	r28, 0x10	; 16
    3ce8:	d1 40       	sbci	r29, 0x01	; 1
    3cea:	20 e7       	ldi	r18, 0x70	; 112
    3cec:	30 e0       	ldi	r19, 0x00	; 0
    3cee:	ce 5e       	subi	r28, 0xEE	; 238
    3cf0:	de 4f       	sbci	r29, 0xFE	; 254
    3cf2:	39 83       	std	Y+1, r19	; 0x01
    3cf4:	28 83       	st	Y, r18
    3cf6:	c2 51       	subi	r28, 0x12	; 18
    3cf8:	d1 40       	sbci	r29, 0x01	; 1
    3cfa:	30 e1       	ldi	r19, 0x10	; 16
    3cfc:	cc 5e       	subi	r28, 0xEC	; 236
    3cfe:	de 4f       	sbci	r29, 0xFE	; 254
    3d00:	38 83       	st	Y, r19
    3d02:	c4 51       	subi	r28, 0x14	; 20
    3d04:	d1 40       	sbci	r29, 0x01	; 1
    3d06:	ce 5e       	subi	r28, 0xEE	; 238
    3d08:	de 4f       	sbci	r29, 0xFE	; 254
    3d0a:	e8 81       	ld	r30, Y
    3d0c:	f9 81       	ldd	r31, Y+1	; 0x01
    3d0e:	c2 51       	subi	r28, 0x12	; 18
    3d10:	d1 40       	sbci	r29, 0x01	; 1
    3d12:	00 80       	ld	r0, Z
    3d14:	ce 5e       	subi	r28, 0xEE	; 238
    3d16:	de 4f       	sbci	r29, 0xFE	; 254
    3d18:	28 81       	ld	r18, Y
    3d1a:	39 81       	ldd	r19, Y+1	; 0x01
    3d1c:	c2 51       	subi	r28, 0x12	; 18
    3d1e:	d1 40       	sbci	r29, 0x01	; 1
    3d20:	2f 5f       	subi	r18, 0xFF	; 255
    3d22:	3f 4f       	sbci	r19, 0xFF	; 255
    3d24:	ce 5e       	subi	r28, 0xEE	; 238
    3d26:	de 4f       	sbci	r29, 0xFE	; 254
    3d28:	39 83       	std	Y+1, r19	; 0x01
    3d2a:	28 83       	st	Y, r18
    3d2c:	c2 51       	subi	r28, 0x12	; 18
    3d2e:	d1 40       	sbci	r29, 0x01	; 1
    3d30:	c0 5f       	subi	r28, 0xF0	; 240
    3d32:	de 4f       	sbci	r29, 0xFE	; 254
    3d34:	e8 81       	ld	r30, Y
    3d36:	f9 81       	ldd	r31, Y+1	; 0x01
    3d38:	c0 51       	subi	r28, 0x10	; 16
    3d3a:	d1 40       	sbci	r29, 0x01	; 1
    3d3c:	00 82       	st	Z, r0
    3d3e:	c0 5f       	subi	r28, 0xF0	; 240
    3d40:	de 4f       	sbci	r29, 0xFE	; 254
    3d42:	28 81       	ld	r18, Y
    3d44:	39 81       	ldd	r19, Y+1	; 0x01
    3d46:	c0 51       	subi	r28, 0x10	; 16
    3d48:	d1 40       	sbci	r29, 0x01	; 1
    3d4a:	2f 5f       	subi	r18, 0xFF	; 255
    3d4c:	3f 4f       	sbci	r19, 0xFF	; 255
    3d4e:	c0 5f       	subi	r28, 0xF0	; 240
    3d50:	de 4f       	sbci	r29, 0xFE	; 254
    3d52:	39 83       	std	Y+1, r19	; 0x01
    3d54:	28 83       	st	Y, r18
    3d56:	c0 51       	subi	r28, 0x10	; 16
    3d58:	d1 40       	sbci	r29, 0x01	; 1
    3d5a:	cc 5e       	subi	r28, 0xEC	; 236
    3d5c:	de 4f       	sbci	r29, 0xFE	; 254
    3d5e:	38 81       	ld	r19, Y
    3d60:	c4 51       	subi	r28, 0x14	; 20
    3d62:	d1 40       	sbci	r29, 0x01	; 1
    3d64:	31 50       	subi	r19, 0x01	; 1
    3d66:	cc 5e       	subi	r28, 0xEC	; 236
    3d68:	de 4f       	sbci	r29, 0xFE	; 254
    3d6a:	38 83       	st	Y, r19
    3d6c:	c4 51       	subi	r28, 0x14	; 20
    3d6e:	d1 40       	sbci	r29, 0x01	; 1
    3d70:	cc 5e       	subi	r28, 0xEC	; 236
    3d72:	de 4f       	sbci	r29, 0xFE	; 254
    3d74:	88 81       	ld	r24, Y
    3d76:	c4 51       	subi	r28, 0x14	; 20
    3d78:	d1 40       	sbci	r29, 0x01	; 1
    3d7a:	88 23       	and	r24, r24
    3d7c:	21 f6       	brne	.-120    	; 0x3d06 <main+0xe8>
	u8 Local_Au8LCDStr3[] = "Enter Password";
    3d7e:	ce 01       	movw	r24, r28
    3d80:	82 5b       	subi	r24, 0xB2	; 178
    3d82:	9f 4f       	sbci	r25, 0xFF	; 255
    3d84:	cb 5e       	subi	r28, 0xEB	; 235
    3d86:	de 4f       	sbci	r29, 0xFE	; 254
    3d88:	99 83       	std	Y+1, r25	; 0x01
    3d8a:	88 83       	st	Y, r24
    3d8c:	c5 51       	subi	r28, 0x15	; 21
    3d8e:	d1 40       	sbci	r29, 0x01	; 1
    3d90:	e0 e8       	ldi	r30, 0x80	; 128
    3d92:	f0 e0       	ldi	r31, 0x00	; 0
    3d94:	c9 5e       	subi	r28, 0xE9	; 233
    3d96:	de 4f       	sbci	r29, 0xFE	; 254
    3d98:	f9 83       	std	Y+1, r31	; 0x01
    3d9a:	e8 83       	st	Y, r30
    3d9c:	c7 51       	subi	r28, 0x17	; 23
    3d9e:	d1 40       	sbci	r29, 0x01	; 1
    3da0:	ff e0       	ldi	r31, 0x0F	; 15
    3da2:	c7 5e       	subi	r28, 0xE7	; 231
    3da4:	de 4f       	sbci	r29, 0xFE	; 254
    3da6:	f8 83       	st	Y, r31
    3da8:	c9 51       	subi	r28, 0x19	; 25
    3daa:	d1 40       	sbci	r29, 0x01	; 1
    3dac:	c9 5e       	subi	r28, 0xE9	; 233
    3dae:	de 4f       	sbci	r29, 0xFE	; 254
    3db0:	e8 81       	ld	r30, Y
    3db2:	f9 81       	ldd	r31, Y+1	; 0x01
    3db4:	c7 51       	subi	r28, 0x17	; 23
    3db6:	d1 40       	sbci	r29, 0x01	; 1
    3db8:	00 80       	ld	r0, Z
    3dba:	c9 5e       	subi	r28, 0xE9	; 233
    3dbc:	de 4f       	sbci	r29, 0xFE	; 254
    3dbe:	28 81       	ld	r18, Y
    3dc0:	39 81       	ldd	r19, Y+1	; 0x01
    3dc2:	c7 51       	subi	r28, 0x17	; 23
    3dc4:	d1 40       	sbci	r29, 0x01	; 1
    3dc6:	2f 5f       	subi	r18, 0xFF	; 255
    3dc8:	3f 4f       	sbci	r19, 0xFF	; 255
    3dca:	c9 5e       	subi	r28, 0xE9	; 233
    3dcc:	de 4f       	sbci	r29, 0xFE	; 254
    3dce:	39 83       	std	Y+1, r19	; 0x01
    3dd0:	28 83       	st	Y, r18
    3dd2:	c7 51       	subi	r28, 0x17	; 23
    3dd4:	d1 40       	sbci	r29, 0x01	; 1
    3dd6:	cb 5e       	subi	r28, 0xEB	; 235
    3dd8:	de 4f       	sbci	r29, 0xFE	; 254
    3dda:	e8 81       	ld	r30, Y
    3ddc:	f9 81       	ldd	r31, Y+1	; 0x01
    3dde:	c5 51       	subi	r28, 0x15	; 21
    3de0:	d1 40       	sbci	r29, 0x01	; 1
    3de2:	00 82       	st	Z, r0
    3de4:	cb 5e       	subi	r28, 0xEB	; 235
    3de6:	de 4f       	sbci	r29, 0xFE	; 254
    3de8:	28 81       	ld	r18, Y
    3dea:	39 81       	ldd	r19, Y+1	; 0x01
    3dec:	c5 51       	subi	r28, 0x15	; 21
    3dee:	d1 40       	sbci	r29, 0x01	; 1
    3df0:	2f 5f       	subi	r18, 0xFF	; 255
    3df2:	3f 4f       	sbci	r19, 0xFF	; 255
    3df4:	cb 5e       	subi	r28, 0xEB	; 235
    3df6:	de 4f       	sbci	r29, 0xFE	; 254
    3df8:	39 83       	std	Y+1, r19	; 0x01
    3dfa:	28 83       	st	Y, r18
    3dfc:	c5 51       	subi	r28, 0x15	; 21
    3dfe:	d1 40       	sbci	r29, 0x01	; 1
    3e00:	c7 5e       	subi	r28, 0xE7	; 231
    3e02:	de 4f       	sbci	r29, 0xFE	; 254
    3e04:	38 81       	ld	r19, Y
    3e06:	c9 51       	subi	r28, 0x19	; 25
    3e08:	d1 40       	sbci	r29, 0x01	; 1
    3e0a:	31 50       	subi	r19, 0x01	; 1
    3e0c:	c7 5e       	subi	r28, 0xE7	; 231
    3e0e:	de 4f       	sbci	r29, 0xFE	; 254
    3e10:	38 83       	st	Y, r19
    3e12:	c9 51       	subi	r28, 0x19	; 25
    3e14:	d1 40       	sbci	r29, 0x01	; 1
    3e16:	c7 5e       	subi	r28, 0xE7	; 231
    3e18:	de 4f       	sbci	r29, 0xFE	; 254
    3e1a:	88 81       	ld	r24, Y
    3e1c:	c9 51       	subi	r28, 0x19	; 25
    3e1e:	d1 40       	sbci	r29, 0x01	; 1
    3e20:	88 23       	and	r24, r24
    3e22:	21 f6       	brne	.-120    	; 0x3dac <main+0x18e>
	u8 Local_Au8LCDStr4[] = "Correct Password";
    3e24:	ce 01       	movw	r24, r28
    3e26:	83 5a       	subi	r24, 0xA3	; 163
    3e28:	9f 4f       	sbci	r25, 0xFF	; 255
    3e2a:	c6 5e       	subi	r28, 0xE6	; 230
    3e2c:	de 4f       	sbci	r29, 0xFE	; 254
    3e2e:	99 83       	std	Y+1, r25	; 0x01
    3e30:	88 83       	st	Y, r24
    3e32:	ca 51       	subi	r28, 0x1A	; 26
    3e34:	d1 40       	sbci	r29, 0x01	; 1
    3e36:	ef e8       	ldi	r30, 0x8F	; 143
    3e38:	f0 e0       	ldi	r31, 0x00	; 0
    3e3a:	c4 5e       	subi	r28, 0xE4	; 228
    3e3c:	de 4f       	sbci	r29, 0xFE	; 254
    3e3e:	f9 83       	std	Y+1, r31	; 0x01
    3e40:	e8 83       	st	Y, r30
    3e42:	cc 51       	subi	r28, 0x1C	; 28
    3e44:	d1 40       	sbci	r29, 0x01	; 1
    3e46:	f1 e1       	ldi	r31, 0x11	; 17
    3e48:	c2 5e       	subi	r28, 0xE2	; 226
    3e4a:	de 4f       	sbci	r29, 0xFE	; 254
    3e4c:	f8 83       	st	Y, r31
    3e4e:	ce 51       	subi	r28, 0x1E	; 30
    3e50:	d1 40       	sbci	r29, 0x01	; 1
    3e52:	c4 5e       	subi	r28, 0xE4	; 228
    3e54:	de 4f       	sbci	r29, 0xFE	; 254
    3e56:	e8 81       	ld	r30, Y
    3e58:	f9 81       	ldd	r31, Y+1	; 0x01
    3e5a:	cc 51       	subi	r28, 0x1C	; 28
    3e5c:	d1 40       	sbci	r29, 0x01	; 1
    3e5e:	00 80       	ld	r0, Z
    3e60:	c4 5e       	subi	r28, 0xE4	; 228
    3e62:	de 4f       	sbci	r29, 0xFE	; 254
    3e64:	28 81       	ld	r18, Y
    3e66:	39 81       	ldd	r19, Y+1	; 0x01
    3e68:	cc 51       	subi	r28, 0x1C	; 28
    3e6a:	d1 40       	sbci	r29, 0x01	; 1
    3e6c:	2f 5f       	subi	r18, 0xFF	; 255
    3e6e:	3f 4f       	sbci	r19, 0xFF	; 255
    3e70:	c4 5e       	subi	r28, 0xE4	; 228
    3e72:	de 4f       	sbci	r29, 0xFE	; 254
    3e74:	39 83       	std	Y+1, r19	; 0x01
    3e76:	28 83       	st	Y, r18
    3e78:	cc 51       	subi	r28, 0x1C	; 28
    3e7a:	d1 40       	sbci	r29, 0x01	; 1
    3e7c:	c6 5e       	subi	r28, 0xE6	; 230
    3e7e:	de 4f       	sbci	r29, 0xFE	; 254
    3e80:	e8 81       	ld	r30, Y
    3e82:	f9 81       	ldd	r31, Y+1	; 0x01
    3e84:	ca 51       	subi	r28, 0x1A	; 26
    3e86:	d1 40       	sbci	r29, 0x01	; 1
    3e88:	00 82       	st	Z, r0
    3e8a:	c6 5e       	subi	r28, 0xE6	; 230
    3e8c:	de 4f       	sbci	r29, 0xFE	; 254
    3e8e:	28 81       	ld	r18, Y
    3e90:	39 81       	ldd	r19, Y+1	; 0x01
    3e92:	ca 51       	subi	r28, 0x1A	; 26
    3e94:	d1 40       	sbci	r29, 0x01	; 1
    3e96:	2f 5f       	subi	r18, 0xFF	; 255
    3e98:	3f 4f       	sbci	r19, 0xFF	; 255
    3e9a:	c6 5e       	subi	r28, 0xE6	; 230
    3e9c:	de 4f       	sbci	r29, 0xFE	; 254
    3e9e:	39 83       	std	Y+1, r19	; 0x01
    3ea0:	28 83       	st	Y, r18
    3ea2:	ca 51       	subi	r28, 0x1A	; 26
    3ea4:	d1 40       	sbci	r29, 0x01	; 1
    3ea6:	c2 5e       	subi	r28, 0xE2	; 226
    3ea8:	de 4f       	sbci	r29, 0xFE	; 254
    3eaa:	38 81       	ld	r19, Y
    3eac:	ce 51       	subi	r28, 0x1E	; 30
    3eae:	d1 40       	sbci	r29, 0x01	; 1
    3eb0:	31 50       	subi	r19, 0x01	; 1
    3eb2:	c2 5e       	subi	r28, 0xE2	; 226
    3eb4:	de 4f       	sbci	r29, 0xFE	; 254
    3eb6:	38 83       	st	Y, r19
    3eb8:	ce 51       	subi	r28, 0x1E	; 30
    3eba:	d1 40       	sbci	r29, 0x01	; 1
    3ebc:	c2 5e       	subi	r28, 0xE2	; 226
    3ebe:	de 4f       	sbci	r29, 0xFE	; 254
    3ec0:	88 81       	ld	r24, Y
    3ec2:	ce 51       	subi	r28, 0x1E	; 30
    3ec4:	d1 40       	sbci	r29, 0x01	; 1
    3ec6:	88 23       	and	r24, r24
    3ec8:	21 f6       	brne	.-120    	; 0x3e52 <main+0x234>
	u8 Local_Au8LCDStr5[] = "Wrong Password";
    3eca:	ce 01       	movw	r24, r28
    3ecc:	82 59       	subi	r24, 0x92	; 146
    3ece:	9f 4f       	sbci	r25, 0xFF	; 255
    3ed0:	c1 5e       	subi	r28, 0xE1	; 225
    3ed2:	de 4f       	sbci	r29, 0xFE	; 254
    3ed4:	99 83       	std	Y+1, r25	; 0x01
    3ed6:	88 83       	st	Y, r24
    3ed8:	cf 51       	subi	r28, 0x1F	; 31
    3eda:	d1 40       	sbci	r29, 0x01	; 1
    3edc:	e0 ea       	ldi	r30, 0xA0	; 160
    3ede:	f0 e0       	ldi	r31, 0x00	; 0
    3ee0:	cf 5d       	subi	r28, 0xDF	; 223
    3ee2:	de 4f       	sbci	r29, 0xFE	; 254
    3ee4:	f9 83       	std	Y+1, r31	; 0x01
    3ee6:	e8 83       	st	Y, r30
    3ee8:	c1 52       	subi	r28, 0x21	; 33
    3eea:	d1 40       	sbci	r29, 0x01	; 1
    3eec:	ff e0       	ldi	r31, 0x0F	; 15
    3eee:	cd 5d       	subi	r28, 0xDD	; 221
    3ef0:	de 4f       	sbci	r29, 0xFE	; 254
    3ef2:	f8 83       	st	Y, r31
    3ef4:	c3 52       	subi	r28, 0x23	; 35
    3ef6:	d1 40       	sbci	r29, 0x01	; 1
    3ef8:	cf 5d       	subi	r28, 0xDF	; 223
    3efa:	de 4f       	sbci	r29, 0xFE	; 254
    3efc:	e8 81       	ld	r30, Y
    3efe:	f9 81       	ldd	r31, Y+1	; 0x01
    3f00:	c1 52       	subi	r28, 0x21	; 33
    3f02:	d1 40       	sbci	r29, 0x01	; 1
    3f04:	00 80       	ld	r0, Z
    3f06:	cf 5d       	subi	r28, 0xDF	; 223
    3f08:	de 4f       	sbci	r29, 0xFE	; 254
    3f0a:	28 81       	ld	r18, Y
    3f0c:	39 81       	ldd	r19, Y+1	; 0x01
    3f0e:	c1 52       	subi	r28, 0x21	; 33
    3f10:	d1 40       	sbci	r29, 0x01	; 1
    3f12:	2f 5f       	subi	r18, 0xFF	; 255
    3f14:	3f 4f       	sbci	r19, 0xFF	; 255
    3f16:	cf 5d       	subi	r28, 0xDF	; 223
    3f18:	de 4f       	sbci	r29, 0xFE	; 254
    3f1a:	39 83       	std	Y+1, r19	; 0x01
    3f1c:	28 83       	st	Y, r18
    3f1e:	c1 52       	subi	r28, 0x21	; 33
    3f20:	d1 40       	sbci	r29, 0x01	; 1
    3f22:	c1 5e       	subi	r28, 0xE1	; 225
    3f24:	de 4f       	sbci	r29, 0xFE	; 254
    3f26:	e8 81       	ld	r30, Y
    3f28:	f9 81       	ldd	r31, Y+1	; 0x01
    3f2a:	cf 51       	subi	r28, 0x1F	; 31
    3f2c:	d1 40       	sbci	r29, 0x01	; 1
    3f2e:	00 82       	st	Z, r0
    3f30:	c1 5e       	subi	r28, 0xE1	; 225
    3f32:	de 4f       	sbci	r29, 0xFE	; 254
    3f34:	28 81       	ld	r18, Y
    3f36:	39 81       	ldd	r19, Y+1	; 0x01
    3f38:	cf 51       	subi	r28, 0x1F	; 31
    3f3a:	d1 40       	sbci	r29, 0x01	; 1
    3f3c:	2f 5f       	subi	r18, 0xFF	; 255
    3f3e:	3f 4f       	sbci	r19, 0xFF	; 255
    3f40:	c1 5e       	subi	r28, 0xE1	; 225
    3f42:	de 4f       	sbci	r29, 0xFE	; 254
    3f44:	39 83       	std	Y+1, r19	; 0x01
    3f46:	28 83       	st	Y, r18
    3f48:	cf 51       	subi	r28, 0x1F	; 31
    3f4a:	d1 40       	sbci	r29, 0x01	; 1
    3f4c:	cd 5d       	subi	r28, 0xDD	; 221
    3f4e:	de 4f       	sbci	r29, 0xFE	; 254
    3f50:	38 81       	ld	r19, Y
    3f52:	c3 52       	subi	r28, 0x23	; 35
    3f54:	d1 40       	sbci	r29, 0x01	; 1
    3f56:	31 50       	subi	r19, 0x01	; 1
    3f58:	cd 5d       	subi	r28, 0xDD	; 221
    3f5a:	de 4f       	sbci	r29, 0xFE	; 254
    3f5c:	38 83       	st	Y, r19
    3f5e:	c3 52       	subi	r28, 0x23	; 35
    3f60:	d1 40       	sbci	r29, 0x01	; 1
    3f62:	cd 5d       	subi	r28, 0xDD	; 221
    3f64:	de 4f       	sbci	r29, 0xFE	; 254
    3f66:	88 81       	ld	r24, Y
    3f68:	c3 52       	subi	r28, 0x23	; 35
    3f6a:	d1 40       	sbci	r29, 0x01	; 1
    3f6c:	88 23       	and	r24, r24
    3f6e:	21 f6       	brne	.-120    	; 0x3ef8 <main+0x2da>
	u8 Local_Au8LCDStr6[] = "Trail1.Try again";
    3f70:	ce 01       	movw	r24, r28
    3f72:	83 58       	subi	r24, 0x83	; 131
    3f74:	9f 4f       	sbci	r25, 0xFF	; 255
    3f76:	cc 5d       	subi	r28, 0xDC	; 220
    3f78:	de 4f       	sbci	r29, 0xFE	; 254
    3f7a:	99 83       	std	Y+1, r25	; 0x01
    3f7c:	88 83       	st	Y, r24
    3f7e:	c4 52       	subi	r28, 0x24	; 36
    3f80:	d1 40       	sbci	r29, 0x01	; 1
    3f82:	ef ea       	ldi	r30, 0xAF	; 175
    3f84:	f0 e0       	ldi	r31, 0x00	; 0
    3f86:	ca 5d       	subi	r28, 0xDA	; 218
    3f88:	de 4f       	sbci	r29, 0xFE	; 254
    3f8a:	f9 83       	std	Y+1, r31	; 0x01
    3f8c:	e8 83       	st	Y, r30
    3f8e:	c6 52       	subi	r28, 0x26	; 38
    3f90:	d1 40       	sbci	r29, 0x01	; 1
    3f92:	f1 e1       	ldi	r31, 0x11	; 17
    3f94:	c8 5d       	subi	r28, 0xD8	; 216
    3f96:	de 4f       	sbci	r29, 0xFE	; 254
    3f98:	f8 83       	st	Y, r31
    3f9a:	c8 52       	subi	r28, 0x28	; 40
    3f9c:	d1 40       	sbci	r29, 0x01	; 1
    3f9e:	ca 5d       	subi	r28, 0xDA	; 218
    3fa0:	de 4f       	sbci	r29, 0xFE	; 254
    3fa2:	e8 81       	ld	r30, Y
    3fa4:	f9 81       	ldd	r31, Y+1	; 0x01
    3fa6:	c6 52       	subi	r28, 0x26	; 38
    3fa8:	d1 40       	sbci	r29, 0x01	; 1
    3faa:	00 80       	ld	r0, Z
    3fac:	ca 5d       	subi	r28, 0xDA	; 218
    3fae:	de 4f       	sbci	r29, 0xFE	; 254
    3fb0:	28 81       	ld	r18, Y
    3fb2:	39 81       	ldd	r19, Y+1	; 0x01
    3fb4:	c6 52       	subi	r28, 0x26	; 38
    3fb6:	d1 40       	sbci	r29, 0x01	; 1
    3fb8:	2f 5f       	subi	r18, 0xFF	; 255
    3fba:	3f 4f       	sbci	r19, 0xFF	; 255
    3fbc:	ca 5d       	subi	r28, 0xDA	; 218
    3fbe:	de 4f       	sbci	r29, 0xFE	; 254
    3fc0:	39 83       	std	Y+1, r19	; 0x01
    3fc2:	28 83       	st	Y, r18
    3fc4:	c6 52       	subi	r28, 0x26	; 38
    3fc6:	d1 40       	sbci	r29, 0x01	; 1
    3fc8:	cc 5d       	subi	r28, 0xDC	; 220
    3fca:	de 4f       	sbci	r29, 0xFE	; 254
    3fcc:	e8 81       	ld	r30, Y
    3fce:	f9 81       	ldd	r31, Y+1	; 0x01
    3fd0:	c4 52       	subi	r28, 0x24	; 36
    3fd2:	d1 40       	sbci	r29, 0x01	; 1
    3fd4:	00 82       	st	Z, r0
    3fd6:	cc 5d       	subi	r28, 0xDC	; 220
    3fd8:	de 4f       	sbci	r29, 0xFE	; 254
    3fda:	28 81       	ld	r18, Y
    3fdc:	39 81       	ldd	r19, Y+1	; 0x01
    3fde:	c4 52       	subi	r28, 0x24	; 36
    3fe0:	d1 40       	sbci	r29, 0x01	; 1
    3fe2:	2f 5f       	subi	r18, 0xFF	; 255
    3fe4:	3f 4f       	sbci	r19, 0xFF	; 255
    3fe6:	cc 5d       	subi	r28, 0xDC	; 220
    3fe8:	de 4f       	sbci	r29, 0xFE	; 254
    3fea:	39 83       	std	Y+1, r19	; 0x01
    3fec:	28 83       	st	Y, r18
    3fee:	c4 52       	subi	r28, 0x24	; 36
    3ff0:	d1 40       	sbci	r29, 0x01	; 1
    3ff2:	c8 5d       	subi	r28, 0xD8	; 216
    3ff4:	de 4f       	sbci	r29, 0xFE	; 254
    3ff6:	38 81       	ld	r19, Y
    3ff8:	c8 52       	subi	r28, 0x28	; 40
    3ffa:	d1 40       	sbci	r29, 0x01	; 1
    3ffc:	31 50       	subi	r19, 0x01	; 1
    3ffe:	c8 5d       	subi	r28, 0xD8	; 216
    4000:	de 4f       	sbci	r29, 0xFE	; 254
    4002:	38 83       	st	Y, r19
    4004:	c8 52       	subi	r28, 0x28	; 40
    4006:	d1 40       	sbci	r29, 0x01	; 1
    4008:	c8 5d       	subi	r28, 0xD8	; 216
    400a:	de 4f       	sbci	r29, 0xFE	; 254
    400c:	88 81       	ld	r24, Y
    400e:	c8 52       	subi	r28, 0x28	; 40
    4010:	d1 40       	sbci	r29, 0x01	; 1
    4012:	88 23       	and	r24, r24
    4014:	21 f6       	brne	.-120    	; 0x3f9e <main+0x380>
	u8 Local_Au8LCDStr7[] = "Trail2.Try again";
    4016:	ce 01       	movw	r24, r28
    4018:	82 57       	subi	r24, 0x72	; 114
    401a:	9f 4f       	sbci	r25, 0xFF	; 255
    401c:	c7 5d       	subi	r28, 0xD7	; 215
    401e:	de 4f       	sbci	r29, 0xFE	; 254
    4020:	99 83       	std	Y+1, r25	; 0x01
    4022:	88 83       	st	Y, r24
    4024:	c9 52       	subi	r28, 0x29	; 41
    4026:	d1 40       	sbci	r29, 0x01	; 1
    4028:	e0 ec       	ldi	r30, 0xC0	; 192
    402a:	f0 e0       	ldi	r31, 0x00	; 0
    402c:	c5 5d       	subi	r28, 0xD5	; 213
    402e:	de 4f       	sbci	r29, 0xFE	; 254
    4030:	f9 83       	std	Y+1, r31	; 0x01
    4032:	e8 83       	st	Y, r30
    4034:	cb 52       	subi	r28, 0x2B	; 43
    4036:	d1 40       	sbci	r29, 0x01	; 1
    4038:	f1 e1       	ldi	r31, 0x11	; 17
    403a:	c3 5d       	subi	r28, 0xD3	; 211
    403c:	de 4f       	sbci	r29, 0xFE	; 254
    403e:	f8 83       	st	Y, r31
    4040:	cd 52       	subi	r28, 0x2D	; 45
    4042:	d1 40       	sbci	r29, 0x01	; 1
    4044:	c5 5d       	subi	r28, 0xD5	; 213
    4046:	de 4f       	sbci	r29, 0xFE	; 254
    4048:	e8 81       	ld	r30, Y
    404a:	f9 81       	ldd	r31, Y+1	; 0x01
    404c:	cb 52       	subi	r28, 0x2B	; 43
    404e:	d1 40       	sbci	r29, 0x01	; 1
    4050:	00 80       	ld	r0, Z
    4052:	c5 5d       	subi	r28, 0xD5	; 213
    4054:	de 4f       	sbci	r29, 0xFE	; 254
    4056:	28 81       	ld	r18, Y
    4058:	39 81       	ldd	r19, Y+1	; 0x01
    405a:	cb 52       	subi	r28, 0x2B	; 43
    405c:	d1 40       	sbci	r29, 0x01	; 1
    405e:	2f 5f       	subi	r18, 0xFF	; 255
    4060:	3f 4f       	sbci	r19, 0xFF	; 255
    4062:	c5 5d       	subi	r28, 0xD5	; 213
    4064:	de 4f       	sbci	r29, 0xFE	; 254
    4066:	39 83       	std	Y+1, r19	; 0x01
    4068:	28 83       	st	Y, r18
    406a:	cb 52       	subi	r28, 0x2B	; 43
    406c:	d1 40       	sbci	r29, 0x01	; 1
    406e:	c7 5d       	subi	r28, 0xD7	; 215
    4070:	de 4f       	sbci	r29, 0xFE	; 254
    4072:	e8 81       	ld	r30, Y
    4074:	f9 81       	ldd	r31, Y+1	; 0x01
    4076:	c9 52       	subi	r28, 0x29	; 41
    4078:	d1 40       	sbci	r29, 0x01	; 1
    407a:	00 82       	st	Z, r0
    407c:	c7 5d       	subi	r28, 0xD7	; 215
    407e:	de 4f       	sbci	r29, 0xFE	; 254
    4080:	28 81       	ld	r18, Y
    4082:	39 81       	ldd	r19, Y+1	; 0x01
    4084:	c9 52       	subi	r28, 0x29	; 41
    4086:	d1 40       	sbci	r29, 0x01	; 1
    4088:	2f 5f       	subi	r18, 0xFF	; 255
    408a:	3f 4f       	sbci	r19, 0xFF	; 255
    408c:	c7 5d       	subi	r28, 0xD7	; 215
    408e:	de 4f       	sbci	r29, 0xFE	; 254
    4090:	39 83       	std	Y+1, r19	; 0x01
    4092:	28 83       	st	Y, r18
    4094:	c9 52       	subi	r28, 0x29	; 41
    4096:	d1 40       	sbci	r29, 0x01	; 1
    4098:	c3 5d       	subi	r28, 0xD3	; 211
    409a:	de 4f       	sbci	r29, 0xFE	; 254
    409c:	38 81       	ld	r19, Y
    409e:	cd 52       	subi	r28, 0x2D	; 45
    40a0:	d1 40       	sbci	r29, 0x01	; 1
    40a2:	31 50       	subi	r19, 0x01	; 1
    40a4:	c3 5d       	subi	r28, 0xD3	; 211
    40a6:	de 4f       	sbci	r29, 0xFE	; 254
    40a8:	38 83       	st	Y, r19
    40aa:	cd 52       	subi	r28, 0x2D	; 45
    40ac:	d1 40       	sbci	r29, 0x01	; 1
    40ae:	c3 5d       	subi	r28, 0xD3	; 211
    40b0:	de 4f       	sbci	r29, 0xFE	; 254
    40b2:	88 81       	ld	r24, Y
    40b4:	cd 52       	subi	r28, 0x2D	; 45
    40b6:	d1 40       	sbci	r29, 0x01	; 1
    40b8:	88 23       	and	r24, r24
    40ba:	21 f6       	brne	.-120    	; 0x4044 <main+0x426>
	u8 Local_Au8LCDStr8[] = "Try again later";
    40bc:	ce 01       	movw	r24, r28
    40be:	81 56       	subi	r24, 0x61	; 97
    40c0:	9f 4f       	sbci	r25, 0xFF	; 255
    40c2:	c2 5d       	subi	r28, 0xD2	; 210
    40c4:	de 4f       	sbci	r29, 0xFE	; 254
    40c6:	99 83       	std	Y+1, r25	; 0x01
    40c8:	88 83       	st	Y, r24
    40ca:	ce 52       	subi	r28, 0x2E	; 46
    40cc:	d1 40       	sbci	r29, 0x01	; 1
    40ce:	e1 ed       	ldi	r30, 0xD1	; 209
    40d0:	f0 e0       	ldi	r31, 0x00	; 0
    40d2:	c0 5d       	subi	r28, 0xD0	; 208
    40d4:	de 4f       	sbci	r29, 0xFE	; 254
    40d6:	f9 83       	std	Y+1, r31	; 0x01
    40d8:	e8 83       	st	Y, r30
    40da:	c0 53       	subi	r28, 0x30	; 48
    40dc:	d1 40       	sbci	r29, 0x01	; 1
    40de:	f0 e1       	ldi	r31, 0x10	; 16
    40e0:	ce 5c       	subi	r28, 0xCE	; 206
    40e2:	de 4f       	sbci	r29, 0xFE	; 254
    40e4:	f8 83       	st	Y, r31
    40e6:	c2 53       	subi	r28, 0x32	; 50
    40e8:	d1 40       	sbci	r29, 0x01	; 1
    40ea:	c0 5d       	subi	r28, 0xD0	; 208
    40ec:	de 4f       	sbci	r29, 0xFE	; 254
    40ee:	e8 81       	ld	r30, Y
    40f0:	f9 81       	ldd	r31, Y+1	; 0x01
    40f2:	c0 53       	subi	r28, 0x30	; 48
    40f4:	d1 40       	sbci	r29, 0x01	; 1
    40f6:	00 80       	ld	r0, Z
    40f8:	c0 5d       	subi	r28, 0xD0	; 208
    40fa:	de 4f       	sbci	r29, 0xFE	; 254
    40fc:	28 81       	ld	r18, Y
    40fe:	39 81       	ldd	r19, Y+1	; 0x01
    4100:	c0 53       	subi	r28, 0x30	; 48
    4102:	d1 40       	sbci	r29, 0x01	; 1
    4104:	2f 5f       	subi	r18, 0xFF	; 255
    4106:	3f 4f       	sbci	r19, 0xFF	; 255
    4108:	c0 5d       	subi	r28, 0xD0	; 208
    410a:	de 4f       	sbci	r29, 0xFE	; 254
    410c:	39 83       	std	Y+1, r19	; 0x01
    410e:	28 83       	st	Y, r18
    4110:	c0 53       	subi	r28, 0x30	; 48
    4112:	d1 40       	sbci	r29, 0x01	; 1
    4114:	c2 5d       	subi	r28, 0xD2	; 210
    4116:	de 4f       	sbci	r29, 0xFE	; 254
    4118:	e8 81       	ld	r30, Y
    411a:	f9 81       	ldd	r31, Y+1	; 0x01
    411c:	ce 52       	subi	r28, 0x2E	; 46
    411e:	d1 40       	sbci	r29, 0x01	; 1
    4120:	00 82       	st	Z, r0
    4122:	c2 5d       	subi	r28, 0xD2	; 210
    4124:	de 4f       	sbci	r29, 0xFE	; 254
    4126:	28 81       	ld	r18, Y
    4128:	39 81       	ldd	r19, Y+1	; 0x01
    412a:	ce 52       	subi	r28, 0x2E	; 46
    412c:	d1 40       	sbci	r29, 0x01	; 1
    412e:	2f 5f       	subi	r18, 0xFF	; 255
    4130:	3f 4f       	sbci	r19, 0xFF	; 255
    4132:	c2 5d       	subi	r28, 0xD2	; 210
    4134:	de 4f       	sbci	r29, 0xFE	; 254
    4136:	39 83       	std	Y+1, r19	; 0x01
    4138:	28 83       	st	Y, r18
    413a:	ce 52       	subi	r28, 0x2E	; 46
    413c:	d1 40       	sbci	r29, 0x01	; 1
    413e:	ce 5c       	subi	r28, 0xCE	; 206
    4140:	de 4f       	sbci	r29, 0xFE	; 254
    4142:	38 81       	ld	r19, Y
    4144:	c2 53       	subi	r28, 0x32	; 50
    4146:	d1 40       	sbci	r29, 0x01	; 1
    4148:	31 50       	subi	r19, 0x01	; 1
    414a:	ce 5c       	subi	r28, 0xCE	; 206
    414c:	de 4f       	sbci	r29, 0xFE	; 254
    414e:	38 83       	st	Y, r19
    4150:	c2 53       	subi	r28, 0x32	; 50
    4152:	d1 40       	sbci	r29, 0x01	; 1
    4154:	ce 5c       	subi	r28, 0xCE	; 206
    4156:	de 4f       	sbci	r29, 0xFE	; 254
    4158:	88 81       	ld	r24, Y
    415a:	c2 53       	subi	r28, 0x32	; 50
    415c:	d1 40       	sbci	r29, 0x01	; 1
    415e:	88 23       	and	r24, r24
    4160:	21 f6       	brne	.-120    	; 0x40ea <main+0x4cc>
	u8 Local_Au8LCDStr9[] = "Welcome to system";
    4162:	ce 01       	movw	r24, r28
    4164:	81 55       	subi	r24, 0x51	; 81
    4166:	9f 4f       	sbci	r25, 0xFF	; 255
    4168:	cd 5c       	subi	r28, 0xCD	; 205
    416a:	de 4f       	sbci	r29, 0xFE	; 254
    416c:	99 83       	std	Y+1, r25	; 0x01
    416e:	88 83       	st	Y, r24
    4170:	c3 53       	subi	r28, 0x33	; 51
    4172:	d1 40       	sbci	r29, 0x01	; 1
    4174:	e1 ee       	ldi	r30, 0xE1	; 225
    4176:	f0 e0       	ldi	r31, 0x00	; 0
    4178:	cb 5c       	subi	r28, 0xCB	; 203
    417a:	de 4f       	sbci	r29, 0xFE	; 254
    417c:	f9 83       	std	Y+1, r31	; 0x01
    417e:	e8 83       	st	Y, r30
    4180:	c5 53       	subi	r28, 0x35	; 53
    4182:	d1 40       	sbci	r29, 0x01	; 1
    4184:	f2 e1       	ldi	r31, 0x12	; 18
    4186:	c9 5c       	subi	r28, 0xC9	; 201
    4188:	de 4f       	sbci	r29, 0xFE	; 254
    418a:	f8 83       	st	Y, r31
    418c:	c7 53       	subi	r28, 0x37	; 55
    418e:	d1 40       	sbci	r29, 0x01	; 1
    4190:	cb 5c       	subi	r28, 0xCB	; 203
    4192:	de 4f       	sbci	r29, 0xFE	; 254
    4194:	e8 81       	ld	r30, Y
    4196:	f9 81       	ldd	r31, Y+1	; 0x01
    4198:	c5 53       	subi	r28, 0x35	; 53
    419a:	d1 40       	sbci	r29, 0x01	; 1
    419c:	00 80       	ld	r0, Z
    419e:	cb 5c       	subi	r28, 0xCB	; 203
    41a0:	de 4f       	sbci	r29, 0xFE	; 254
    41a2:	28 81       	ld	r18, Y
    41a4:	39 81       	ldd	r19, Y+1	; 0x01
    41a6:	c5 53       	subi	r28, 0x35	; 53
    41a8:	d1 40       	sbci	r29, 0x01	; 1
    41aa:	2f 5f       	subi	r18, 0xFF	; 255
    41ac:	3f 4f       	sbci	r19, 0xFF	; 255
    41ae:	cb 5c       	subi	r28, 0xCB	; 203
    41b0:	de 4f       	sbci	r29, 0xFE	; 254
    41b2:	39 83       	std	Y+1, r19	; 0x01
    41b4:	28 83       	st	Y, r18
    41b6:	c5 53       	subi	r28, 0x35	; 53
    41b8:	d1 40       	sbci	r29, 0x01	; 1
    41ba:	cd 5c       	subi	r28, 0xCD	; 205
    41bc:	de 4f       	sbci	r29, 0xFE	; 254
    41be:	e8 81       	ld	r30, Y
    41c0:	f9 81       	ldd	r31, Y+1	; 0x01
    41c2:	c3 53       	subi	r28, 0x33	; 51
    41c4:	d1 40       	sbci	r29, 0x01	; 1
    41c6:	00 82       	st	Z, r0
    41c8:	cd 5c       	subi	r28, 0xCD	; 205
    41ca:	de 4f       	sbci	r29, 0xFE	; 254
    41cc:	28 81       	ld	r18, Y
    41ce:	39 81       	ldd	r19, Y+1	; 0x01
    41d0:	c3 53       	subi	r28, 0x33	; 51
    41d2:	d1 40       	sbci	r29, 0x01	; 1
    41d4:	2f 5f       	subi	r18, 0xFF	; 255
    41d6:	3f 4f       	sbci	r19, 0xFF	; 255
    41d8:	cd 5c       	subi	r28, 0xCD	; 205
    41da:	de 4f       	sbci	r29, 0xFE	; 254
    41dc:	39 83       	std	Y+1, r19	; 0x01
    41de:	28 83       	st	Y, r18
    41e0:	c3 53       	subi	r28, 0x33	; 51
    41e2:	d1 40       	sbci	r29, 0x01	; 1
    41e4:	c9 5c       	subi	r28, 0xC9	; 201
    41e6:	de 4f       	sbci	r29, 0xFE	; 254
    41e8:	38 81       	ld	r19, Y
    41ea:	c7 53       	subi	r28, 0x37	; 55
    41ec:	d1 40       	sbci	r29, 0x01	; 1
    41ee:	31 50       	subi	r19, 0x01	; 1
    41f0:	c9 5c       	subi	r28, 0xC9	; 201
    41f2:	de 4f       	sbci	r29, 0xFE	; 254
    41f4:	38 83       	st	Y, r19
    41f6:	c7 53       	subi	r28, 0x37	; 55
    41f8:	d1 40       	sbci	r29, 0x01	; 1
    41fa:	c9 5c       	subi	r28, 0xC9	; 201
    41fc:	de 4f       	sbci	r29, 0xFE	; 254
    41fe:	88 81       	ld	r24, Y
    4200:	c7 53       	subi	r28, 0x37	; 55
    4202:	d1 40       	sbci	r29, 0x01	; 1
    4204:	88 23       	and	r24, r24
    4206:	21 f6       	brne	.-120    	; 0x4190 <main+0x572>
	u8 Local_Au8LCDStr10[] = "Choose Service..";
    4208:	ce 01       	movw	r24, r28
    420a:	8f 53       	subi	r24, 0x3F	; 63
    420c:	9f 4f       	sbci	r25, 0xFF	; 255
    420e:	c8 5c       	subi	r28, 0xC8	; 200
    4210:	de 4f       	sbci	r29, 0xFE	; 254
    4212:	99 83       	std	Y+1, r25	; 0x01
    4214:	88 83       	st	Y, r24
    4216:	c8 53       	subi	r28, 0x38	; 56
    4218:	d1 40       	sbci	r29, 0x01	; 1
    421a:	e3 ef       	ldi	r30, 0xF3	; 243
    421c:	f0 e0       	ldi	r31, 0x00	; 0
    421e:	c6 5c       	subi	r28, 0xC6	; 198
    4220:	de 4f       	sbci	r29, 0xFE	; 254
    4222:	f9 83       	std	Y+1, r31	; 0x01
    4224:	e8 83       	st	Y, r30
    4226:	ca 53       	subi	r28, 0x3A	; 58
    4228:	d1 40       	sbci	r29, 0x01	; 1
    422a:	f1 e1       	ldi	r31, 0x11	; 17
    422c:	c4 5c       	subi	r28, 0xC4	; 196
    422e:	de 4f       	sbci	r29, 0xFE	; 254
    4230:	f8 83       	st	Y, r31
    4232:	cc 53       	subi	r28, 0x3C	; 60
    4234:	d1 40       	sbci	r29, 0x01	; 1
    4236:	c6 5c       	subi	r28, 0xC6	; 198
    4238:	de 4f       	sbci	r29, 0xFE	; 254
    423a:	e8 81       	ld	r30, Y
    423c:	f9 81       	ldd	r31, Y+1	; 0x01
    423e:	ca 53       	subi	r28, 0x3A	; 58
    4240:	d1 40       	sbci	r29, 0x01	; 1
    4242:	00 80       	ld	r0, Z
    4244:	c6 5c       	subi	r28, 0xC6	; 198
    4246:	de 4f       	sbci	r29, 0xFE	; 254
    4248:	28 81       	ld	r18, Y
    424a:	39 81       	ldd	r19, Y+1	; 0x01
    424c:	ca 53       	subi	r28, 0x3A	; 58
    424e:	d1 40       	sbci	r29, 0x01	; 1
    4250:	2f 5f       	subi	r18, 0xFF	; 255
    4252:	3f 4f       	sbci	r19, 0xFF	; 255
    4254:	c6 5c       	subi	r28, 0xC6	; 198
    4256:	de 4f       	sbci	r29, 0xFE	; 254
    4258:	39 83       	std	Y+1, r19	; 0x01
    425a:	28 83       	st	Y, r18
    425c:	ca 53       	subi	r28, 0x3A	; 58
    425e:	d1 40       	sbci	r29, 0x01	; 1
    4260:	c8 5c       	subi	r28, 0xC8	; 200
    4262:	de 4f       	sbci	r29, 0xFE	; 254
    4264:	e8 81       	ld	r30, Y
    4266:	f9 81       	ldd	r31, Y+1	; 0x01
    4268:	c8 53       	subi	r28, 0x38	; 56
    426a:	d1 40       	sbci	r29, 0x01	; 1
    426c:	00 82       	st	Z, r0
    426e:	c8 5c       	subi	r28, 0xC8	; 200
    4270:	de 4f       	sbci	r29, 0xFE	; 254
    4272:	28 81       	ld	r18, Y
    4274:	39 81       	ldd	r19, Y+1	; 0x01
    4276:	c8 53       	subi	r28, 0x38	; 56
    4278:	d1 40       	sbci	r29, 0x01	; 1
    427a:	2f 5f       	subi	r18, 0xFF	; 255
    427c:	3f 4f       	sbci	r19, 0xFF	; 255
    427e:	c8 5c       	subi	r28, 0xC8	; 200
    4280:	de 4f       	sbci	r29, 0xFE	; 254
    4282:	39 83       	std	Y+1, r19	; 0x01
    4284:	28 83       	st	Y, r18
    4286:	c8 53       	subi	r28, 0x38	; 56
    4288:	d1 40       	sbci	r29, 0x01	; 1
    428a:	c4 5c       	subi	r28, 0xC4	; 196
    428c:	de 4f       	sbci	r29, 0xFE	; 254
    428e:	38 81       	ld	r19, Y
    4290:	cc 53       	subi	r28, 0x3C	; 60
    4292:	d1 40       	sbci	r29, 0x01	; 1
    4294:	31 50       	subi	r19, 0x01	; 1
    4296:	c4 5c       	subi	r28, 0xC4	; 196
    4298:	de 4f       	sbci	r29, 0xFE	; 254
    429a:	38 83       	st	Y, r19
    429c:	cc 53       	subi	r28, 0x3C	; 60
    429e:	d1 40       	sbci	r29, 0x01	; 1
    42a0:	c4 5c       	subi	r28, 0xC4	; 196
    42a2:	de 4f       	sbci	r29, 0xFE	; 254
    42a4:	88 81       	ld	r24, Y
    42a6:	cc 53       	subi	r28, 0x3C	; 60
    42a8:	d1 40       	sbci	r29, 0x01	; 1
    42aa:	88 23       	and	r24, r24
    42ac:	21 f6       	brne	.-120    	; 0x4236 <main+0x618>
	u8 Local_Au8LCDStr11[] = "(1)Temp";
    42ae:	ce 01       	movw	r24, r28
    42b0:	8e 52       	subi	r24, 0x2E	; 46
    42b2:	9f 4f       	sbci	r25, 0xFF	; 255
    42b4:	c3 5c       	subi	r28, 0xC3	; 195
    42b6:	de 4f       	sbci	r29, 0xFE	; 254
    42b8:	99 83       	std	Y+1, r25	; 0x01
    42ba:	88 83       	st	Y, r24
    42bc:	cd 53       	subi	r28, 0x3D	; 61
    42be:	d1 40       	sbci	r29, 0x01	; 1
    42c0:	e4 e0       	ldi	r30, 0x04	; 4
    42c2:	f1 e0       	ldi	r31, 0x01	; 1
    42c4:	c1 5c       	subi	r28, 0xC1	; 193
    42c6:	de 4f       	sbci	r29, 0xFE	; 254
    42c8:	f9 83       	std	Y+1, r31	; 0x01
    42ca:	e8 83       	st	Y, r30
    42cc:	cf 53       	subi	r28, 0x3F	; 63
    42ce:	d1 40       	sbci	r29, 0x01	; 1
    42d0:	f8 e0       	ldi	r31, 0x08	; 8
    42d2:	cf 5b       	subi	r28, 0xBF	; 191
    42d4:	de 4f       	sbci	r29, 0xFE	; 254
    42d6:	f8 83       	st	Y, r31
    42d8:	c1 54       	subi	r28, 0x41	; 65
    42da:	d1 40       	sbci	r29, 0x01	; 1
    42dc:	c1 5c       	subi	r28, 0xC1	; 193
    42de:	de 4f       	sbci	r29, 0xFE	; 254
    42e0:	e8 81       	ld	r30, Y
    42e2:	f9 81       	ldd	r31, Y+1	; 0x01
    42e4:	cf 53       	subi	r28, 0x3F	; 63
    42e6:	d1 40       	sbci	r29, 0x01	; 1
    42e8:	00 80       	ld	r0, Z
    42ea:	c1 5c       	subi	r28, 0xC1	; 193
    42ec:	de 4f       	sbci	r29, 0xFE	; 254
    42ee:	28 81       	ld	r18, Y
    42f0:	39 81       	ldd	r19, Y+1	; 0x01
    42f2:	cf 53       	subi	r28, 0x3F	; 63
    42f4:	d1 40       	sbci	r29, 0x01	; 1
    42f6:	2f 5f       	subi	r18, 0xFF	; 255
    42f8:	3f 4f       	sbci	r19, 0xFF	; 255
    42fa:	c1 5c       	subi	r28, 0xC1	; 193
    42fc:	de 4f       	sbci	r29, 0xFE	; 254
    42fe:	39 83       	std	Y+1, r19	; 0x01
    4300:	28 83       	st	Y, r18
    4302:	cf 53       	subi	r28, 0x3F	; 63
    4304:	d1 40       	sbci	r29, 0x01	; 1
    4306:	c3 5c       	subi	r28, 0xC3	; 195
    4308:	de 4f       	sbci	r29, 0xFE	; 254
    430a:	e8 81       	ld	r30, Y
    430c:	f9 81       	ldd	r31, Y+1	; 0x01
    430e:	cd 53       	subi	r28, 0x3D	; 61
    4310:	d1 40       	sbci	r29, 0x01	; 1
    4312:	00 82       	st	Z, r0
    4314:	c3 5c       	subi	r28, 0xC3	; 195
    4316:	de 4f       	sbci	r29, 0xFE	; 254
    4318:	28 81       	ld	r18, Y
    431a:	39 81       	ldd	r19, Y+1	; 0x01
    431c:	cd 53       	subi	r28, 0x3D	; 61
    431e:	d1 40       	sbci	r29, 0x01	; 1
    4320:	2f 5f       	subi	r18, 0xFF	; 255
    4322:	3f 4f       	sbci	r19, 0xFF	; 255
    4324:	c3 5c       	subi	r28, 0xC3	; 195
    4326:	de 4f       	sbci	r29, 0xFE	; 254
    4328:	39 83       	std	Y+1, r19	; 0x01
    432a:	28 83       	st	Y, r18
    432c:	cd 53       	subi	r28, 0x3D	; 61
    432e:	d1 40       	sbci	r29, 0x01	; 1
    4330:	cf 5b       	subi	r28, 0xBF	; 191
    4332:	de 4f       	sbci	r29, 0xFE	; 254
    4334:	38 81       	ld	r19, Y
    4336:	c1 54       	subi	r28, 0x41	; 65
    4338:	d1 40       	sbci	r29, 0x01	; 1
    433a:	31 50       	subi	r19, 0x01	; 1
    433c:	cf 5b       	subi	r28, 0xBF	; 191
    433e:	de 4f       	sbci	r29, 0xFE	; 254
    4340:	38 83       	st	Y, r19
    4342:	c1 54       	subi	r28, 0x41	; 65
    4344:	d1 40       	sbci	r29, 0x01	; 1
    4346:	cf 5b       	subi	r28, 0xBF	; 191
    4348:	de 4f       	sbci	r29, 0xFE	; 254
    434a:	88 81       	ld	r24, Y
    434c:	c1 54       	subi	r28, 0x41	; 65
    434e:	d1 40       	sbci	r29, 0x01	; 1
    4350:	88 23       	and	r24, r24
    4352:	21 f6       	brne	.-120    	; 0x42dc <main+0x6be>
	u8 Local_Au8LCDStr12[] = "(2)Light";
    4354:	ce 01       	movw	r24, r28
    4356:	86 52       	subi	r24, 0x26	; 38
    4358:	9f 4f       	sbci	r25, 0xFF	; 255
    435a:	ce 5b       	subi	r28, 0xBE	; 190
    435c:	de 4f       	sbci	r29, 0xFE	; 254
    435e:	99 83       	std	Y+1, r25	; 0x01
    4360:	88 83       	st	Y, r24
    4362:	c2 54       	subi	r28, 0x42	; 66
    4364:	d1 40       	sbci	r29, 0x01	; 1
    4366:	ec e0       	ldi	r30, 0x0C	; 12
    4368:	f1 e0       	ldi	r31, 0x01	; 1
    436a:	cc 5b       	subi	r28, 0xBC	; 188
    436c:	de 4f       	sbci	r29, 0xFE	; 254
    436e:	f9 83       	std	Y+1, r31	; 0x01
    4370:	e8 83       	st	Y, r30
    4372:	c4 54       	subi	r28, 0x44	; 68
    4374:	d1 40       	sbci	r29, 0x01	; 1
    4376:	f9 e0       	ldi	r31, 0x09	; 9
    4378:	ca 5b       	subi	r28, 0xBA	; 186
    437a:	de 4f       	sbci	r29, 0xFE	; 254
    437c:	f8 83       	st	Y, r31
    437e:	c6 54       	subi	r28, 0x46	; 70
    4380:	d1 40       	sbci	r29, 0x01	; 1
    4382:	cc 5b       	subi	r28, 0xBC	; 188
    4384:	de 4f       	sbci	r29, 0xFE	; 254
    4386:	e8 81       	ld	r30, Y
    4388:	f9 81       	ldd	r31, Y+1	; 0x01
    438a:	c4 54       	subi	r28, 0x44	; 68
    438c:	d1 40       	sbci	r29, 0x01	; 1
    438e:	00 80       	ld	r0, Z
    4390:	cc 5b       	subi	r28, 0xBC	; 188
    4392:	de 4f       	sbci	r29, 0xFE	; 254
    4394:	28 81       	ld	r18, Y
    4396:	39 81       	ldd	r19, Y+1	; 0x01
    4398:	c4 54       	subi	r28, 0x44	; 68
    439a:	d1 40       	sbci	r29, 0x01	; 1
    439c:	2f 5f       	subi	r18, 0xFF	; 255
    439e:	3f 4f       	sbci	r19, 0xFF	; 255
    43a0:	cc 5b       	subi	r28, 0xBC	; 188
    43a2:	de 4f       	sbci	r29, 0xFE	; 254
    43a4:	39 83       	std	Y+1, r19	; 0x01
    43a6:	28 83       	st	Y, r18
    43a8:	c4 54       	subi	r28, 0x44	; 68
    43aa:	d1 40       	sbci	r29, 0x01	; 1
    43ac:	ce 5b       	subi	r28, 0xBE	; 190
    43ae:	de 4f       	sbci	r29, 0xFE	; 254
    43b0:	e8 81       	ld	r30, Y
    43b2:	f9 81       	ldd	r31, Y+1	; 0x01
    43b4:	c2 54       	subi	r28, 0x42	; 66
    43b6:	d1 40       	sbci	r29, 0x01	; 1
    43b8:	00 82       	st	Z, r0
    43ba:	ce 5b       	subi	r28, 0xBE	; 190
    43bc:	de 4f       	sbci	r29, 0xFE	; 254
    43be:	28 81       	ld	r18, Y
    43c0:	39 81       	ldd	r19, Y+1	; 0x01
    43c2:	c2 54       	subi	r28, 0x42	; 66
    43c4:	d1 40       	sbci	r29, 0x01	; 1
    43c6:	2f 5f       	subi	r18, 0xFF	; 255
    43c8:	3f 4f       	sbci	r19, 0xFF	; 255
    43ca:	ce 5b       	subi	r28, 0xBE	; 190
    43cc:	de 4f       	sbci	r29, 0xFE	; 254
    43ce:	39 83       	std	Y+1, r19	; 0x01
    43d0:	28 83       	st	Y, r18
    43d2:	c2 54       	subi	r28, 0x42	; 66
    43d4:	d1 40       	sbci	r29, 0x01	; 1
    43d6:	ca 5b       	subi	r28, 0xBA	; 186
    43d8:	de 4f       	sbci	r29, 0xFE	; 254
    43da:	38 81       	ld	r19, Y
    43dc:	c6 54       	subi	r28, 0x46	; 70
    43de:	d1 40       	sbci	r29, 0x01	; 1
    43e0:	31 50       	subi	r19, 0x01	; 1
    43e2:	ca 5b       	subi	r28, 0xBA	; 186
    43e4:	de 4f       	sbci	r29, 0xFE	; 254
    43e6:	38 83       	st	Y, r19
    43e8:	c6 54       	subi	r28, 0x46	; 70
    43ea:	d1 40       	sbci	r29, 0x01	; 1
    43ec:	ca 5b       	subi	r28, 0xBA	; 186
    43ee:	de 4f       	sbci	r29, 0xFE	; 254
    43f0:	88 81       	ld	r24, Y
    43f2:	c6 54       	subi	r28, 0x46	; 70
    43f4:	d1 40       	sbci	r29, 0x01	; 1
    43f6:	88 23       	and	r24, r24
    43f8:	21 f6       	brne	.-120    	; 0x4382 <main+0x764>


	u8 Local_u8PressedKey = KPD_u8_KEY_NOT_PRESSED;	//A u8-Variable to get the pressed key from the keypad/ Initiated by a macro to indicate that it's not pressed
    43fa:	fe 01       	movw	r30, r28
    43fc:	ed 51       	subi	r30, 0x1D	; 29
    43fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4400:	8f ef       	ldi	r24, 0xFF	; 255
    4402:	80 83       	st	Z, r24
	u8 Local_u8EnteredPassword[4];					//An Array of u8, to store the entered password
	u8 Local_u8Counter = 0;							//A u8-Variable, used to store the password digit we're going to enter
    4404:	1d a6       	std	Y+45, r1	; 0x2d
	u8 Local_u8Flag = 0;							//A u8-Variable to determine whether the entered flag is correct or wrong
    4406:	1c a6       	std	Y+44, r1	; 0x2c
	u8 Local_u8NumberOfTrails = 0;					//A u8-Variable to indicate the given trails for entering a password
    4408:	1b a6       	std	Y+43, r1	; 0x2b


/*----------------Initializing peripherals----------------*/

	//initialize DIO
	DIO_voidInit();
    440a:	0e 94 93 08 	call	0x1126	; 0x1126 <DIO_voidInit>
	//initialize LCD
	LCD_voidInit();
    440e:	0e 94 e6 10 	call	0x21cc	; 0x21cc <LCD_voidInit>
	//initiate General Interrupt
	GI_voidEnable();
    4412:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <GI_voidEnable>
	//initiate ADC
	ADC_voidInit();
    4416:	0e 94 4f 06 	call	0xc9e	; 0xc9e <ADC_voidInit>
	//initiate TIMER0
	TIMER0_voidInit();
    441a:	0e 94 8e 19 	call	0x331c	; 0x331c <TIMER0_voidInit>
	//Set callback for EXTI0
	EXTI_u8SetCallBack(EXTI_u8_INTERRUPT0 , &App_voidGetBackToMenuEXTI);
    441e:	2f e0       	ldi	r18, 0x0F	; 15
    4420:	3a e2       	ldi	r19, 0x2A	; 42
    4422:	80 e0       	ldi	r24, 0x00	; 0
    4424:	b9 01       	movw	r22, r18
    4426:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <EXTI_u8SetCallBack>
	//Enable EXTI0 at falling edge
	EXTI_u8InterruptEnable(EXTI_u8_INTERRUPT0 , EXTI_u8_FALLING_EDGE);
    442a:	80 e0       	ldi	r24, 0x00	; 0
    442c:	62 e0       	ldi	r22, 0x02	; 2
    442e:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <EXTI_u8InterruptEnable>

/*----------------Part1 - Welcome Screen----------------*/
	LCD_voidSendString(Local_Au8LCDStr1);
    4432:	ce 01       	movw	r24, r28
    4434:	8e 96       	adiw	r24, 0x2e	; 46
    4436:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <LCD_voidSendString>
	LCD_u8GoToXY(LCD_u8_LINE_TWO,0);
    443a:	82 e0       	ldi	r24, 0x02	; 2
    443c:	60 e0       	ldi	r22, 0x00	; 0
    443e:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <LCD_u8GoToXY>
	LCD_voidSendString(Local_Au8LCDStr2);
    4442:	ce 01       	movw	r24, r28
    4444:	ce 96       	adiw	r24, 0x3e	; 62
    4446:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <LCD_voidSendString>
    444a:	05 c0       	rjmp	.+10     	; 0x4456 <main+0x838>

	//Wait till 'E' key is pressed
	while(Local_u8PressedKey != 'E')
	{
		//Pull on KPD value
		KPD_u8GetPressedKey(&Local_u8PressedKey);
    444c:	ce 01       	movw	r24, r28
    444e:	8d 51       	subi	r24, 0x1D	; 29
    4450:	9f 4f       	sbci	r25, 0xFF	; 255
    4452:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <KPD_u8GetPressedKey>
	LCD_voidSendString(Local_Au8LCDStr1);
	LCD_u8GoToXY(LCD_u8_LINE_TWO,0);
	LCD_voidSendString(Local_Au8LCDStr2);

	//Wait till 'E' key is pressed
	while(Local_u8PressedKey != 'E')
    4456:	fe 01       	movw	r30, r28
    4458:	ed 51       	subi	r30, 0x1D	; 29
    445a:	ff 4f       	sbci	r31, 0xFF	; 255
    445c:	80 81       	ld	r24, Z
    445e:	85 34       	cpi	r24, 0x45	; 69
    4460:	a9 f7       	brne	.-22     	; 0x444c <main+0x82e>
		//Pull on KPD value
		KPD_u8GetPressedKey(&Local_u8PressedKey);
	}

	//If Key 'E' is pressed, ask for the password (3 trails)
	if(Local_u8PressedKey == 'E')
    4462:	fe 01       	movw	r30, r28
    4464:	ed 51       	subi	r30, 0x1D	; 29
    4466:	ff 4f       	sbci	r31, 0xFF	; 255
    4468:	80 81       	ld	r24, Z
    446a:	85 34       	cpi	r24, 0x45	; 69
    446c:	09 f0       	breq	.+2      	; 0x4470 <main+0x852>
    446e:	26 c1       	rjmp	.+588    	; 0x46bc <main+0xa9e>
    4470:	21 c1       	rjmp	.+578    	; 0x46b4 <main+0xa96>
		//Check entered password
		//3 Trails for wrong password
		while(Local_u8NumberOfTrails < 3)
		{
			//Ask for password
			LCD_voidClearScreen();						  //Clear LCD to enter the password
    4472:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <LCD_voidClearScreen>
			Local_u8Counter = 0;						  //Initiate counter
    4476:	1d a6       	std	Y+45, r1	; 0x2d
			LCD_u8GoToXY(LCD_u8_LINE_ONE,0);			  //Go to the first address on the LCD
    4478:	81 e0       	ldi	r24, 0x01	; 1
    447a:	60 e0       	ldi	r22, 0x00	; 0
    447c:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <LCD_u8GoToXY>
			LCD_voidSendString(Local_Au8LCDStr3);		  //Ask for the password
    4480:	ce 01       	movw	r24, r28
    4482:	82 5b       	subi	r24, 0xB2	; 178
    4484:	9f 4f       	sbci	r25, 0xFF	; 255
    4486:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <LCD_voidSendString>
			Local_u8PressedKey = KPD_u8_KEY_NOT_PRESSED;  //Reinitiate the variable for the pressed key
    448a:	fe 01       	movw	r30, r28
    448c:	ed 51       	subi	r30, 0x1D	; 29
    448e:	ff 4f       	sbci	r31, 0xFF	; 255
    4490:	8f ef       	ldi	r24, 0xFF	; 255
    4492:	80 83       	st	Z, r24

			//Get the entered key and write it as a '*', 4 times for the 4 digits
			LCD_u8GoToXY(LCD_u8_LINE_TWO , 5);			          //Go to the 2nd line on the LCD
    4494:	82 e0       	ldi	r24, 0x02	; 2
    4496:	65 e0       	ldi	r22, 0x05	; 5
    4498:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <LCD_u8GoToXY>
    449c:	24 c0       	rjmp	.+72     	; 0x44e6 <main+0x8c8>
			while(Local_u8Counter < 4)					          //Loop to get the 4 digits
			{
				KPD_u8GetPressedKey(&Local_u8PressedKey);
    449e:	ce 01       	movw	r24, r28
    44a0:	8d 51       	subi	r24, 0x1D	; 29
    44a2:	9f 4f       	sbci	r25, 0xFF	; 255
    44a4:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <KPD_u8GetPressedKey>
				if(Local_u8PressedKey != KPD_u8_KEY_NOT_PRESSED)  //When the key is pressed
    44a8:	fe 01       	movw	r30, r28
    44aa:	ed 51       	subi	r30, 0x1D	; 29
    44ac:	ff 4f       	sbci	r31, 0xFF	; 255
    44ae:	80 81       	ld	r24, Z
    44b0:	8f 3f       	cpi	r24, 0xFF	; 255
    44b2:	c9 f0       	breq	.+50     	; 0x44e6 <main+0x8c8>
				{
					Local_u8EnteredPassword[Local_u8Counter] = Local_u8PressedKey;	//Store the pressed key
    44b4:	8d a5       	ldd	r24, Y+45	; 0x2d
    44b6:	28 2f       	mov	r18, r24
    44b8:	30 e0       	ldi	r19, 0x00	; 0
    44ba:	fe 01       	movw	r30, r28
    44bc:	ed 51       	subi	r30, 0x1D	; 29
    44be:	ff 4f       	sbci	r31, 0xFF	; 255
    44c0:	40 81       	ld	r20, Z
    44c2:	ce 01       	movw	r24, r28
    44c4:	8c 51       	subi	r24, 0x1C	; 28
    44c6:	9f 4f       	sbci	r25, 0xFF	; 255
    44c8:	fc 01       	movw	r30, r24
    44ca:	e2 0f       	add	r30, r18
    44cc:	f3 1f       	adc	r31, r19
    44ce:	40 83       	st	Z, r20
					LCD_voidSendChar('*');											//Enter it as *
    44d0:	8a e2       	ldi	r24, 0x2A	; 42
    44d2:	0e 94 01 15 	call	0x2a02	; 0x2a02 <LCD_voidSendChar>
					Local_u8Counter++;												//Increase counter
    44d6:	8d a5       	ldd	r24, Y+45	; 0x2d
    44d8:	8f 5f       	subi	r24, 0xFF	; 255
    44da:	8d a7       	std	Y+45, r24	; 0x2d
					Local_u8PressedKey = KPD_u8_KEY_NOT_PRESSED;					//Reinitiate the pressed key to wait for the next digit
    44dc:	fe 01       	movw	r30, r28
    44de:	ed 51       	subi	r30, 0x1D	; 29
    44e0:	ff 4f       	sbci	r31, 0xFF	; 255
    44e2:	8f ef       	ldi	r24, 0xFF	; 255
    44e4:	80 83       	st	Z, r24
			LCD_voidSendString(Local_Au8LCDStr3);		  //Ask for the password
			Local_u8PressedKey = KPD_u8_KEY_NOT_PRESSED;  //Reinitiate the variable for the pressed key

			//Get the entered key and write it as a '*', 4 times for the 4 digits
			LCD_u8GoToXY(LCD_u8_LINE_TWO , 5);			          //Go to the 2nd line on the LCD
			while(Local_u8Counter < 4)					          //Loop to get the 4 digits
    44e6:	8d a5       	ldd	r24, Y+45	; 0x2d
    44e8:	84 30       	cpi	r24, 0x04	; 4
    44ea:	c8 f2       	brcs	.-78     	; 0x449e <main+0x880>
					Local_u8PressedKey = KPD_u8_KEY_NOT_PRESSED;					//Reinitiate the pressed key to wait for the next digit
				}
			}

			/*Check the entered password*/
			for(Local_u8Counter = 0 ; Local_u8Counter<4 ; Local_u8Counter++)							//Loop on the 4 digits
    44ec:	1d a6       	std	Y+45, r1	; 0x2d
    44ee:	1b c0       	rjmp	.+54     	; 0x4526 <main+0x908>
			{
				if(App_Au8SystemPassword[Local_u8Counter] == Local_u8EnteredPassword[Local_u8Counter])	//Compare between the entered value and the stored value for the password for each digit
    44f0:	8d a5       	ldd	r24, Y+45	; 0x2d
    44f2:	88 2f       	mov	r24, r24
    44f4:	90 e0       	ldi	r25, 0x00	; 0
    44f6:	fc 01       	movw	r30, r24
    44f8:	eb 55       	subi	r30, 0x5B	; 91
    44fa:	fe 4f       	sbci	r31, 0xFE	; 254
    44fc:	40 81       	ld	r20, Z
    44fe:	8d a5       	ldd	r24, Y+45	; 0x2d
    4500:	28 2f       	mov	r18, r24
    4502:	30 e0       	ldi	r19, 0x00	; 0
    4504:	ce 01       	movw	r24, r28
    4506:	8c 51       	subi	r24, 0x1C	; 28
    4508:	9f 4f       	sbci	r25, 0xFF	; 255
    450a:	fc 01       	movw	r30, r24
    450c:	e2 0f       	add	r30, r18
    450e:	f3 1f       	adc	r31, r19
    4510:	80 81       	ld	r24, Z
    4512:	48 17       	cp	r20, r24
    4514:	31 f4       	brne	.+12     	; 0x4522 <main+0x904>
				{
					Local_u8Flag = 1;			//If it's correct -> Flag = 1
    4516:	81 e0       	ldi	r24, 0x01	; 1
    4518:	8c a7       	std	Y+44, r24	; 0x2c
					Local_u8PressedKey = KPD_u8_KEY_NOT_PRESSED;					//Reinitiate the pressed key to wait for the next digit
				}
			}

			/*Check the entered password*/
			for(Local_u8Counter = 0 ; Local_u8Counter<4 ; Local_u8Counter++)							//Loop on the 4 digits
    451a:	8d a5       	ldd	r24, Y+45	; 0x2d
    451c:	8f 5f       	subi	r24, 0xFF	; 255
    451e:	8d a7       	std	Y+45, r24	; 0x2d
    4520:	02 c0       	rjmp	.+4      	; 0x4526 <main+0x908>
				{
					Local_u8Flag = 1;			//If it's correct -> Flag = 1
				}
				else
				{
					Local_u8Flag = 0;			//If it's wrong -> Flag = 0 , Stop comparing (break)
    4522:	1c a6       	std	Y+44, r1	; 0x2c
    4524:	03 c0       	rjmp	.+6      	; 0x452c <main+0x90e>
					Local_u8PressedKey = KPD_u8_KEY_NOT_PRESSED;					//Reinitiate the pressed key to wait for the next digit
				}
			}

			/*Check the entered password*/
			for(Local_u8Counter = 0 ; Local_u8Counter<4 ; Local_u8Counter++)							//Loop on the 4 digits
    4526:	8d a5       	ldd	r24, Y+45	; 0x2d
    4528:	84 30       	cpi	r24, 0x04	; 4
    452a:	10 f3       	brcs	.-60     	; 0x44f0 <main+0x8d2>
					break;
				}
			}

			/*Print on the comparison result*/
			if(Local_u8Flag == 1)		//if Flag = 1 -> Password is correct
    452c:	8c a5       	ldd	r24, Y+44	; 0x2c
    452e:	81 30       	cpi	r24, 0x01	; 1
    4530:	41 f4       	brne	.+16     	; 0x4542 <main+0x924>
			{
				LCD_voidClearScreen();
    4532:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <LCD_voidClearScreen>
				LCD_voidSendString(Local_Au8LCDStr4);
    4536:	ce 01       	movw	r24, r28
    4538:	83 5a       	subi	r24, 0xA3	; 163
    453a:	9f 4f       	sbci	r25, 0xFF	; 255
    453c:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <LCD_voidSendString>
    4540:	bd c0       	rjmp	.+378    	; 0x46bc <main+0xa9e>
				break;
			}
			else						//if Flag = 0 -> Password is not correct, try again
			{
				Local_u8NumberOfTrails++;	    	    //increase the number of used trails
    4542:	8b a5       	ldd	r24, Y+43	; 0x2b
    4544:	8f 5f       	subi	r24, 0xFF	; 255
    4546:	8b a7       	std	Y+43, r24	; 0x2b
				LCD_voidClearScreen();		        	//Clear screen
    4548:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <LCD_voidClearScreen>
				LCD_u8GoToXY(LCD_u8_LINE_ONE,0);        //Go to the first address on the LCD
    454c:	81 e0       	ldi	r24, 0x01	; 1
    454e:	60 e0       	ldi	r22, 0x00	; 0
    4550:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <LCD_u8GoToXY>
				LCD_voidSendString(Local_Au8LCDStr5);	//Print that the password is wrong
    4554:	ce 01       	movw	r24, r28
    4556:	82 59       	subi	r24, 0x92	; 146
    4558:	9f 4f       	sbci	r25, 0xFF	; 255
    455a:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <LCD_voidSendString>
				LCD_u8GoToXY(LCD_u8_LINE_TWO,0);
    455e:	82 e0       	ldi	r24, 0x02	; 2
    4560:	60 e0       	ldi	r22, 0x00	; 0
    4562:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <LCD_u8GoToXY>
				switch(Local_u8NumberOfTrails)			//Decide depending on the value of the remaining trails the next messages
    4566:	8b a5       	ldd	r24, Y+43	; 0x2b
    4568:	e8 2f       	mov	r30, r24
    456a:	f0 e0       	ldi	r31, 0x00	; 0
    456c:	c7 5f       	subi	r28, 0xF7	; 247
    456e:	de 4f       	sbci	r29, 0xFE	; 254
    4570:	f9 83       	std	Y+1, r31	; 0x01
    4572:	e8 83       	st	Y, r30
    4574:	c9 50       	subi	r28, 0x09	; 9
    4576:	d1 40       	sbci	r29, 0x01	; 1
    4578:	c7 5f       	subi	r28, 0xF7	; 247
    457a:	de 4f       	sbci	r29, 0xFE	; 254
    457c:	28 81       	ld	r18, Y
    457e:	39 81       	ldd	r19, Y+1	; 0x01
    4580:	c9 50       	subi	r28, 0x09	; 9
    4582:	d1 40       	sbci	r29, 0x01	; 1
    4584:	22 30       	cpi	r18, 0x02	; 2
    4586:	31 05       	cpc	r19, r1
    4588:	c1 f0       	breq	.+48     	; 0x45ba <main+0x99c>
    458a:	c7 5f       	subi	r28, 0xF7	; 247
    458c:	de 4f       	sbci	r29, 0xFE	; 254
    458e:	88 81       	ld	r24, Y
    4590:	99 81       	ldd	r25, Y+1	; 0x01
    4592:	c9 50       	subi	r28, 0x09	; 9
    4594:	d1 40       	sbci	r29, 0x01	; 1
    4596:	83 30       	cpi	r24, 0x03	; 3
    4598:	91 05       	cpc	r25, r1
    459a:	a9 f0       	breq	.+42     	; 0x45c6 <main+0x9a8>
    459c:	c7 5f       	subi	r28, 0xF7	; 247
    459e:	de 4f       	sbci	r29, 0xFE	; 254
    45a0:	e8 81       	ld	r30, Y
    45a2:	f9 81       	ldd	r31, Y+1	; 0x01
    45a4:	c9 50       	subi	r28, 0x09	; 9
    45a6:	d1 40       	sbci	r29, 0x01	; 1
    45a8:	e1 30       	cpi	r30, 0x01	; 1
    45aa:	f1 05       	cpc	r31, r1
    45ac:	89 f4       	brne	.+34     	; 0x45d0 <main+0x9b2>
				{
				case 1:
					LCD_voidSendString(Local_Au8LCDStr6);
    45ae:	ce 01       	movw	r24, r28
    45b0:	83 58       	subi	r24, 0x83	; 131
    45b2:	9f 4f       	sbci	r25, 0xFF	; 255
    45b4:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <LCD_voidSendString>
    45b8:	0b c0       	rjmp	.+22     	; 0x45d0 <main+0x9b2>
					break;
				case 2:
					LCD_voidSendString(Local_Au8LCDStr7);
    45ba:	ce 01       	movw	r24, r28
    45bc:	82 57       	subi	r24, 0x72	; 114
    45be:	9f 4f       	sbci	r25, 0xFF	; 255
    45c0:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <LCD_voidSendString>
    45c4:	05 c0       	rjmp	.+10     	; 0x45d0 <main+0x9b2>
					break;
				case 3:
					LCD_voidSendString(Local_Au8LCDStr8);
    45c6:	ce 01       	movw	r24, r28
    45c8:	81 56       	subi	r24, 0x61	; 97
    45ca:	9f 4f       	sbci	r25, 0xFF	; 255
    45cc:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <LCD_voidSendString>
    45d0:	80 e0       	ldi	r24, 0x00	; 0
    45d2:	90 e0       	ldi	r25, 0x00	; 0
    45d4:	aa ef       	ldi	r26, 0xFA	; 250
    45d6:	b4 e4       	ldi	r27, 0x44	; 68
    45d8:	8f a3       	std	Y+39, r24	; 0x27
    45da:	98 a7       	std	Y+40, r25	; 0x28
    45dc:	a9 a7       	std	Y+41, r26	; 0x29
    45de:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45e0:	6f a1       	ldd	r22, Y+39	; 0x27
    45e2:	78 a5       	ldd	r23, Y+40	; 0x28
    45e4:	89 a5       	ldd	r24, Y+41	; 0x29
    45e6:	9a a5       	ldd	r25, Y+42	; 0x2a
    45e8:	20 e0       	ldi	r18, 0x00	; 0
    45ea:	30 e0       	ldi	r19, 0x00	; 0
    45ec:	4a ef       	ldi	r20, 0xFA	; 250
    45ee:	54 e4       	ldi	r21, 0x44	; 68
    45f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45f4:	dc 01       	movw	r26, r24
    45f6:	cb 01       	movw	r24, r22
    45f8:	8b a3       	std	Y+35, r24	; 0x23
    45fa:	9c a3       	std	Y+36, r25	; 0x24
    45fc:	ad a3       	std	Y+37, r26	; 0x25
    45fe:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4600:	6b a1       	ldd	r22, Y+35	; 0x23
    4602:	7c a1       	ldd	r23, Y+36	; 0x24
    4604:	8d a1       	ldd	r24, Y+37	; 0x25
    4606:	9e a1       	ldd	r25, Y+38	; 0x26
    4608:	20 e0       	ldi	r18, 0x00	; 0
    460a:	30 e0       	ldi	r19, 0x00	; 0
    460c:	40 e8       	ldi	r20, 0x80	; 128
    460e:	5f e3       	ldi	r21, 0x3F	; 63
    4610:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4614:	88 23       	and	r24, r24
    4616:	2c f4       	brge	.+10     	; 0x4622 <main+0xa04>
		__ticks = 1;
    4618:	81 e0       	ldi	r24, 0x01	; 1
    461a:	90 e0       	ldi	r25, 0x00	; 0
    461c:	9a a3       	std	Y+34, r25	; 0x22
    461e:	89 a3       	std	Y+33, r24	; 0x21
    4620:	3f c0       	rjmp	.+126    	; 0x46a0 <main+0xa82>
	else if (__tmp > 65535)
    4622:	6b a1       	ldd	r22, Y+35	; 0x23
    4624:	7c a1       	ldd	r23, Y+36	; 0x24
    4626:	8d a1       	ldd	r24, Y+37	; 0x25
    4628:	9e a1       	ldd	r25, Y+38	; 0x26
    462a:	20 e0       	ldi	r18, 0x00	; 0
    462c:	3f ef       	ldi	r19, 0xFF	; 255
    462e:	4f e7       	ldi	r20, 0x7F	; 127
    4630:	57 e4       	ldi	r21, 0x47	; 71
    4632:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4636:	18 16       	cp	r1, r24
    4638:	4c f5       	brge	.+82     	; 0x468c <main+0xa6e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    463a:	6f a1       	ldd	r22, Y+39	; 0x27
    463c:	78 a5       	ldd	r23, Y+40	; 0x28
    463e:	89 a5       	ldd	r24, Y+41	; 0x29
    4640:	9a a5       	ldd	r25, Y+42	; 0x2a
    4642:	20 e0       	ldi	r18, 0x00	; 0
    4644:	30 e0       	ldi	r19, 0x00	; 0
    4646:	40 e2       	ldi	r20, 0x20	; 32
    4648:	51 e4       	ldi	r21, 0x41	; 65
    464a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    464e:	dc 01       	movw	r26, r24
    4650:	cb 01       	movw	r24, r22
    4652:	bc 01       	movw	r22, r24
    4654:	cd 01       	movw	r24, r26
    4656:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    465a:	dc 01       	movw	r26, r24
    465c:	cb 01       	movw	r24, r22
    465e:	9a a3       	std	Y+34, r25	; 0x22
    4660:	89 a3       	std	Y+33, r24	; 0x21
    4662:	0f c0       	rjmp	.+30     	; 0x4682 <main+0xa64>
    4664:	88 ec       	ldi	r24, 0xC8	; 200
    4666:	90 e0       	ldi	r25, 0x00	; 0
    4668:	98 a3       	std	Y+32, r25	; 0x20
    466a:	8f 8f       	std	Y+31, r24	; 0x1f
    466c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    466e:	98 a1       	ldd	r25, Y+32	; 0x20
    4670:	01 97       	sbiw	r24, 0x01	; 1
    4672:	f1 f7       	brne	.-4      	; 0x4670 <main+0xa52>
    4674:	98 a3       	std	Y+32, r25	; 0x20
    4676:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4678:	89 a1       	ldd	r24, Y+33	; 0x21
    467a:	9a a1       	ldd	r25, Y+34	; 0x22
    467c:	01 97       	sbiw	r24, 0x01	; 1
    467e:	9a a3       	std	Y+34, r25	; 0x22
    4680:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4682:	89 a1       	ldd	r24, Y+33	; 0x21
    4684:	9a a1       	ldd	r25, Y+34	; 0x22
    4686:	00 97       	sbiw	r24, 0x00	; 0
    4688:	69 f7       	brne	.-38     	; 0x4664 <main+0xa46>
    468a:	14 c0       	rjmp	.+40     	; 0x46b4 <main+0xa96>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    468c:	6b a1       	ldd	r22, Y+35	; 0x23
    468e:	7c a1       	ldd	r23, Y+36	; 0x24
    4690:	8d a1       	ldd	r24, Y+37	; 0x25
    4692:	9e a1       	ldd	r25, Y+38	; 0x26
    4694:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4698:	dc 01       	movw	r26, r24
    469a:	cb 01       	movw	r24, r22
    469c:	9a a3       	std	Y+34, r25	; 0x22
    469e:	89 a3       	std	Y+33, r24	; 0x21
    46a0:	89 a1       	ldd	r24, Y+33	; 0x21
    46a2:	9a a1       	ldd	r25, Y+34	; 0x22
    46a4:	9e 8f       	std	Y+30, r25	; 0x1e
    46a6:	8d 8f       	std	Y+29, r24	; 0x1d
    46a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    46aa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    46ac:	01 97       	sbiw	r24, 0x01	; 1
    46ae:	f1 f7       	brne	.-4      	; 0x46ac <main+0xa8e>
    46b0:	9e 8f       	std	Y+30, r25	; 0x1e
    46b2:	8d 8f       	std	Y+29, r24	; 0x1d
	//If Key 'E' is pressed, ask for the password (3 trails)
	if(Local_u8PressedKey == 'E')
	{
		//Check entered password
		//3 Trails for wrong password
		while(Local_u8NumberOfTrails < 3)
    46b4:	8b a5       	ldd	r24, Y+43	; 0x2b
    46b6:	83 30       	cpi	r24, 0x03	; 3
    46b8:	08 f4       	brcc	.+2      	; 0x46bc <main+0xa9e>
    46ba:	db ce       	rjmp	.-586    	; 0x4472 <main+0x854>
		}
	}


/*----------------System Serices----------------*/
	if(Local_u8Flag == 1)		//Password was correct
    46bc:	8c a5       	ldd	r24, Y+44	; 0x2c
    46be:	81 30       	cpi	r24, 0x01	; 1
    46c0:	09 f0       	breq	.+2      	; 0x46c4 <main+0xaa6>
    46c2:	2d c1       	rjmp	.+602    	; 0x491e <main+0xd00>
	{
		Local_u8PressedKey = KPD_u8_KEY_NOT_PRESSED;  //Reinitiate the pressed key variable
    46c4:	fe 01       	movw	r30, r28
    46c6:	ed 51       	subi	r30, 0x1D	; 29
    46c8:	ff 4f       	sbci	r31, 0xFF	; 255
    46ca:	8f ef       	ldi	r24, 0xFF	; 255
    46cc:	80 83       	st	Z, r24
		LCD_voidClearScreen();						  //Clear Screen
    46ce:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <LCD_voidClearScreen>
		LCD_voidSendString(Local_Au8LCDStr9);	      //Welcome message
    46d2:	ce 01       	movw	r24, r28
    46d4:	81 55       	subi	r24, 0x51	; 81
    46d6:	9f 4f       	sbci	r25, 0xFF	; 255
    46d8:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <LCD_voidSendString>
    46dc:	80 e0       	ldi	r24, 0x00	; 0
    46de:	90 e0       	ldi	r25, 0x00	; 0
    46e0:	aa ef       	ldi	r26, 0xFA	; 250
    46e2:	b3 e4       	ldi	r27, 0x43	; 67
    46e4:	89 8f       	std	Y+25, r24	; 0x19
    46e6:	9a 8f       	std	Y+26, r25	; 0x1a
    46e8:	ab 8f       	std	Y+27, r26	; 0x1b
    46ea:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46ec:	69 8d       	ldd	r22, Y+25	; 0x19
    46ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    46f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    46f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    46f4:	20 e0       	ldi	r18, 0x00	; 0
    46f6:	30 e0       	ldi	r19, 0x00	; 0
    46f8:	4a ef       	ldi	r20, 0xFA	; 250
    46fa:	54 e4       	ldi	r21, 0x44	; 68
    46fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4700:	dc 01       	movw	r26, r24
    4702:	cb 01       	movw	r24, r22
    4704:	8d 8b       	std	Y+21, r24	; 0x15
    4706:	9e 8b       	std	Y+22, r25	; 0x16
    4708:	af 8b       	std	Y+23, r26	; 0x17
    470a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    470c:	6d 89       	ldd	r22, Y+21	; 0x15
    470e:	7e 89       	ldd	r23, Y+22	; 0x16
    4710:	8f 89       	ldd	r24, Y+23	; 0x17
    4712:	98 8d       	ldd	r25, Y+24	; 0x18
    4714:	20 e0       	ldi	r18, 0x00	; 0
    4716:	30 e0       	ldi	r19, 0x00	; 0
    4718:	40 e8       	ldi	r20, 0x80	; 128
    471a:	5f e3       	ldi	r21, 0x3F	; 63
    471c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4720:	88 23       	and	r24, r24
    4722:	2c f4       	brge	.+10     	; 0x472e <main+0xb10>
		__ticks = 1;
    4724:	81 e0       	ldi	r24, 0x01	; 1
    4726:	90 e0       	ldi	r25, 0x00	; 0
    4728:	9c 8b       	std	Y+20, r25	; 0x14
    472a:	8b 8b       	std	Y+19, r24	; 0x13
    472c:	3f c0       	rjmp	.+126    	; 0x47ac <main+0xb8e>
	else if (__tmp > 65535)
    472e:	6d 89       	ldd	r22, Y+21	; 0x15
    4730:	7e 89       	ldd	r23, Y+22	; 0x16
    4732:	8f 89       	ldd	r24, Y+23	; 0x17
    4734:	98 8d       	ldd	r25, Y+24	; 0x18
    4736:	20 e0       	ldi	r18, 0x00	; 0
    4738:	3f ef       	ldi	r19, 0xFF	; 255
    473a:	4f e7       	ldi	r20, 0x7F	; 127
    473c:	57 e4       	ldi	r21, 0x47	; 71
    473e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4742:	18 16       	cp	r1, r24
    4744:	4c f5       	brge	.+82     	; 0x4798 <main+0xb7a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4746:	69 8d       	ldd	r22, Y+25	; 0x19
    4748:	7a 8d       	ldd	r23, Y+26	; 0x1a
    474a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    474c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    474e:	20 e0       	ldi	r18, 0x00	; 0
    4750:	30 e0       	ldi	r19, 0x00	; 0
    4752:	40 e2       	ldi	r20, 0x20	; 32
    4754:	51 e4       	ldi	r21, 0x41	; 65
    4756:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    475a:	dc 01       	movw	r26, r24
    475c:	cb 01       	movw	r24, r22
    475e:	bc 01       	movw	r22, r24
    4760:	cd 01       	movw	r24, r26
    4762:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4766:	dc 01       	movw	r26, r24
    4768:	cb 01       	movw	r24, r22
    476a:	9c 8b       	std	Y+20, r25	; 0x14
    476c:	8b 8b       	std	Y+19, r24	; 0x13
    476e:	0f c0       	rjmp	.+30     	; 0x478e <main+0xb70>
    4770:	88 ec       	ldi	r24, 0xC8	; 200
    4772:	90 e0       	ldi	r25, 0x00	; 0
    4774:	9a 8b       	std	Y+18, r25	; 0x12
    4776:	89 8b       	std	Y+17, r24	; 0x11
    4778:	89 89       	ldd	r24, Y+17	; 0x11
    477a:	9a 89       	ldd	r25, Y+18	; 0x12
    477c:	01 97       	sbiw	r24, 0x01	; 1
    477e:	f1 f7       	brne	.-4      	; 0x477c <main+0xb5e>
    4780:	9a 8b       	std	Y+18, r25	; 0x12
    4782:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4784:	8b 89       	ldd	r24, Y+19	; 0x13
    4786:	9c 89       	ldd	r25, Y+20	; 0x14
    4788:	01 97       	sbiw	r24, 0x01	; 1
    478a:	9c 8b       	std	Y+20, r25	; 0x14
    478c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    478e:	8b 89       	ldd	r24, Y+19	; 0x13
    4790:	9c 89       	ldd	r25, Y+20	; 0x14
    4792:	00 97       	sbiw	r24, 0x00	; 0
    4794:	69 f7       	brne	.-38     	; 0x4770 <main+0xb52>
    4796:	14 c0       	rjmp	.+40     	; 0x47c0 <main+0xba2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4798:	6d 89       	ldd	r22, Y+21	; 0x15
    479a:	7e 89       	ldd	r23, Y+22	; 0x16
    479c:	8f 89       	ldd	r24, Y+23	; 0x17
    479e:	98 8d       	ldd	r25, Y+24	; 0x18
    47a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47a4:	dc 01       	movw	r26, r24
    47a6:	cb 01       	movw	r24, r22
    47a8:	9c 8b       	std	Y+20, r25	; 0x14
    47aa:	8b 8b       	std	Y+19, r24	; 0x13
    47ac:	8b 89       	ldd	r24, Y+19	; 0x13
    47ae:	9c 89       	ldd	r25, Y+20	; 0x14
    47b0:	98 8b       	std	Y+16, r25	; 0x10
    47b2:	8f 87       	std	Y+15, r24	; 0x0f
    47b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    47b6:	98 89       	ldd	r25, Y+16	; 0x10
    47b8:	01 97       	sbiw	r24, 0x01	; 1
    47ba:	f1 f7       	brne	.-4      	; 0x47b8 <main+0xb9a>
    47bc:	98 8b       	std	Y+16, r25	; 0x10
    47be:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500);
		LCD_u8_MoveScreen(LCD_u8MoveLeft);			  //Moving the screen left to display the whole text
    47c0:	80 e0       	ldi	r24, 0x00	; 0
    47c2:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <LCD_u8_MoveScreen>
    47c6:	80 e0       	ldi	r24, 0x00	; 0
    47c8:	90 e0       	ldi	r25, 0x00	; 0
    47ca:	aa ef       	ldi	r26, 0xFA	; 250
    47cc:	b3 e4       	ldi	r27, 0x43	; 67
    47ce:	8b 87       	std	Y+11, r24	; 0x0b
    47d0:	9c 87       	std	Y+12, r25	; 0x0c
    47d2:	ad 87       	std	Y+13, r26	; 0x0d
    47d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    47d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    47da:	8d 85       	ldd	r24, Y+13	; 0x0d
    47dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    47de:	20 e0       	ldi	r18, 0x00	; 0
    47e0:	30 e0       	ldi	r19, 0x00	; 0
    47e2:	4a ef       	ldi	r20, 0xFA	; 250
    47e4:	54 e4       	ldi	r21, 0x44	; 68
    47e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47ea:	dc 01       	movw	r26, r24
    47ec:	cb 01       	movw	r24, r22
    47ee:	8f 83       	std	Y+7, r24	; 0x07
    47f0:	98 87       	std	Y+8, r25	; 0x08
    47f2:	a9 87       	std	Y+9, r26	; 0x09
    47f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    47f6:	6f 81       	ldd	r22, Y+7	; 0x07
    47f8:	78 85       	ldd	r23, Y+8	; 0x08
    47fa:	89 85       	ldd	r24, Y+9	; 0x09
    47fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    47fe:	20 e0       	ldi	r18, 0x00	; 0
    4800:	30 e0       	ldi	r19, 0x00	; 0
    4802:	40 e8       	ldi	r20, 0x80	; 128
    4804:	5f e3       	ldi	r21, 0x3F	; 63
    4806:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    480a:	88 23       	and	r24, r24
    480c:	2c f4       	brge	.+10     	; 0x4818 <main+0xbfa>
		__ticks = 1;
    480e:	81 e0       	ldi	r24, 0x01	; 1
    4810:	90 e0       	ldi	r25, 0x00	; 0
    4812:	9e 83       	std	Y+6, r25	; 0x06
    4814:	8d 83       	std	Y+5, r24	; 0x05
    4816:	3f c0       	rjmp	.+126    	; 0x4896 <main+0xc78>
	else if (__tmp > 65535)
    4818:	6f 81       	ldd	r22, Y+7	; 0x07
    481a:	78 85       	ldd	r23, Y+8	; 0x08
    481c:	89 85       	ldd	r24, Y+9	; 0x09
    481e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4820:	20 e0       	ldi	r18, 0x00	; 0
    4822:	3f ef       	ldi	r19, 0xFF	; 255
    4824:	4f e7       	ldi	r20, 0x7F	; 127
    4826:	57 e4       	ldi	r21, 0x47	; 71
    4828:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    482c:	18 16       	cp	r1, r24
    482e:	4c f5       	brge	.+82     	; 0x4882 <main+0xc64>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4830:	6b 85       	ldd	r22, Y+11	; 0x0b
    4832:	7c 85       	ldd	r23, Y+12	; 0x0c
    4834:	8d 85       	ldd	r24, Y+13	; 0x0d
    4836:	9e 85       	ldd	r25, Y+14	; 0x0e
    4838:	20 e0       	ldi	r18, 0x00	; 0
    483a:	30 e0       	ldi	r19, 0x00	; 0
    483c:	40 e2       	ldi	r20, 0x20	; 32
    483e:	51 e4       	ldi	r21, 0x41	; 65
    4840:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4844:	dc 01       	movw	r26, r24
    4846:	cb 01       	movw	r24, r22
    4848:	bc 01       	movw	r22, r24
    484a:	cd 01       	movw	r24, r26
    484c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4850:	dc 01       	movw	r26, r24
    4852:	cb 01       	movw	r24, r22
    4854:	9e 83       	std	Y+6, r25	; 0x06
    4856:	8d 83       	std	Y+5, r24	; 0x05
    4858:	0f c0       	rjmp	.+30     	; 0x4878 <main+0xc5a>
    485a:	88 ec       	ldi	r24, 0xC8	; 200
    485c:	90 e0       	ldi	r25, 0x00	; 0
    485e:	9c 83       	std	Y+4, r25	; 0x04
    4860:	8b 83       	std	Y+3, r24	; 0x03
    4862:	8b 81       	ldd	r24, Y+3	; 0x03
    4864:	9c 81       	ldd	r25, Y+4	; 0x04
    4866:	01 97       	sbiw	r24, 0x01	; 1
    4868:	f1 f7       	brne	.-4      	; 0x4866 <main+0xc48>
    486a:	9c 83       	std	Y+4, r25	; 0x04
    486c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    486e:	8d 81       	ldd	r24, Y+5	; 0x05
    4870:	9e 81       	ldd	r25, Y+6	; 0x06
    4872:	01 97       	sbiw	r24, 0x01	; 1
    4874:	9e 83       	std	Y+6, r25	; 0x06
    4876:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4878:	8d 81       	ldd	r24, Y+5	; 0x05
    487a:	9e 81       	ldd	r25, Y+6	; 0x06
    487c:	00 97       	sbiw	r24, 0x00	; 0
    487e:	69 f7       	brne	.-38     	; 0x485a <main+0xc3c>
    4880:	14 c0       	rjmp	.+40     	; 0x48aa <main+0xc8c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4882:	6f 81       	ldd	r22, Y+7	; 0x07
    4884:	78 85       	ldd	r23, Y+8	; 0x08
    4886:	89 85       	ldd	r24, Y+9	; 0x09
    4888:	9a 85       	ldd	r25, Y+10	; 0x0a
    488a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    488e:	dc 01       	movw	r26, r24
    4890:	cb 01       	movw	r24, r22
    4892:	9e 83       	std	Y+6, r25	; 0x06
    4894:	8d 83       	std	Y+5, r24	; 0x05
    4896:	8d 81       	ldd	r24, Y+5	; 0x05
    4898:	9e 81       	ldd	r25, Y+6	; 0x06
    489a:	9a 83       	std	Y+2, r25	; 0x02
    489c:	89 83       	std	Y+1, r24	; 0x01
    489e:	89 81       	ldd	r24, Y+1	; 0x01
    48a0:	9a 81       	ldd	r25, Y+2	; 0x02
    48a2:	01 97       	sbiw	r24, 0x01	; 1
    48a4:	f1 f7       	brne	.-4      	; 0x48a2 <main+0xc84>
    48a6:	9a 83       	std	Y+2, r25	; 0x02
    48a8:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);

		//Choosing the required service from the system
		LCD_voidClearScreen();
    48aa:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <LCD_voidClearScreen>
		LCD_voidSendString(Local_Au8LCDStr10);		//A message to ask for choosing one of the services
    48ae:	ce 01       	movw	r24, r28
    48b0:	8f 53       	subi	r24, 0x3F	; 63
    48b2:	9f 4f       	sbci	r25, 0xFF	; 255
    48b4:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <LCD_voidSendString>
		LCD_u8GoToXY(LCD_u8_LINE_TWO,0);
    48b8:	82 e0       	ldi	r24, 0x02	; 2
    48ba:	60 e0       	ldi	r22, 0x00	; 0
    48bc:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <LCD_u8GoToXY>
		LCD_voidSendString(Local_Au8LCDStr11);		//1 for temperature control service
    48c0:	ce 01       	movw	r24, r28
    48c2:	8e 52       	subi	r24, 0x2E	; 46
    48c4:	9f 4f       	sbci	r25, 0xFF	; 255
    48c6:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <LCD_voidSendString>
		LCD_u8GoToXY(LCD_u8_LINE_TWO,8);
    48ca:	82 e0       	ldi	r24, 0x02	; 2
    48cc:	68 e0       	ldi	r22, 0x08	; 8
    48ce:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <LCD_u8GoToXY>
		LCD_voidSendString(Local_Au8LCDStr12);		//2 for light control
    48d2:	ce 01       	movw	r24, r28
    48d4:	86 52       	subi	r24, 0x26	; 38
    48d6:	9f 4f       	sbci	r25, 0xFF	; 255
    48d8:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <LCD_voidSendString>
    48dc:	05 c0       	rjmp	.+10     	; 0x48e8 <main+0xcca>

		//Pull for the value of the pressed key choice
		while(Local_u8PressedKey == KPD_u8_KEY_NOT_PRESSED)
		{
			KPD_u8GetPressedKey(&Local_u8PressedKey);
    48de:	ce 01       	movw	r24, r28
    48e0:	8d 51       	subi	r24, 0x1D	; 29
    48e2:	9f 4f       	sbci	r25, 0xFF	; 255
    48e4:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <KPD_u8GetPressedKey>
		LCD_voidSendString(Local_Au8LCDStr11);		//1 for temperature control service
		LCD_u8GoToXY(LCD_u8_LINE_TWO,8);
		LCD_voidSendString(Local_Au8LCDStr12);		//2 for light control

		//Pull for the value of the pressed key choice
		while(Local_u8PressedKey == KPD_u8_KEY_NOT_PRESSED)
    48e8:	fe 01       	movw	r30, r28
    48ea:	ed 51       	subi	r30, 0x1D	; 29
    48ec:	ff 4f       	sbci	r31, 0xFF	; 255
    48ee:	80 81       	ld	r24, Z
    48f0:	8f 3f       	cpi	r24, 0xFF	; 255
    48f2:	a9 f3       	breq	.-22     	; 0x48de <main+0xcc0>
		{
			KPD_u8GetPressedKey(&Local_u8PressedKey);
		}

		//Decide depending on the input
		if(Local_u8PressedKey == '1')	//1 for Temperature control service
    48f4:	fe 01       	movw	r30, r28
    48f6:	ed 51       	subi	r30, 0x1D	; 29
    48f8:	ff 4f       	sbci	r31, 0xFF	; 255
    48fa:	80 81       	ld	r24, Z
    48fc:	81 33       	cpi	r24, 0x31	; 49
    48fe:	21 f4       	brne	.+8      	; 0x4908 <main+0xcea>
		{
			Local_u8ChoosedService = '1';
    4900:	81 e3       	ldi	r24, 0x31	; 49
    4902:	80 93 07 02 	sts	0x0207, r24
    4906:	c5 c0       	rjmp	.+394    	; 0x4a92 <main+0xe74>
		}

		else if(Local_u8PressedKey == '2') //2 for lighting control service
    4908:	fe 01       	movw	r30, r28
    490a:	ed 51       	subi	r30, 0x1D	; 29
    490c:	ff 4f       	sbci	r31, 0xFF	; 255
    490e:	80 81       	ld	r24, Z
    4910:	82 33       	cpi	r24, 0x32	; 50
    4912:	09 f0       	breq	.+2      	; 0x4916 <main+0xcf8>
    4914:	be c0       	rjmp	.+380    	; 0x4a92 <main+0xe74>
		{
			Local_u8ChoosedService = '2';
    4916:	82 e3       	ldi	r24, 0x32	; 50
    4918:	80 93 07 02 	sts	0x0207, r24
    491c:	ba c0       	rjmp	.+372    	; 0x4a92 <main+0xe74>
		}
	}

	else if(Local_u8Flag == 0)		//Messages if the password wasn't correct and no trails left
    491e:	8c a5       	ldd	r24, Y+44	; 0x2c
    4920:	88 23       	and	r24, r24
    4922:	09 f0       	breq	.+2      	; 0x4926 <main+0xd08>
    4924:	b6 c0       	rjmp	.+364    	; 0x4a92 <main+0xe74>
	{
		LCD_voidClearScreen();
    4926:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <LCD_voidClearScreen>
		u8 Local_u8Arr[] = "...Thank You...";
    492a:	ce 01       	movw	r24, r28
    492c:	88 51       	subi	r24, 0x18	; 24
    492e:	9f 4f       	sbci	r25, 0xFF	; 255
    4930:	c9 5b       	subi	r28, 0xB9	; 185
    4932:	de 4f       	sbci	r29, 0xFE	; 254
    4934:	99 83       	std	Y+1, r25	; 0x01
    4936:	88 83       	st	Y, r24
    4938:	c7 54       	subi	r28, 0x47	; 71
    493a:	d1 40       	sbci	r29, 0x01	; 1
    493c:	25 e1       	ldi	r18, 0x15	; 21
    493e:	31 e0       	ldi	r19, 0x01	; 1
    4940:	c7 5b       	subi	r28, 0xB7	; 183
    4942:	de 4f       	sbci	r29, 0xFE	; 254
    4944:	39 83       	std	Y+1, r19	; 0x01
    4946:	28 83       	st	Y, r18
    4948:	c9 54       	subi	r28, 0x49	; 73
    494a:	d1 40       	sbci	r29, 0x01	; 1
    494c:	30 e1       	ldi	r19, 0x10	; 16
    494e:	c5 5b       	subi	r28, 0xB5	; 181
    4950:	de 4f       	sbci	r29, 0xFE	; 254
    4952:	38 83       	st	Y, r19
    4954:	cb 54       	subi	r28, 0x4B	; 75
    4956:	d1 40       	sbci	r29, 0x01	; 1
    4958:	c7 5b       	subi	r28, 0xB7	; 183
    495a:	de 4f       	sbci	r29, 0xFE	; 254
    495c:	e8 81       	ld	r30, Y
    495e:	f9 81       	ldd	r31, Y+1	; 0x01
    4960:	c9 54       	subi	r28, 0x49	; 73
    4962:	d1 40       	sbci	r29, 0x01	; 1
    4964:	00 80       	ld	r0, Z
    4966:	c7 5b       	subi	r28, 0xB7	; 183
    4968:	de 4f       	sbci	r29, 0xFE	; 254
    496a:	28 81       	ld	r18, Y
    496c:	39 81       	ldd	r19, Y+1	; 0x01
    496e:	c9 54       	subi	r28, 0x49	; 73
    4970:	d1 40       	sbci	r29, 0x01	; 1
    4972:	2f 5f       	subi	r18, 0xFF	; 255
    4974:	3f 4f       	sbci	r19, 0xFF	; 255
    4976:	c7 5b       	subi	r28, 0xB7	; 183
    4978:	de 4f       	sbci	r29, 0xFE	; 254
    497a:	39 83       	std	Y+1, r19	; 0x01
    497c:	28 83       	st	Y, r18
    497e:	c9 54       	subi	r28, 0x49	; 73
    4980:	d1 40       	sbci	r29, 0x01	; 1
    4982:	c9 5b       	subi	r28, 0xB9	; 185
    4984:	de 4f       	sbci	r29, 0xFE	; 254
    4986:	e8 81       	ld	r30, Y
    4988:	f9 81       	ldd	r31, Y+1	; 0x01
    498a:	c7 54       	subi	r28, 0x47	; 71
    498c:	d1 40       	sbci	r29, 0x01	; 1
    498e:	00 82       	st	Z, r0
    4990:	c9 5b       	subi	r28, 0xB9	; 185
    4992:	de 4f       	sbci	r29, 0xFE	; 254
    4994:	28 81       	ld	r18, Y
    4996:	39 81       	ldd	r19, Y+1	; 0x01
    4998:	c7 54       	subi	r28, 0x47	; 71
    499a:	d1 40       	sbci	r29, 0x01	; 1
    499c:	2f 5f       	subi	r18, 0xFF	; 255
    499e:	3f 4f       	sbci	r19, 0xFF	; 255
    49a0:	c9 5b       	subi	r28, 0xB9	; 185
    49a2:	de 4f       	sbci	r29, 0xFE	; 254
    49a4:	39 83       	std	Y+1, r19	; 0x01
    49a6:	28 83       	st	Y, r18
    49a8:	c7 54       	subi	r28, 0x47	; 71
    49aa:	d1 40       	sbci	r29, 0x01	; 1
    49ac:	c5 5b       	subi	r28, 0xB5	; 181
    49ae:	de 4f       	sbci	r29, 0xFE	; 254
    49b0:	38 81       	ld	r19, Y
    49b2:	cb 54       	subi	r28, 0x4B	; 75
    49b4:	d1 40       	sbci	r29, 0x01	; 1
    49b6:	31 50       	subi	r19, 0x01	; 1
    49b8:	c5 5b       	subi	r28, 0xB5	; 181
    49ba:	de 4f       	sbci	r29, 0xFE	; 254
    49bc:	38 83       	st	Y, r19
    49be:	cb 54       	subi	r28, 0x4B	; 75
    49c0:	d1 40       	sbci	r29, 0x01	; 1
    49c2:	c5 5b       	subi	r28, 0xB5	; 181
    49c4:	de 4f       	sbci	r29, 0xFE	; 254
    49c6:	88 81       	ld	r24, Y
    49c8:	cb 54       	subi	r28, 0x4B	; 75
    49ca:	d1 40       	sbci	r29, 0x01	; 1
    49cc:	88 23       	and	r24, r24
    49ce:	21 f6       	brne	.-120    	; 0x4958 <main+0xd3a>
		u8 Local_u8Arr2[] = "Restart.TryAgain";
    49d0:	ce 01       	movw	r24, r28
    49d2:	88 50       	subi	r24, 0x08	; 8
    49d4:	9f 4f       	sbci	r25, 0xFF	; 255
    49d6:	c4 5b       	subi	r28, 0xB4	; 180
    49d8:	de 4f       	sbci	r29, 0xFE	; 254
    49da:	99 83       	std	Y+1, r25	; 0x01
    49dc:	88 83       	st	Y, r24
    49de:	cc 54       	subi	r28, 0x4C	; 76
    49e0:	d1 40       	sbci	r29, 0x01	; 1
    49e2:	e5 e2       	ldi	r30, 0x25	; 37
    49e4:	f1 e0       	ldi	r31, 0x01	; 1
    49e6:	c2 5b       	subi	r28, 0xB2	; 178
    49e8:	de 4f       	sbci	r29, 0xFE	; 254
    49ea:	f9 83       	std	Y+1, r31	; 0x01
    49ec:	e8 83       	st	Y, r30
    49ee:	ce 54       	subi	r28, 0x4E	; 78
    49f0:	d1 40       	sbci	r29, 0x01	; 1
    49f2:	f1 e1       	ldi	r31, 0x11	; 17
    49f4:	c0 5b       	subi	r28, 0xB0	; 176
    49f6:	de 4f       	sbci	r29, 0xFE	; 254
    49f8:	f8 83       	st	Y, r31
    49fa:	c0 55       	subi	r28, 0x50	; 80
    49fc:	d1 40       	sbci	r29, 0x01	; 1
    49fe:	c2 5b       	subi	r28, 0xB2	; 178
    4a00:	de 4f       	sbci	r29, 0xFE	; 254
    4a02:	e8 81       	ld	r30, Y
    4a04:	f9 81       	ldd	r31, Y+1	; 0x01
    4a06:	ce 54       	subi	r28, 0x4E	; 78
    4a08:	d1 40       	sbci	r29, 0x01	; 1
    4a0a:	00 80       	ld	r0, Z
    4a0c:	c2 5b       	subi	r28, 0xB2	; 178
    4a0e:	de 4f       	sbci	r29, 0xFE	; 254
    4a10:	28 81       	ld	r18, Y
    4a12:	39 81       	ldd	r19, Y+1	; 0x01
    4a14:	ce 54       	subi	r28, 0x4E	; 78
    4a16:	d1 40       	sbci	r29, 0x01	; 1
    4a18:	2f 5f       	subi	r18, 0xFF	; 255
    4a1a:	3f 4f       	sbci	r19, 0xFF	; 255
    4a1c:	c2 5b       	subi	r28, 0xB2	; 178
    4a1e:	de 4f       	sbci	r29, 0xFE	; 254
    4a20:	39 83       	std	Y+1, r19	; 0x01
    4a22:	28 83       	st	Y, r18
    4a24:	ce 54       	subi	r28, 0x4E	; 78
    4a26:	d1 40       	sbci	r29, 0x01	; 1
    4a28:	c4 5b       	subi	r28, 0xB4	; 180
    4a2a:	de 4f       	sbci	r29, 0xFE	; 254
    4a2c:	e8 81       	ld	r30, Y
    4a2e:	f9 81       	ldd	r31, Y+1	; 0x01
    4a30:	cc 54       	subi	r28, 0x4C	; 76
    4a32:	d1 40       	sbci	r29, 0x01	; 1
    4a34:	00 82       	st	Z, r0
    4a36:	c4 5b       	subi	r28, 0xB4	; 180
    4a38:	de 4f       	sbci	r29, 0xFE	; 254
    4a3a:	28 81       	ld	r18, Y
    4a3c:	39 81       	ldd	r19, Y+1	; 0x01
    4a3e:	cc 54       	subi	r28, 0x4C	; 76
    4a40:	d1 40       	sbci	r29, 0x01	; 1
    4a42:	2f 5f       	subi	r18, 0xFF	; 255
    4a44:	3f 4f       	sbci	r19, 0xFF	; 255
    4a46:	c4 5b       	subi	r28, 0xB4	; 180
    4a48:	de 4f       	sbci	r29, 0xFE	; 254
    4a4a:	39 83       	std	Y+1, r19	; 0x01
    4a4c:	28 83       	st	Y, r18
    4a4e:	cc 54       	subi	r28, 0x4C	; 76
    4a50:	d1 40       	sbci	r29, 0x01	; 1
    4a52:	c0 5b       	subi	r28, 0xB0	; 176
    4a54:	de 4f       	sbci	r29, 0xFE	; 254
    4a56:	38 81       	ld	r19, Y
    4a58:	c0 55       	subi	r28, 0x50	; 80
    4a5a:	d1 40       	sbci	r29, 0x01	; 1
    4a5c:	31 50       	subi	r19, 0x01	; 1
    4a5e:	c0 5b       	subi	r28, 0xB0	; 176
    4a60:	de 4f       	sbci	r29, 0xFE	; 254
    4a62:	38 83       	st	Y, r19
    4a64:	c0 55       	subi	r28, 0x50	; 80
    4a66:	d1 40       	sbci	r29, 0x01	; 1
    4a68:	c0 5b       	subi	r28, 0xB0	; 176
    4a6a:	de 4f       	sbci	r29, 0xFE	; 254
    4a6c:	88 81       	ld	r24, Y
    4a6e:	c0 55       	subi	r28, 0x50	; 80
    4a70:	d1 40       	sbci	r29, 0x01	; 1
    4a72:	88 23       	and	r24, r24
    4a74:	21 f6       	brne	.-120    	; 0x49fe <main+0xde0>
		LCD_voidSendString(Local_u8Arr);
    4a76:	ce 01       	movw	r24, r28
    4a78:	88 51       	subi	r24, 0x18	; 24
    4a7a:	9f 4f       	sbci	r25, 0xFF	; 255
    4a7c:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <LCD_voidSendString>
		LCD_u8GoToXY(LCD_u8_LINE_TWO,0);
    4a80:	82 e0       	ldi	r24, 0x02	; 2
    4a82:	60 e0       	ldi	r22, 0x00	; 0
    4a84:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <LCD_u8GoToXY>
		LCD_voidSendString(Local_u8Arr2);
    4a88:	ce 01       	movw	r24, r28
    4a8a:	88 50       	subi	r24, 0x08	; 8
    4a8c:	9f 4f       	sbci	r25, 0xFF	; 255
    4a8e:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <LCD_voidSendString>
	}

	while(1)
	{
		if(Local_u8ChoosedService == '1')
    4a92:	80 91 07 02 	lds	r24, 0x0207
    4a96:	81 33       	cpi	r24, 0x31	; 49
    4a98:	31 f4       	brne	.+12     	; 0x4aa6 <main+0xe88>
		{
			/*Read thae value of LM35 which is on channel1 in the ADC periphera0*/
			ADC_u8GetDigitalValueAsynch(ADC_u8_SINGLE_ENDED_INPUT_CHANNEL_ADC0 , &App_voidTempControlSystem);
    4a9a:	20 ea       	ldi	r18, 0xA0	; 160
    4a9c:	35 e2       	ldi	r19, 0x25	; 37
    4a9e:	80 e0       	ldi	r24, 0x00	; 0
    4aa0:	b9 01       	movw	r22, r18
    4aa2:	0e 94 04 07 	call	0xe08	; 0xe08 <ADC_u8GetDigitalValueAsynch>
		}

		if(Local_u8ChoosedService == '2')
    4aa6:	80 91 07 02 	lds	r24, 0x0207
    4aaa:	82 33       	cpi	r24, 0x32	; 50
    4aac:	31 f4       	brne	.+12     	; 0x4aba <main+0xe9c>
		{
			/*Read thae value of LDR which is on channel0 in the ADC peripheral*/
			ADC_u8GetDigitalValueAsynch(ADC_u8_SINGLE_ENDED_INPUT_CHANNEL_ADC1 , &App_voidLightControlSystem);
    4aae:	24 eb       	ldi	r18, 0xB4	; 180
    4ab0:	37 e2       	ldi	r19, 0x27	; 39
    4ab2:	81 e0       	ldi	r24, 0x01	; 1
    4ab4:	b9 01       	movw	r22, r18
    4ab6:	0e 94 04 07 	call	0xe08	; 0xe08 <ADC_u8GetDigitalValueAsynch>
		}

		if(Local_u8ChoosedService == '0')	//If we get back to the main menu using EXTI
    4aba:	80 91 07 02 	lds	r24, 0x0207
    4abe:	80 33       	cpi	r24, 0x30	; 48
    4ac0:	41 f7       	brne	.-48     	; 0x4a92 <main+0xe74>
		{
			Local_u8PressedKey = KPD_u8_KEY_NOT_PRESSED;  //Reinitiate the pressed key variable
    4ac2:	fe 01       	movw	r30, r28
    4ac4:	ed 51       	subi	r30, 0x1D	; 29
    4ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ac8:	8f ef       	ldi	r24, 0xFF	; 255
    4aca:	80 83       	st	Z, r24

			//Choosing the required service from the system
			LCD_voidClearScreen();
    4acc:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <LCD_voidClearScreen>
			LCD_voidSendString(Local_Au8LCDStr10);		//A message to ask for choosing one of the services
    4ad0:	ce 01       	movw	r24, r28
    4ad2:	8f 53       	subi	r24, 0x3F	; 63
    4ad4:	9f 4f       	sbci	r25, 0xFF	; 255
    4ad6:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <LCD_voidSendString>
			LCD_u8GoToXY(LCD_u8_LINE_TWO,0);
    4ada:	82 e0       	ldi	r24, 0x02	; 2
    4adc:	60 e0       	ldi	r22, 0x00	; 0
    4ade:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <LCD_u8GoToXY>
			LCD_voidSendString(Local_Au8LCDStr11);		//1 for temperature control service
    4ae2:	ce 01       	movw	r24, r28
    4ae4:	8e 52       	subi	r24, 0x2E	; 46
    4ae6:	9f 4f       	sbci	r25, 0xFF	; 255
    4ae8:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <LCD_voidSendString>
			LCD_u8GoToXY(LCD_u8_LINE_TWO,8);
    4aec:	82 e0       	ldi	r24, 0x02	; 2
    4aee:	68 e0       	ldi	r22, 0x08	; 8
    4af0:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <LCD_u8GoToXY>
			LCD_voidSendString(Local_Au8LCDStr12);		//2 for light control
    4af4:	ce 01       	movw	r24, r28
    4af6:	86 52       	subi	r24, 0x26	; 38
    4af8:	9f 4f       	sbci	r25, 0xFF	; 255
    4afa:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <LCD_voidSendString>
    4afe:	05 c0       	rjmp	.+10     	; 0x4b0a <main+0xeec>

			//Pull for the value of the pressed key choice
			while(Local_u8PressedKey == KPD_u8_KEY_NOT_PRESSED)
			{
				KPD_u8GetPressedKey(&Local_u8PressedKey);
    4b00:	ce 01       	movw	r24, r28
    4b02:	8d 51       	subi	r24, 0x1D	; 29
    4b04:	9f 4f       	sbci	r25, 0xFF	; 255
    4b06:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <KPD_u8GetPressedKey>
			LCD_voidSendString(Local_Au8LCDStr11);		//1 for temperature control service
			LCD_u8GoToXY(LCD_u8_LINE_TWO,8);
			LCD_voidSendString(Local_Au8LCDStr12);		//2 for light control

			//Pull for the value of the pressed key choice
			while(Local_u8PressedKey == KPD_u8_KEY_NOT_PRESSED)
    4b0a:	fe 01       	movw	r30, r28
    4b0c:	ed 51       	subi	r30, 0x1D	; 29
    4b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b10:	80 81       	ld	r24, Z
    4b12:	8f 3f       	cpi	r24, 0xFF	; 255
    4b14:	a9 f3       	breq	.-22     	; 0x4b00 <main+0xee2>
			{
				KPD_u8GetPressedKey(&Local_u8PressedKey);
			}

			//Decide depending on the input
			if(Local_u8PressedKey == '1')	//1 for Temperature control service
    4b16:	fe 01       	movw	r30, r28
    4b18:	ed 51       	subi	r30, 0x1D	; 29
    4b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    4b1c:	80 81       	ld	r24, Z
    4b1e:	81 33       	cpi	r24, 0x31	; 49
    4b20:	21 f4       	brne	.+8      	; 0x4b2a <main+0xf0c>
			{
				Local_u8ChoosedService = '1';
    4b22:	81 e3       	ldi	r24, 0x31	; 49
    4b24:	80 93 07 02 	sts	0x0207, r24
    4b28:	b4 cf       	rjmp	.-152    	; 0x4a92 <main+0xe74>
			}

			else if(Local_u8PressedKey == '2') //2 for lighting control service
    4b2a:	fe 01       	movw	r30, r28
    4b2c:	ed 51       	subi	r30, 0x1D	; 29
    4b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b30:	80 81       	ld	r24, Z
    4b32:	82 33       	cpi	r24, 0x32	; 50
    4b34:	09 f0       	breq	.+2      	; 0x4b38 <main+0xf1a>
    4b36:	ad cf       	rjmp	.-166    	; 0x4a92 <main+0xe74>
			{
				Local_u8ChoosedService = '2';
    4b38:	82 e3       	ldi	r24, 0x32	; 50
    4b3a:	80 93 07 02 	sts	0x0207, r24
    4b3e:	a9 cf       	rjmp	.-174    	; 0x4a92 <main+0xe74>

00004b40 <App_voidTempControlSystem>:
	return 0;
}

void  App_voidTempControlSystem(u16 Copy_u16DigitalReturnedValue)
/*Application using LM35(Temperature sensor)*/
{
    4b40:	df 93       	push	r29
    4b42:	cf 93       	push	r28
    4b44:	cd b7       	in	r28, 0x3d	; 61
    4b46:	de b7       	in	r29, 0x3e	; 62
    4b48:	c7 54       	subi	r28, 0x47	; 71
    4b4a:	d0 40       	sbci	r29, 0x00	; 0
    4b4c:	0f b6       	in	r0, 0x3f	; 63
    4b4e:	f8 94       	cli
    4b50:	de bf       	out	0x3e, r29	; 62
    4b52:	0f be       	out	0x3f, r0	; 63
    4b54:	cd bf       	out	0x3d, r28	; 61
    4b56:	9b ab       	std	Y+51, r25	; 0x33
    4b58:	8a ab       	std	Y+50, r24	; 0x32

	u8 Local_Au8LCDStr18[] = "Degree=";
    4b5a:	ce 01       	movw	r24, r28
    4b5c:	43 96       	adiw	r24, 0x13	; 19
    4b5e:	9d ab       	std	Y+53, r25	; 0x35
    4b60:	8c ab       	std	Y+52, r24	; 0x34
    4b62:	e6 e3       	ldi	r30, 0x36	; 54
    4b64:	f1 e0       	ldi	r31, 0x01	; 1
    4b66:	ff ab       	std	Y+55, r31	; 0x37
    4b68:	ee ab       	std	Y+54, r30	; 0x36
    4b6a:	f8 e0       	ldi	r31, 0x08	; 8
    4b6c:	f8 af       	std	Y+56, r31	; 0x38
    4b6e:	ee a9       	ldd	r30, Y+54	; 0x36
    4b70:	ff a9       	ldd	r31, Y+55	; 0x37
    4b72:	00 80       	ld	r0, Z
    4b74:	8e a9       	ldd	r24, Y+54	; 0x36
    4b76:	9f a9       	ldd	r25, Y+55	; 0x37
    4b78:	01 96       	adiw	r24, 0x01	; 1
    4b7a:	9f ab       	std	Y+55, r25	; 0x37
    4b7c:	8e ab       	std	Y+54, r24	; 0x36
    4b7e:	ec a9       	ldd	r30, Y+52	; 0x34
    4b80:	fd a9       	ldd	r31, Y+53	; 0x35
    4b82:	00 82       	st	Z, r0
    4b84:	8c a9       	ldd	r24, Y+52	; 0x34
    4b86:	9d a9       	ldd	r25, Y+53	; 0x35
    4b88:	01 96       	adiw	r24, 0x01	; 1
    4b8a:	9d ab       	std	Y+53, r25	; 0x35
    4b8c:	8c ab       	std	Y+52, r24	; 0x34
    4b8e:	98 ad       	ldd	r25, Y+56	; 0x38
    4b90:	91 50       	subi	r25, 0x01	; 1
    4b92:	98 af       	std	Y+56, r25	; 0x38
    4b94:	e8 ad       	ldd	r30, Y+56	; 0x38
    4b96:	ee 23       	and	r30, r30
    4b98:	51 f7       	brne	.-44     	; 0x4b6e <App_voidTempControlSystem+0x2e>
	u8 Local_Au8LCDStr19[] = "HOT!";
    4b9a:	ce 01       	movw	r24, r28
    4b9c:	4b 96       	adiw	r24, 0x1b	; 27
    4b9e:	9a af       	std	Y+58, r25	; 0x3a
    4ba0:	89 af       	std	Y+57, r24	; 0x39
    4ba2:	ee e3       	ldi	r30, 0x3E	; 62
    4ba4:	f1 e0       	ldi	r31, 0x01	; 1
    4ba6:	fc af       	std	Y+60, r31	; 0x3c
    4ba8:	eb af       	std	Y+59, r30	; 0x3b
    4baa:	f5 e0       	ldi	r31, 0x05	; 5
    4bac:	fd af       	std	Y+61, r31	; 0x3d
    4bae:	eb ad       	ldd	r30, Y+59	; 0x3b
    4bb0:	fc ad       	ldd	r31, Y+60	; 0x3c
    4bb2:	00 80       	ld	r0, Z
    4bb4:	8b ad       	ldd	r24, Y+59	; 0x3b
    4bb6:	9c ad       	ldd	r25, Y+60	; 0x3c
    4bb8:	01 96       	adiw	r24, 0x01	; 1
    4bba:	9c af       	std	Y+60, r25	; 0x3c
    4bbc:	8b af       	std	Y+59, r24	; 0x3b
    4bbe:	e9 ad       	ldd	r30, Y+57	; 0x39
    4bc0:	fa ad       	ldd	r31, Y+58	; 0x3a
    4bc2:	00 82       	st	Z, r0
    4bc4:	89 ad       	ldd	r24, Y+57	; 0x39
    4bc6:	9a ad       	ldd	r25, Y+58	; 0x3a
    4bc8:	01 96       	adiw	r24, 0x01	; 1
    4bca:	9a af       	std	Y+58, r25	; 0x3a
    4bcc:	89 af       	std	Y+57, r24	; 0x39
    4bce:	9d ad       	ldd	r25, Y+61	; 0x3d
    4bd0:	91 50       	subi	r25, 0x01	; 1
    4bd2:	9d af       	std	Y+61, r25	; 0x3d
    4bd4:	ed ad       	ldd	r30, Y+61	; 0x3d
    4bd6:	ee 23       	and	r30, r30
    4bd8:	51 f7       	brne	.-44     	; 0x4bae <App_voidTempControlSystem+0x6e>
	u8 Local_Au8LCDStr20[] = "Cold!";
    4bda:	ce 01       	movw	r24, r28
    4bdc:	80 96       	adiw	r24, 0x20	; 32
    4bde:	9f af       	std	Y+63, r25	; 0x3f
    4be0:	8e af       	std	Y+62, r24	; 0x3e
    4be2:	e3 e4       	ldi	r30, 0x43	; 67
    4be4:	f1 e0       	ldi	r31, 0x01	; 1
    4be6:	22 96       	adiw	r28, 0x02	; 2
    4be8:	ff af       	std	Y+63, r31	; 0x3f
    4bea:	ee af       	std	Y+62, r30	; 0x3e
    4bec:	22 97       	sbiw	r28, 0x02	; 2
    4bee:	f6 e0       	ldi	r31, 0x06	; 6
    4bf0:	23 96       	adiw	r28, 0x03	; 3
    4bf2:	ff af       	std	Y+63, r31	; 0x3f
    4bf4:	23 97       	sbiw	r28, 0x03	; 3
    4bf6:	22 96       	adiw	r28, 0x02	; 2
    4bf8:	ee ad       	ldd	r30, Y+62	; 0x3e
    4bfa:	ff ad       	ldd	r31, Y+63	; 0x3f
    4bfc:	22 97       	sbiw	r28, 0x02	; 2
    4bfe:	00 80       	ld	r0, Z
    4c00:	22 96       	adiw	r28, 0x02	; 2
    4c02:	8e ad       	ldd	r24, Y+62	; 0x3e
    4c04:	9f ad       	ldd	r25, Y+63	; 0x3f
    4c06:	22 97       	sbiw	r28, 0x02	; 2
    4c08:	01 96       	adiw	r24, 0x01	; 1
    4c0a:	22 96       	adiw	r28, 0x02	; 2
    4c0c:	9f af       	std	Y+63, r25	; 0x3f
    4c0e:	8e af       	std	Y+62, r24	; 0x3e
    4c10:	22 97       	sbiw	r28, 0x02	; 2
    4c12:	ee ad       	ldd	r30, Y+62	; 0x3e
    4c14:	ff ad       	ldd	r31, Y+63	; 0x3f
    4c16:	00 82       	st	Z, r0
    4c18:	8e ad       	ldd	r24, Y+62	; 0x3e
    4c1a:	9f ad       	ldd	r25, Y+63	; 0x3f
    4c1c:	01 96       	adiw	r24, 0x01	; 1
    4c1e:	9f af       	std	Y+63, r25	; 0x3f
    4c20:	8e af       	std	Y+62, r24	; 0x3e
    4c22:	23 96       	adiw	r28, 0x03	; 3
    4c24:	9f ad       	ldd	r25, Y+63	; 0x3f
    4c26:	23 97       	sbiw	r28, 0x03	; 3
    4c28:	91 50       	subi	r25, 0x01	; 1
    4c2a:	23 96       	adiw	r28, 0x03	; 3
    4c2c:	9f af       	std	Y+63, r25	; 0x3f
    4c2e:	23 97       	sbiw	r28, 0x03	; 3
    4c30:	23 96       	adiw	r28, 0x03	; 3
    4c32:	ef ad       	ldd	r30, Y+63	; 0x3f
    4c34:	23 97       	sbiw	r28, 0x03	; 3
    4c36:	ee 23       	and	r30, r30
    4c38:	f1 f6       	brne	.-68     	; 0x4bf6 <App_voidTempControlSystem+0xb6>
	u8 Local_Au8LCDStr21[] = "Duty Cycle=";
    4c3a:	ce 01       	movw	r24, r28
    4c3c:	86 96       	adiw	r24, 0x26	; 38
    4c3e:	25 96       	adiw	r28, 0x05	; 5
    4c40:	9f af       	std	Y+63, r25	; 0x3f
    4c42:	8e af       	std	Y+62, r24	; 0x3e
    4c44:	25 97       	sbiw	r28, 0x05	; 5
    4c46:	e9 e4       	ldi	r30, 0x49	; 73
    4c48:	f1 e0       	ldi	r31, 0x01	; 1
    4c4a:	27 96       	adiw	r28, 0x07	; 7
    4c4c:	ff af       	std	Y+63, r31	; 0x3f
    4c4e:	ee af       	std	Y+62, r30	; 0x3e
    4c50:	27 97       	sbiw	r28, 0x07	; 7
    4c52:	fc e0       	ldi	r31, 0x0C	; 12
    4c54:	28 96       	adiw	r28, 0x08	; 8
    4c56:	ff af       	std	Y+63, r31	; 0x3f
    4c58:	28 97       	sbiw	r28, 0x08	; 8
    4c5a:	27 96       	adiw	r28, 0x07	; 7
    4c5c:	ee ad       	ldd	r30, Y+62	; 0x3e
    4c5e:	ff ad       	ldd	r31, Y+63	; 0x3f
    4c60:	27 97       	sbiw	r28, 0x07	; 7
    4c62:	00 80       	ld	r0, Z
    4c64:	27 96       	adiw	r28, 0x07	; 7
    4c66:	8e ad       	ldd	r24, Y+62	; 0x3e
    4c68:	9f ad       	ldd	r25, Y+63	; 0x3f
    4c6a:	27 97       	sbiw	r28, 0x07	; 7
    4c6c:	01 96       	adiw	r24, 0x01	; 1
    4c6e:	27 96       	adiw	r28, 0x07	; 7
    4c70:	9f af       	std	Y+63, r25	; 0x3f
    4c72:	8e af       	std	Y+62, r24	; 0x3e
    4c74:	27 97       	sbiw	r28, 0x07	; 7
    4c76:	25 96       	adiw	r28, 0x05	; 5
    4c78:	ee ad       	ldd	r30, Y+62	; 0x3e
    4c7a:	ff ad       	ldd	r31, Y+63	; 0x3f
    4c7c:	25 97       	sbiw	r28, 0x05	; 5
    4c7e:	00 82       	st	Z, r0
    4c80:	25 96       	adiw	r28, 0x05	; 5
    4c82:	8e ad       	ldd	r24, Y+62	; 0x3e
    4c84:	9f ad       	ldd	r25, Y+63	; 0x3f
    4c86:	25 97       	sbiw	r28, 0x05	; 5
    4c88:	01 96       	adiw	r24, 0x01	; 1
    4c8a:	25 96       	adiw	r28, 0x05	; 5
    4c8c:	9f af       	std	Y+63, r25	; 0x3f
    4c8e:	8e af       	std	Y+62, r24	; 0x3e
    4c90:	25 97       	sbiw	r28, 0x05	; 5
    4c92:	28 96       	adiw	r28, 0x08	; 8
    4c94:	9f ad       	ldd	r25, Y+63	; 0x3f
    4c96:	28 97       	sbiw	r28, 0x08	; 8
    4c98:	91 50       	subi	r25, 0x01	; 1
    4c9a:	28 96       	adiw	r28, 0x08	; 8
    4c9c:	9f af       	std	Y+63, r25	; 0x3f
    4c9e:	28 97       	sbiw	r28, 0x08	; 8
    4ca0:	28 96       	adiw	r28, 0x08	; 8
    4ca2:	ef ad       	ldd	r30, Y+63	; 0x3f
    4ca4:	28 97       	sbiw	r28, 0x08	; 8
    4ca6:	ee 23       	and	r30, r30
    4ca8:	c1 f6       	brne	.-80     	; 0x4c5a <App_voidTempControlSystem+0x11a>

	/*Calculate Analog Value = Digital Value * Step Size
	 *Step Size = Max Voltage / 2**Resolution*/
	u16 Local_u16AnalogValue = (Copy_u16DigitalReturnedValue * 5000UL)/1024;
    4caa:	8a a9       	ldd	r24, Y+50	; 0x32
    4cac:	9b a9       	ldd	r25, Y+51	; 0x33
    4cae:	cc 01       	movw	r24, r24
    4cb0:	a0 e0       	ldi	r26, 0x00	; 0
    4cb2:	b0 e0       	ldi	r27, 0x00	; 0
    4cb4:	28 e8       	ldi	r18, 0x88	; 136
    4cb6:	33 e1       	ldi	r19, 0x13	; 19
    4cb8:	40 e0       	ldi	r20, 0x00	; 0
    4cba:	50 e0       	ldi	r21, 0x00	; 0
    4cbc:	bc 01       	movw	r22, r24
    4cbe:	cd 01       	movw	r24, r26
    4cc0:	0e 94 19 2a 	call	0x5432	; 0x5432 <__mulsi3>
    4cc4:	dc 01       	movw	r26, r24
    4cc6:	cb 01       	movw	r24, r22
    4cc8:	07 2e       	mov	r0, r23
    4cca:	7a e0       	ldi	r23, 0x0A	; 10
    4ccc:	b6 95       	lsr	r27
    4cce:	a7 95       	ror	r26
    4cd0:	97 95       	ror	r25
    4cd2:	87 95       	ror	r24
    4cd4:	7a 95       	dec	r23
    4cd6:	d1 f7       	brne	.-12     	; 0x4ccc <App_voidTempControlSystem+0x18c>
    4cd8:	70 2d       	mov	r23, r0
    4cda:	9a 8b       	std	Y+18, r25	; 0x12
    4cdc:	89 8b       	std	Y+17, r24	; 0x11
	u16 Local_DegreeInCelsius = Local_u16AnalogValue/10;
    4cde:	89 89       	ldd	r24, Y+17	; 0x11
    4ce0:	9a 89       	ldd	r25, Y+18	; 0x12
    4ce2:	2a e0       	ldi	r18, 0x0A	; 10
    4ce4:	30 e0       	ldi	r19, 0x00	; 0
    4ce6:	b9 01       	movw	r22, r18
    4ce8:	0e 94 38 2a 	call	0x5470	; 0x5470 <__udivmodhi4>
    4cec:	cb 01       	movw	r24, r22
    4cee:	98 8b       	std	Y+16, r25	; 0x10
    4cf0:	8f 87       	std	Y+15, r24	; 0x0f

	//Write the results of the analog value on the screen
	LCD_voidClearScreen();
    4cf2:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <LCD_voidClearScreen>

	LCD_u8GoToXY(LCD_u8_LINE_ONE,0);
    4cf6:	81 e0       	ldi	r24, 0x01	; 1
    4cf8:	60 e0       	ldi	r22, 0x00	; 0
    4cfa:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <LCD_u8GoToXY>
	LCD_voidSendString(Local_Au8LCDStr18);
    4cfe:	ce 01       	movw	r24, r28
    4d00:	43 96       	adiw	r24, 0x13	; 19
    4d02:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <LCD_voidSendString>
	LCD_voidSendNum(Local_DegreeInCelsius);
    4d06:	8f 85       	ldd	r24, Y+15	; 0x0f
    4d08:	98 89       	ldd	r25, Y+16	; 0x10
    4d0a:	cc 01       	movw	r24, r24
    4d0c:	a0 e0       	ldi	r26, 0x00	; 0
    4d0e:	b0 e0       	ldi	r27, 0x00	; 0
    4d10:	bc 01       	movw	r22, r24
    4d12:	cd 01       	movw	r24, r26
    4d14:	0e 94 14 16 	call	0x2c28	; 0x2c28 <LCD_voidSendNum>

	if(Local_DegreeInCelsius > 25)		//If temp > 25 --> Hot Temp
    4d18:	8f 85       	ldd	r24, Y+15	; 0x0f
    4d1a:	98 89       	ldd	r25, Y+16	; 0x10
    4d1c:	8a 31       	cpi	r24, 0x1A	; 26
    4d1e:	91 05       	cpc	r25, r1
    4d20:	08 f4       	brcc	.+2      	; 0x4d24 <App_voidTempControlSystem+0x1e4>
    4d22:	55 c0       	rjmp	.+170    	; 0x4dce <App_voidTempControlSystem+0x28e>
	{
		LCD_u8GoToXY(LCD_u8_LINE_ONE , 12);
    4d24:	81 e0       	ldi	r24, 0x01	; 1
    4d26:	6c e0       	ldi	r22, 0x0C	; 12
    4d28:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <LCD_u8GoToXY>
		LCD_voidSendString(Local_Au8LCDStr19);
    4d2c:	ce 01       	movw	r24, r28
    4d2e:	4b 96       	adiw	r24, 0x1b	; 27
    4d30:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <LCD_voidSendString>

		/*Turn on RED LED / Turn OFF GREEN LED*/
		DIO_u8SetPinValue(DIO_u8_PORTA , DIO_u8_PIN7 , DIO_u8_HIGH);
    4d34:	80 e0       	ldi	r24, 0x00	; 0
    4d36:	67 e0       	ldi	r22, 0x07	; 7
    4d38:	41 e0       	ldi	r20, 0x01	; 1
    4d3a:	0e 94 a6 09 	call	0x134c	; 0x134c <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTA , DIO_u8_PIN4 , DIO_u8_LOW);
    4d3e:	80 e0       	ldi	r24, 0x00	; 0
    4d40:	64 e0       	ldi	r22, 0x04	; 4
    4d42:	40 e0       	ldi	r20, 0x00	; 0
    4d44:	0e 94 a6 09 	call	0x134c	; 0x134c <DIO_u8SetPinValue>

		LCD_u8GoToXY(LCD_u8_LINE_TWO , 0);
    4d48:	82 e0       	ldi	r24, 0x02	; 2
    4d4a:	60 e0       	ldi	r22, 0x00	; 0
    4d4c:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <LCD_u8GoToXY>
		LCD_voidSendString(Local_Au8LCDStr21);
    4d50:	ce 01       	movw	r24, r28
    4d52:	86 96       	adiw	r24, 0x26	; 38
    4d54:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <LCD_voidSendString>
		/*Turn on Fan (DC motor) with a duty cycle depending on the temperature*/
		//TIMER0 , PWM Fast Mode , Non-Inverting
		if((Local_DegreeInCelsius > 25) && (Local_DegreeInCelsius <30))
    4d58:	8f 85       	ldd	r24, Y+15	; 0x0f
    4d5a:	98 89       	ldd	r25, Y+16	; 0x10
    4d5c:	8a 31       	cpi	r24, 0x1A	; 26
    4d5e:	91 05       	cpc	r25, r1
    4d60:	90 f0       	brcs	.+36     	; 0x4d86 <App_voidTempControlSystem+0x246>
    4d62:	8f 85       	ldd	r24, Y+15	; 0x0f
    4d64:	98 89       	ldd	r25, Y+16	; 0x10
    4d66:	8e 31       	cpi	r24, 0x1E	; 30
    4d68:	91 05       	cpc	r25, r1
    4d6a:	68 f4       	brcc	.+26     	; 0x4d86 <App_voidTempControlSystem+0x246>
			/* Timer freq = 8MHZ/8 = 1MHZ
			   Tick time = 1usec
			   OverFlow time = 256usec
			   Duty cycle = 40%
			   OCR0 = 256*0.4 -1 = 101*/
			TIMER0_voidSetCompareMatchValue(101);
    4d6c:	85 e6       	ldi	r24, 0x65	; 101
    4d6e:	0e 94 52 19 	call	0x32a4	; 0x32a4 <TIMER0_voidSetCompareMatchValue>
			LCD_voidSendNum(40);
    4d72:	68 e2       	ldi	r22, 0x28	; 40
    4d74:	70 e0       	ldi	r23, 0x00	; 0
    4d76:	80 e0       	ldi	r24, 0x00	; 0
    4d78:	90 e0       	ldi	r25, 0x00	; 0
    4d7a:	0e 94 14 16 	call	0x2c28	; 0x2c28 <LCD_voidSendNum>
			LCD_voidSendChar('%');
    4d7e:	85 e2       	ldi	r24, 0x25	; 37
    4d80:	0e 94 01 15 	call	0x2a02	; 0x2a02 <LCD_voidSendChar>
    4d84:	73 c0       	rjmp	.+230    	; 0x4e6c <App_voidTempControlSystem+0x32c>
		}
		else if((Local_DegreeInCelsius >= 30) && (Local_DegreeInCelsius <40))
    4d86:	8f 85       	ldd	r24, Y+15	; 0x0f
    4d88:	98 89       	ldd	r25, Y+16	; 0x10
    4d8a:	8e 31       	cpi	r24, 0x1E	; 30
    4d8c:	91 05       	cpc	r25, r1
    4d8e:	90 f0       	brcs	.+36     	; 0x4db4 <App_voidTempControlSystem+0x274>
    4d90:	8f 85       	ldd	r24, Y+15	; 0x0f
    4d92:	98 89       	ldd	r25, Y+16	; 0x10
    4d94:	88 32       	cpi	r24, 0x28	; 40
    4d96:	91 05       	cpc	r25, r1
    4d98:	68 f4       	brcc	.+26     	; 0x4db4 <App_voidTempControlSystem+0x274>
		{
			//Fan - Duty Cycle 50%
			/* Duty cycle = 50%
			   OCR0 = 256*0.5 -1 = 127*/
			TIMER0_voidSetCompareMatchValue(127);
    4d9a:	8f e7       	ldi	r24, 0x7F	; 127
    4d9c:	0e 94 52 19 	call	0x32a4	; 0x32a4 <TIMER0_voidSetCompareMatchValue>
			LCD_voidSendNum(50);
    4da0:	62 e3       	ldi	r22, 0x32	; 50
    4da2:	70 e0       	ldi	r23, 0x00	; 0
    4da4:	80 e0       	ldi	r24, 0x00	; 0
    4da6:	90 e0       	ldi	r25, 0x00	; 0
    4da8:	0e 94 14 16 	call	0x2c28	; 0x2c28 <LCD_voidSendNum>
			LCD_voidSendChar('%');
    4dac:	85 e2       	ldi	r24, 0x25	; 37
    4dae:	0e 94 01 15 	call	0x2a02	; 0x2a02 <LCD_voidSendChar>
    4db2:	5c c0       	rjmp	.+184    	; 0x4e6c <App_voidTempControlSystem+0x32c>
		else
		{
			//Fan - Duty Cycle 60%
			/* Duty cycle = 60%
			   OCR0 = 256*0.6 -1 = 152*/
			TIMER0_voidSetCompareMatchValue(152);
    4db4:	88 e9       	ldi	r24, 0x98	; 152
    4db6:	0e 94 52 19 	call	0x32a4	; 0x32a4 <TIMER0_voidSetCompareMatchValue>
			LCD_voidSendNum(60);
    4dba:	6c e3       	ldi	r22, 0x3C	; 60
    4dbc:	70 e0       	ldi	r23, 0x00	; 0
    4dbe:	80 e0       	ldi	r24, 0x00	; 0
    4dc0:	90 e0       	ldi	r25, 0x00	; 0
    4dc2:	0e 94 14 16 	call	0x2c28	; 0x2c28 <LCD_voidSendNum>
			LCD_voidSendChar('%');
    4dc6:	85 e2       	ldi	r24, 0x25	; 37
    4dc8:	0e 94 01 15 	call	0x2a02	; 0x2a02 <LCD_voidSendChar>
    4dcc:	4f c0       	rjmp	.+158    	; 0x4e6c <App_voidTempControlSystem+0x32c>
		}
	}

	else     //if temp <25
	{
		LCD_u8GoToXY(LCD_u8_LINE_ONE , 12);
    4dce:	81 e0       	ldi	r24, 0x01	; 1
    4dd0:	6c e0       	ldi	r22, 0x0C	; 12
    4dd2:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <LCD_u8GoToXY>
		LCD_voidSendString(Local_Au8LCDStr20);
    4dd6:	ce 01       	movw	r24, r28
    4dd8:	80 96       	adiw	r24, 0x20	; 32
    4dda:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <LCD_voidSendString>

		///*Turn on Green LED / Turn OFF RED LED*/
		DIO_u8SetPinValue(DIO_u8_PORTA , DIO_u8_PIN7 , DIO_u8_LOW);
    4dde:	80 e0       	ldi	r24, 0x00	; 0
    4de0:	67 e0       	ldi	r22, 0x07	; 7
    4de2:	40 e0       	ldi	r20, 0x00	; 0
    4de4:	0e 94 a6 09 	call	0x134c	; 0x134c <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTA , DIO_u8_PIN4 , DIO_u8_HIGH);
    4de8:	80 e0       	ldi	r24, 0x00	; 0
    4dea:	64 e0       	ldi	r22, 0x04	; 4
    4dec:	41 e0       	ldi	r20, 0x01	; 1
    4dee:	0e 94 a6 09 	call	0x134c	; 0x134c <DIO_u8SetPinValue>


		LCD_u8GoToXY(LCD_u8_LINE_TWO , 0);
    4df2:	82 e0       	ldi	r24, 0x02	; 2
    4df4:	60 e0       	ldi	r22, 0x00	; 0
    4df6:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <LCD_u8GoToXY>
		LCD_voidSendString(Local_Au8LCDStr21);
    4dfa:	ce 01       	movw	r24, r28
    4dfc:	86 96       	adiw	r24, 0x26	; 38
    4dfe:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <LCD_voidSendString>
		/*Turn on Fan (DC motor) with a duty cycle depending on the temperature*/
		//TIMER0 , PWM Fast Mode , Non-Inverting
		if((Local_DegreeInCelsius >= 0) && (Local_DegreeInCelsius <10))
    4e02:	8f 85       	ldd	r24, Y+15	; 0x0f
    4e04:	98 89       	ldd	r25, Y+16	; 0x10
    4e06:	8a 30       	cpi	r24, 0x0A	; 10
    4e08:	91 05       	cpc	r25, r1
    4e0a:	68 f4       	brcc	.+26     	; 0x4e26 <App_voidTempControlSystem+0x2e6>
		{
			//Fan - Duty Cycle 10%
			/* Duty cycle = 10%
			   OCR0 = 256*0.1 -1 = 24*/
			TIMER0_voidSetCompareMatchValue(24);
    4e0c:	88 e1       	ldi	r24, 0x18	; 24
    4e0e:	0e 94 52 19 	call	0x32a4	; 0x32a4 <TIMER0_voidSetCompareMatchValue>
			LCD_voidSendNum(10);
    4e12:	6a e0       	ldi	r22, 0x0A	; 10
    4e14:	70 e0       	ldi	r23, 0x00	; 0
    4e16:	80 e0       	ldi	r24, 0x00	; 0
    4e18:	90 e0       	ldi	r25, 0x00	; 0
    4e1a:	0e 94 14 16 	call	0x2c28	; 0x2c28 <LCD_voidSendNum>
			LCD_voidSendChar('%');
    4e1e:	85 e2       	ldi	r24, 0x25	; 37
    4e20:	0e 94 01 15 	call	0x2a02	; 0x2a02 <LCD_voidSendChar>
    4e24:	23 c0       	rjmp	.+70     	; 0x4e6c <App_voidTempControlSystem+0x32c>
		}
		else if((Local_DegreeInCelsius >= 10) && (Local_DegreeInCelsius <20))
    4e26:	8f 85       	ldd	r24, Y+15	; 0x0f
    4e28:	98 89       	ldd	r25, Y+16	; 0x10
    4e2a:	8a 30       	cpi	r24, 0x0A	; 10
    4e2c:	91 05       	cpc	r25, r1
    4e2e:	90 f0       	brcs	.+36     	; 0x4e54 <App_voidTempControlSystem+0x314>
    4e30:	8f 85       	ldd	r24, Y+15	; 0x0f
    4e32:	98 89       	ldd	r25, Y+16	; 0x10
    4e34:	84 31       	cpi	r24, 0x14	; 20
    4e36:	91 05       	cpc	r25, r1
    4e38:	68 f4       	brcc	.+26     	; 0x4e54 <App_voidTempControlSystem+0x314>
		{
			//Fan - Duty Cycle 20%
			/* Duty cycle = 20%
			   OCR0 = 256*0.2 -1 = 50*/
			TIMER0_voidSetCompareMatchValue(50);
    4e3a:	82 e3       	ldi	r24, 0x32	; 50
    4e3c:	0e 94 52 19 	call	0x32a4	; 0x32a4 <TIMER0_voidSetCompareMatchValue>
			LCD_voidSendNum(20);
    4e40:	64 e1       	ldi	r22, 0x14	; 20
    4e42:	70 e0       	ldi	r23, 0x00	; 0
    4e44:	80 e0       	ldi	r24, 0x00	; 0
    4e46:	90 e0       	ldi	r25, 0x00	; 0
    4e48:	0e 94 14 16 	call	0x2c28	; 0x2c28 <LCD_voidSendNum>
			LCD_voidSendChar('%');
    4e4c:	85 e2       	ldi	r24, 0x25	; 37
    4e4e:	0e 94 01 15 	call	0x2a02	; 0x2a02 <LCD_voidSendChar>
    4e52:	0c c0       	rjmp	.+24     	; 0x4e6c <App_voidTempControlSystem+0x32c>
		else
		{
			//Fan - Duty Cycle 30%
			/* Duty cycle = 30%
			   OCR0 = 256*0.3 -1 = 75*/
			TIMER0_voidSetCompareMatchValue(75);
    4e54:	8b e4       	ldi	r24, 0x4B	; 75
    4e56:	0e 94 52 19 	call	0x32a4	; 0x32a4 <TIMER0_voidSetCompareMatchValue>
			LCD_voidSendNum(30);
    4e5a:	6e e1       	ldi	r22, 0x1E	; 30
    4e5c:	70 e0       	ldi	r23, 0x00	; 0
    4e5e:	80 e0       	ldi	r24, 0x00	; 0
    4e60:	90 e0       	ldi	r25, 0x00	; 0
    4e62:	0e 94 14 16 	call	0x2c28	; 0x2c28 <LCD_voidSendNum>
			LCD_voidSendChar('%');
    4e66:	85 e2       	ldi	r24, 0x25	; 37
    4e68:	0e 94 01 15 	call	0x2a02	; 0x2a02 <LCD_voidSendChar>
    4e6c:	80 e0       	ldi	r24, 0x00	; 0
    4e6e:	90 e0       	ldi	r25, 0x00	; 0
    4e70:	aa e7       	ldi	r26, 0x7A	; 122
    4e72:	b4 e4       	ldi	r27, 0x44	; 68
    4e74:	8b 87       	std	Y+11, r24	; 0x0b
    4e76:	9c 87       	std	Y+12, r25	; 0x0c
    4e78:	ad 87       	std	Y+13, r26	; 0x0d
    4e7a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e80:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e82:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e84:	20 e0       	ldi	r18, 0x00	; 0
    4e86:	30 e0       	ldi	r19, 0x00	; 0
    4e88:	4a ef       	ldi	r20, 0xFA	; 250
    4e8a:	54 e4       	ldi	r21, 0x44	; 68
    4e8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e90:	dc 01       	movw	r26, r24
    4e92:	cb 01       	movw	r24, r22
    4e94:	8f 83       	std	Y+7, r24	; 0x07
    4e96:	98 87       	std	Y+8, r25	; 0x08
    4e98:	a9 87       	std	Y+9, r26	; 0x09
    4e9a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4e9c:	6f 81       	ldd	r22, Y+7	; 0x07
    4e9e:	78 85       	ldd	r23, Y+8	; 0x08
    4ea0:	89 85       	ldd	r24, Y+9	; 0x09
    4ea2:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ea4:	20 e0       	ldi	r18, 0x00	; 0
    4ea6:	30 e0       	ldi	r19, 0x00	; 0
    4ea8:	40 e8       	ldi	r20, 0x80	; 128
    4eaa:	5f e3       	ldi	r21, 0x3F	; 63
    4eac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4eb0:	88 23       	and	r24, r24
    4eb2:	2c f4       	brge	.+10     	; 0x4ebe <App_voidTempControlSystem+0x37e>
		__ticks = 1;
    4eb4:	81 e0       	ldi	r24, 0x01	; 1
    4eb6:	90 e0       	ldi	r25, 0x00	; 0
    4eb8:	9e 83       	std	Y+6, r25	; 0x06
    4eba:	8d 83       	std	Y+5, r24	; 0x05
    4ebc:	3f c0       	rjmp	.+126    	; 0x4f3c <App_voidTempControlSystem+0x3fc>
	else if (__tmp > 65535)
    4ebe:	6f 81       	ldd	r22, Y+7	; 0x07
    4ec0:	78 85       	ldd	r23, Y+8	; 0x08
    4ec2:	89 85       	ldd	r24, Y+9	; 0x09
    4ec4:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ec6:	20 e0       	ldi	r18, 0x00	; 0
    4ec8:	3f ef       	ldi	r19, 0xFF	; 255
    4eca:	4f e7       	ldi	r20, 0x7F	; 127
    4ecc:	57 e4       	ldi	r21, 0x47	; 71
    4ece:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4ed2:	18 16       	cp	r1, r24
    4ed4:	4c f5       	brge	.+82     	; 0x4f28 <App_voidTempControlSystem+0x3e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ed6:	6b 85       	ldd	r22, Y+11	; 0x0b
    4ed8:	7c 85       	ldd	r23, Y+12	; 0x0c
    4eda:	8d 85       	ldd	r24, Y+13	; 0x0d
    4edc:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ede:	20 e0       	ldi	r18, 0x00	; 0
    4ee0:	30 e0       	ldi	r19, 0x00	; 0
    4ee2:	40 e2       	ldi	r20, 0x20	; 32
    4ee4:	51 e4       	ldi	r21, 0x41	; 65
    4ee6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4eea:	dc 01       	movw	r26, r24
    4eec:	cb 01       	movw	r24, r22
    4eee:	bc 01       	movw	r22, r24
    4ef0:	cd 01       	movw	r24, r26
    4ef2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ef6:	dc 01       	movw	r26, r24
    4ef8:	cb 01       	movw	r24, r22
    4efa:	9e 83       	std	Y+6, r25	; 0x06
    4efc:	8d 83       	std	Y+5, r24	; 0x05
    4efe:	0f c0       	rjmp	.+30     	; 0x4f1e <App_voidTempControlSystem+0x3de>
    4f00:	88 ec       	ldi	r24, 0xC8	; 200
    4f02:	90 e0       	ldi	r25, 0x00	; 0
    4f04:	9c 83       	std	Y+4, r25	; 0x04
    4f06:	8b 83       	std	Y+3, r24	; 0x03
    4f08:	8b 81       	ldd	r24, Y+3	; 0x03
    4f0a:	9c 81       	ldd	r25, Y+4	; 0x04
    4f0c:	01 97       	sbiw	r24, 0x01	; 1
    4f0e:	f1 f7       	brne	.-4      	; 0x4f0c <App_voidTempControlSystem+0x3cc>
    4f10:	9c 83       	std	Y+4, r25	; 0x04
    4f12:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f14:	8d 81       	ldd	r24, Y+5	; 0x05
    4f16:	9e 81       	ldd	r25, Y+6	; 0x06
    4f18:	01 97       	sbiw	r24, 0x01	; 1
    4f1a:	9e 83       	std	Y+6, r25	; 0x06
    4f1c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f1e:	8d 81       	ldd	r24, Y+5	; 0x05
    4f20:	9e 81       	ldd	r25, Y+6	; 0x06
    4f22:	00 97       	sbiw	r24, 0x00	; 0
    4f24:	69 f7       	brne	.-38     	; 0x4f00 <App_voidTempControlSystem+0x3c0>
    4f26:	14 c0       	rjmp	.+40     	; 0x4f50 <App_voidTempControlSystem+0x410>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f28:	6f 81       	ldd	r22, Y+7	; 0x07
    4f2a:	78 85       	ldd	r23, Y+8	; 0x08
    4f2c:	89 85       	ldd	r24, Y+9	; 0x09
    4f2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f34:	dc 01       	movw	r26, r24
    4f36:	cb 01       	movw	r24, r22
    4f38:	9e 83       	std	Y+6, r25	; 0x06
    4f3a:	8d 83       	std	Y+5, r24	; 0x05
    4f3c:	8d 81       	ldd	r24, Y+5	; 0x05
    4f3e:	9e 81       	ldd	r25, Y+6	; 0x06
    4f40:	9a 83       	std	Y+2, r25	; 0x02
    4f42:	89 83       	std	Y+1, r24	; 0x01
    4f44:	89 81       	ldd	r24, Y+1	; 0x01
    4f46:	9a 81       	ldd	r25, Y+2	; 0x02
    4f48:	01 97       	sbiw	r24, 0x01	; 1
    4f4a:	f1 f7       	brne	.-4      	; 0x4f48 <App_voidTempControlSystem+0x408>
    4f4c:	9a 83       	std	Y+2, r25	; 0x02
    4f4e:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	_delay_ms(1000);
	LCD_voidClearScreen();
    4f50:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <LCD_voidClearScreen>
}
    4f54:	c9 5b       	subi	r28, 0xB9	; 185
    4f56:	df 4f       	sbci	r29, 0xFF	; 255
    4f58:	0f b6       	in	r0, 0x3f	; 63
    4f5a:	f8 94       	cli
    4f5c:	de bf       	out	0x3e, r29	; 62
    4f5e:	0f be       	out	0x3f, r0	; 63
    4f60:	cd bf       	out	0x3d, r28	; 61
    4f62:	cf 91       	pop	r28
    4f64:	df 91       	pop	r29
    4f66:	08 95       	ret

00004f68 <App_voidLightControlSystem>:


void  App_voidLightControlSystem(u16 Copy_u16DigitalReturnedValueLDR)
/*Application using LDR(Light Dependent Resistor)*/
{
    4f68:	df 93       	push	r29
    4f6a:	cf 93       	push	r28
    4f6c:	cd b7       	in	r28, 0x3d	; 61
    4f6e:	de b7       	in	r29, 0x3e	; 62
    4f70:	c3 57       	subi	r28, 0x73	; 115
    4f72:	d0 40       	sbci	r29, 0x00	; 0
    4f74:	0f b6       	in	r0, 0x3f	; 63
    4f76:	f8 94       	cli
    4f78:	de bf       	out	0x3e, r29	; 62
    4f7a:	0f be       	out	0x3f, r0	; 63
    4f7c:	cd bf       	out	0x3d, r28	; 61
    4f7e:	fe 01       	movw	r30, r28
    4f80:	e7 5a       	subi	r30, 0xA7	; 167
    4f82:	ff 4f       	sbci	r31, 0xFF	; 255
    4f84:	91 83       	std	Z+1, r25	; 0x01
    4f86:	80 83       	st	Z, r24
	u8 Local_Au8LCDStr13[] = "Analog=";
    4f88:	ce 01       	movw	r24, r28
    4f8a:	41 96       	adiw	r24, 0x11	; 17
    4f8c:	6d 96       	adiw	r28, 0x1d	; 29
    4f8e:	9f af       	std	Y+63, r25	; 0x3f
    4f90:	8e af       	std	Y+62, r24	; 0x3e
    4f92:	6d 97       	sbiw	r28, 0x1d	; 29
    4f94:	e5 e5       	ldi	r30, 0x55	; 85
    4f96:	f1 e0       	ldi	r31, 0x01	; 1
    4f98:	6f 96       	adiw	r28, 0x1f	; 31
    4f9a:	ff af       	std	Y+63, r31	; 0x3f
    4f9c:	ee af       	std	Y+62, r30	; 0x3e
    4f9e:	6f 97       	sbiw	r28, 0x1f	; 31
    4fa0:	f8 e0       	ldi	r31, 0x08	; 8
    4fa2:	a0 96       	adiw	r28, 0x20	; 32
    4fa4:	ff af       	std	Y+63, r31	; 0x3f
    4fa6:	a0 97       	sbiw	r28, 0x20	; 32
    4fa8:	6f 96       	adiw	r28, 0x1f	; 31
    4faa:	ee ad       	ldd	r30, Y+62	; 0x3e
    4fac:	ff ad       	ldd	r31, Y+63	; 0x3f
    4fae:	6f 97       	sbiw	r28, 0x1f	; 31
    4fb0:	00 80       	ld	r0, Z
    4fb2:	6f 96       	adiw	r28, 0x1f	; 31
    4fb4:	8e ad       	ldd	r24, Y+62	; 0x3e
    4fb6:	9f ad       	ldd	r25, Y+63	; 0x3f
    4fb8:	6f 97       	sbiw	r28, 0x1f	; 31
    4fba:	01 96       	adiw	r24, 0x01	; 1
    4fbc:	6f 96       	adiw	r28, 0x1f	; 31
    4fbe:	9f af       	std	Y+63, r25	; 0x3f
    4fc0:	8e af       	std	Y+62, r24	; 0x3e
    4fc2:	6f 97       	sbiw	r28, 0x1f	; 31
    4fc4:	6d 96       	adiw	r28, 0x1d	; 29
    4fc6:	ee ad       	ldd	r30, Y+62	; 0x3e
    4fc8:	ff ad       	ldd	r31, Y+63	; 0x3f
    4fca:	6d 97       	sbiw	r28, 0x1d	; 29
    4fcc:	00 82       	st	Z, r0
    4fce:	6d 96       	adiw	r28, 0x1d	; 29
    4fd0:	8e ad       	ldd	r24, Y+62	; 0x3e
    4fd2:	9f ad       	ldd	r25, Y+63	; 0x3f
    4fd4:	6d 97       	sbiw	r28, 0x1d	; 29
    4fd6:	01 96       	adiw	r24, 0x01	; 1
    4fd8:	6d 96       	adiw	r28, 0x1d	; 29
    4fda:	9f af       	std	Y+63, r25	; 0x3f
    4fdc:	8e af       	std	Y+62, r24	; 0x3e
    4fde:	6d 97       	sbiw	r28, 0x1d	; 29
    4fe0:	a0 96       	adiw	r28, 0x20	; 32
    4fe2:	9f ad       	ldd	r25, Y+63	; 0x3f
    4fe4:	a0 97       	sbiw	r28, 0x20	; 32
    4fe6:	91 50       	subi	r25, 0x01	; 1
    4fe8:	a0 96       	adiw	r28, 0x20	; 32
    4fea:	9f af       	std	Y+63, r25	; 0x3f
    4fec:	a0 97       	sbiw	r28, 0x20	; 32
    4fee:	a0 96       	adiw	r28, 0x20	; 32
    4ff0:	ef ad       	ldd	r30, Y+63	; 0x3f
    4ff2:	a0 97       	sbiw	r28, 0x20	; 32
    4ff4:	ee 23       	and	r30, r30
    4ff6:	c1 f6       	brne	.-80     	; 0x4fa8 <App_voidLightControlSystem+0x40>
	u8 Local_Au8LCDStr14[] = "No lights needed";
    4ff8:	ce 01       	movw	r24, r28
    4ffa:	49 96       	adiw	r24, 0x19	; 25
    4ffc:	a2 96       	adiw	r28, 0x22	; 34
    4ffe:	9f af       	std	Y+63, r25	; 0x3f
    5000:	8e af       	std	Y+62, r24	; 0x3e
    5002:	a2 97       	sbiw	r28, 0x22	; 34
    5004:	ed e5       	ldi	r30, 0x5D	; 93
    5006:	f1 e0       	ldi	r31, 0x01	; 1
    5008:	a4 96       	adiw	r28, 0x24	; 36
    500a:	ff af       	std	Y+63, r31	; 0x3f
    500c:	ee af       	std	Y+62, r30	; 0x3e
    500e:	a4 97       	sbiw	r28, 0x24	; 36
    5010:	f1 e1       	ldi	r31, 0x11	; 17
    5012:	a5 96       	adiw	r28, 0x25	; 37
    5014:	ff af       	std	Y+63, r31	; 0x3f
    5016:	a5 97       	sbiw	r28, 0x25	; 37
    5018:	a4 96       	adiw	r28, 0x24	; 36
    501a:	ee ad       	ldd	r30, Y+62	; 0x3e
    501c:	ff ad       	ldd	r31, Y+63	; 0x3f
    501e:	a4 97       	sbiw	r28, 0x24	; 36
    5020:	00 80       	ld	r0, Z
    5022:	a4 96       	adiw	r28, 0x24	; 36
    5024:	8e ad       	ldd	r24, Y+62	; 0x3e
    5026:	9f ad       	ldd	r25, Y+63	; 0x3f
    5028:	a4 97       	sbiw	r28, 0x24	; 36
    502a:	01 96       	adiw	r24, 0x01	; 1
    502c:	a4 96       	adiw	r28, 0x24	; 36
    502e:	9f af       	std	Y+63, r25	; 0x3f
    5030:	8e af       	std	Y+62, r24	; 0x3e
    5032:	a4 97       	sbiw	r28, 0x24	; 36
    5034:	a2 96       	adiw	r28, 0x22	; 34
    5036:	ee ad       	ldd	r30, Y+62	; 0x3e
    5038:	ff ad       	ldd	r31, Y+63	; 0x3f
    503a:	a2 97       	sbiw	r28, 0x22	; 34
    503c:	00 82       	st	Z, r0
    503e:	a2 96       	adiw	r28, 0x22	; 34
    5040:	8e ad       	ldd	r24, Y+62	; 0x3e
    5042:	9f ad       	ldd	r25, Y+63	; 0x3f
    5044:	a2 97       	sbiw	r28, 0x22	; 34
    5046:	01 96       	adiw	r24, 0x01	; 1
    5048:	a2 96       	adiw	r28, 0x22	; 34
    504a:	9f af       	std	Y+63, r25	; 0x3f
    504c:	8e af       	std	Y+62, r24	; 0x3e
    504e:	a2 97       	sbiw	r28, 0x22	; 34
    5050:	a5 96       	adiw	r28, 0x25	; 37
    5052:	9f ad       	ldd	r25, Y+63	; 0x3f
    5054:	a5 97       	sbiw	r28, 0x25	; 37
    5056:	91 50       	subi	r25, 0x01	; 1
    5058:	a5 96       	adiw	r28, 0x25	; 37
    505a:	9f af       	std	Y+63, r25	; 0x3f
    505c:	a5 97       	sbiw	r28, 0x25	; 37
    505e:	a5 96       	adiw	r28, 0x25	; 37
    5060:	ef ad       	ldd	r30, Y+63	; 0x3f
    5062:	a5 97       	sbiw	r28, 0x25	; 37
    5064:	ee 23       	and	r30, r30
    5066:	c1 f6       	brne	.-80     	; 0x5018 <App_voidLightControlSystem+0xb0>
	u8 Local_Au8LCDStr15[] = "Medium-LED1 ON";
    5068:	ce 01       	movw	r24, r28
    506a:	8a 96       	adiw	r24, 0x2a	; 42
    506c:	a7 96       	adiw	r28, 0x27	; 39
    506e:	9f af       	std	Y+63, r25	; 0x3f
    5070:	8e af       	std	Y+62, r24	; 0x3e
    5072:	a7 97       	sbiw	r28, 0x27	; 39
    5074:	ee e6       	ldi	r30, 0x6E	; 110
    5076:	f1 e0       	ldi	r31, 0x01	; 1
    5078:	a9 96       	adiw	r28, 0x29	; 41
    507a:	ff af       	std	Y+63, r31	; 0x3f
    507c:	ee af       	std	Y+62, r30	; 0x3e
    507e:	a9 97       	sbiw	r28, 0x29	; 41
    5080:	ff e0       	ldi	r31, 0x0F	; 15
    5082:	aa 96       	adiw	r28, 0x2a	; 42
    5084:	ff af       	std	Y+63, r31	; 0x3f
    5086:	aa 97       	sbiw	r28, 0x2a	; 42
    5088:	a9 96       	adiw	r28, 0x29	; 41
    508a:	ee ad       	ldd	r30, Y+62	; 0x3e
    508c:	ff ad       	ldd	r31, Y+63	; 0x3f
    508e:	a9 97       	sbiw	r28, 0x29	; 41
    5090:	00 80       	ld	r0, Z
    5092:	a9 96       	adiw	r28, 0x29	; 41
    5094:	8e ad       	ldd	r24, Y+62	; 0x3e
    5096:	9f ad       	ldd	r25, Y+63	; 0x3f
    5098:	a9 97       	sbiw	r28, 0x29	; 41
    509a:	01 96       	adiw	r24, 0x01	; 1
    509c:	a9 96       	adiw	r28, 0x29	; 41
    509e:	9f af       	std	Y+63, r25	; 0x3f
    50a0:	8e af       	std	Y+62, r24	; 0x3e
    50a2:	a9 97       	sbiw	r28, 0x29	; 41
    50a4:	a7 96       	adiw	r28, 0x27	; 39
    50a6:	ee ad       	ldd	r30, Y+62	; 0x3e
    50a8:	ff ad       	ldd	r31, Y+63	; 0x3f
    50aa:	a7 97       	sbiw	r28, 0x27	; 39
    50ac:	00 82       	st	Z, r0
    50ae:	a7 96       	adiw	r28, 0x27	; 39
    50b0:	8e ad       	ldd	r24, Y+62	; 0x3e
    50b2:	9f ad       	ldd	r25, Y+63	; 0x3f
    50b4:	a7 97       	sbiw	r28, 0x27	; 39
    50b6:	01 96       	adiw	r24, 0x01	; 1
    50b8:	a7 96       	adiw	r28, 0x27	; 39
    50ba:	9f af       	std	Y+63, r25	; 0x3f
    50bc:	8e af       	std	Y+62, r24	; 0x3e
    50be:	a7 97       	sbiw	r28, 0x27	; 39
    50c0:	aa 96       	adiw	r28, 0x2a	; 42
    50c2:	9f ad       	ldd	r25, Y+63	; 0x3f
    50c4:	aa 97       	sbiw	r28, 0x2a	; 42
    50c6:	91 50       	subi	r25, 0x01	; 1
    50c8:	aa 96       	adiw	r28, 0x2a	; 42
    50ca:	9f af       	std	Y+63, r25	; 0x3f
    50cc:	aa 97       	sbiw	r28, 0x2a	; 42
    50ce:	aa 96       	adiw	r28, 0x2a	; 42
    50d0:	ef ad       	ldd	r30, Y+63	; 0x3f
    50d2:	aa 97       	sbiw	r28, 0x2a	; 42
    50d4:	ee 23       	and	r30, r30
    50d6:	c1 f6       	brne	.-80     	; 0x5088 <App_voidLightControlSystem+0x120>
	u8 Local_Au8LCDStr16[] = "Darker-LED2 ON";
    50d8:	ce 01       	movw	r24, r28
    50da:	c9 96       	adiw	r24, 0x39	; 57
    50dc:	ac 96       	adiw	r28, 0x2c	; 44
    50de:	9f af       	std	Y+63, r25	; 0x3f
    50e0:	8e af       	std	Y+62, r24	; 0x3e
    50e2:	ac 97       	sbiw	r28, 0x2c	; 44
    50e4:	ed e7       	ldi	r30, 0x7D	; 125
    50e6:	f1 e0       	ldi	r31, 0x01	; 1
    50e8:	ae 96       	adiw	r28, 0x2e	; 46
    50ea:	ff af       	std	Y+63, r31	; 0x3f
    50ec:	ee af       	std	Y+62, r30	; 0x3e
    50ee:	ae 97       	sbiw	r28, 0x2e	; 46
    50f0:	ff e0       	ldi	r31, 0x0F	; 15
    50f2:	af 96       	adiw	r28, 0x2f	; 47
    50f4:	ff af       	std	Y+63, r31	; 0x3f
    50f6:	af 97       	sbiw	r28, 0x2f	; 47
    50f8:	ae 96       	adiw	r28, 0x2e	; 46
    50fa:	ee ad       	ldd	r30, Y+62	; 0x3e
    50fc:	ff ad       	ldd	r31, Y+63	; 0x3f
    50fe:	ae 97       	sbiw	r28, 0x2e	; 46
    5100:	00 80       	ld	r0, Z
    5102:	ae 96       	adiw	r28, 0x2e	; 46
    5104:	8e ad       	ldd	r24, Y+62	; 0x3e
    5106:	9f ad       	ldd	r25, Y+63	; 0x3f
    5108:	ae 97       	sbiw	r28, 0x2e	; 46
    510a:	01 96       	adiw	r24, 0x01	; 1
    510c:	ae 96       	adiw	r28, 0x2e	; 46
    510e:	9f af       	std	Y+63, r25	; 0x3f
    5110:	8e af       	std	Y+62, r24	; 0x3e
    5112:	ae 97       	sbiw	r28, 0x2e	; 46
    5114:	ac 96       	adiw	r28, 0x2c	; 44
    5116:	ee ad       	ldd	r30, Y+62	; 0x3e
    5118:	ff ad       	ldd	r31, Y+63	; 0x3f
    511a:	ac 97       	sbiw	r28, 0x2c	; 44
    511c:	00 82       	st	Z, r0
    511e:	ac 96       	adiw	r28, 0x2c	; 44
    5120:	8e ad       	ldd	r24, Y+62	; 0x3e
    5122:	9f ad       	ldd	r25, Y+63	; 0x3f
    5124:	ac 97       	sbiw	r28, 0x2c	; 44
    5126:	01 96       	adiw	r24, 0x01	; 1
    5128:	ac 96       	adiw	r28, 0x2c	; 44
    512a:	9f af       	std	Y+63, r25	; 0x3f
    512c:	8e af       	std	Y+62, r24	; 0x3e
    512e:	ac 97       	sbiw	r28, 0x2c	; 44
    5130:	af 96       	adiw	r28, 0x2f	; 47
    5132:	9f ad       	ldd	r25, Y+63	; 0x3f
    5134:	af 97       	sbiw	r28, 0x2f	; 47
    5136:	91 50       	subi	r25, 0x01	; 1
    5138:	af 96       	adiw	r28, 0x2f	; 47
    513a:	9f af       	std	Y+63, r25	; 0x3f
    513c:	af 97       	sbiw	r28, 0x2f	; 47
    513e:	af 96       	adiw	r28, 0x2f	; 47
    5140:	ef ad       	ldd	r30, Y+63	; 0x3f
    5142:	af 97       	sbiw	r28, 0x2f	; 47
    5144:	ee 23       	and	r30, r30
    5146:	c1 f6       	brne	.-80     	; 0x50f8 <App_voidLightControlSystem+0x190>
	u8 Local_Au8LCDStr17[] = "It'sDark-LEDs ON";
    5148:	ce 01       	movw	r24, r28
    514a:	88 5b       	subi	r24, 0xB8	; 184
    514c:	9f 4f       	sbci	r25, 0xFF	; 255
    514e:	e1 96       	adiw	r28, 0x31	; 49
    5150:	9f af       	std	Y+63, r25	; 0x3f
    5152:	8e af       	std	Y+62, r24	; 0x3e
    5154:	e1 97       	sbiw	r28, 0x31	; 49
    5156:	8c e8       	ldi	r24, 0x8C	; 140
    5158:	91 e0       	ldi	r25, 0x01	; 1
    515a:	e3 96       	adiw	r28, 0x33	; 51
    515c:	9f af       	std	Y+63, r25	; 0x3f
    515e:	8e af       	std	Y+62, r24	; 0x3e
    5160:	e3 97       	sbiw	r28, 0x33	; 51
    5162:	91 e1       	ldi	r25, 0x11	; 17
    5164:	e4 96       	adiw	r28, 0x34	; 52
    5166:	9f af       	std	Y+63, r25	; 0x3f
    5168:	e4 97       	sbiw	r28, 0x34	; 52
    516a:	e3 96       	adiw	r28, 0x33	; 51
    516c:	ee ad       	ldd	r30, Y+62	; 0x3e
    516e:	ff ad       	ldd	r31, Y+63	; 0x3f
    5170:	e3 97       	sbiw	r28, 0x33	; 51
    5172:	00 80       	ld	r0, Z
    5174:	e3 96       	adiw	r28, 0x33	; 51
    5176:	8e ad       	ldd	r24, Y+62	; 0x3e
    5178:	9f ad       	ldd	r25, Y+63	; 0x3f
    517a:	e3 97       	sbiw	r28, 0x33	; 51
    517c:	01 96       	adiw	r24, 0x01	; 1
    517e:	e3 96       	adiw	r28, 0x33	; 51
    5180:	9f af       	std	Y+63, r25	; 0x3f
    5182:	8e af       	std	Y+62, r24	; 0x3e
    5184:	e3 97       	sbiw	r28, 0x33	; 51
    5186:	e1 96       	adiw	r28, 0x31	; 49
    5188:	ee ad       	ldd	r30, Y+62	; 0x3e
    518a:	ff ad       	ldd	r31, Y+63	; 0x3f
    518c:	e1 97       	sbiw	r28, 0x31	; 49
    518e:	00 82       	st	Z, r0
    5190:	e1 96       	adiw	r28, 0x31	; 49
    5192:	8e ad       	ldd	r24, Y+62	; 0x3e
    5194:	9f ad       	ldd	r25, Y+63	; 0x3f
    5196:	e1 97       	sbiw	r28, 0x31	; 49
    5198:	01 96       	adiw	r24, 0x01	; 1
    519a:	e1 96       	adiw	r28, 0x31	; 49
    519c:	9f af       	std	Y+63, r25	; 0x3f
    519e:	8e af       	std	Y+62, r24	; 0x3e
    51a0:	e1 97       	sbiw	r28, 0x31	; 49
    51a2:	e4 96       	adiw	r28, 0x34	; 52
    51a4:	9f ad       	ldd	r25, Y+63	; 0x3f
    51a6:	e4 97       	sbiw	r28, 0x34	; 52
    51a8:	91 50       	subi	r25, 0x01	; 1
    51aa:	e4 96       	adiw	r28, 0x34	; 52
    51ac:	9f af       	std	Y+63, r25	; 0x3f
    51ae:	e4 97       	sbiw	r28, 0x34	; 52
    51b0:	e4 96       	adiw	r28, 0x34	; 52
    51b2:	ef ad       	ldd	r30, Y+63	; 0x3f
    51b4:	e4 97       	sbiw	r28, 0x34	; 52
    51b6:	ee 23       	and	r30, r30
    51b8:	c1 f6       	brne	.-80     	; 0x516a <App_voidLightControlSystem+0x202>

	/*Calculate Analog Value = Digital Value * Step Size
	 *Step Size = Max Voltage / 2**Resolution*/
	u16 Local_u16AnalogValue = (Copy_u16DigitalReturnedValueLDR * 5000UL)/1024;
    51ba:	fe 01       	movw	r30, r28
    51bc:	e7 5a       	subi	r30, 0xA7	; 167
    51be:	ff 4f       	sbci	r31, 0xFF	; 255
    51c0:	80 81       	ld	r24, Z
    51c2:	91 81       	ldd	r25, Z+1	; 0x01
    51c4:	cc 01       	movw	r24, r24
    51c6:	a0 e0       	ldi	r26, 0x00	; 0
    51c8:	b0 e0       	ldi	r27, 0x00	; 0
    51ca:	28 e8       	ldi	r18, 0x88	; 136
    51cc:	33 e1       	ldi	r19, 0x13	; 19
    51ce:	40 e0       	ldi	r20, 0x00	; 0
    51d0:	50 e0       	ldi	r21, 0x00	; 0
    51d2:	bc 01       	movw	r22, r24
    51d4:	cd 01       	movw	r24, r26
    51d6:	0e 94 19 2a 	call	0x5432	; 0x5432 <__mulsi3>
    51da:	dc 01       	movw	r26, r24
    51dc:	cb 01       	movw	r24, r22
    51de:	07 2e       	mov	r0, r23
    51e0:	7a e0       	ldi	r23, 0x0A	; 10
    51e2:	b6 95       	lsr	r27
    51e4:	a7 95       	ror	r26
    51e6:	97 95       	ror	r25
    51e8:	87 95       	ror	r24
    51ea:	7a 95       	dec	r23
    51ec:	d1 f7       	brne	.-12     	; 0x51e2 <App_voidLightControlSystem+0x27a>
    51ee:	70 2d       	mov	r23, r0
    51f0:	98 8b       	std	Y+16, r25	; 0x10
    51f2:	8f 87       	std	Y+15, r24	; 0x0f

	//Write the results of the analog value on the screen
	LCD_voidClearScreen();
    51f4:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <LCD_voidClearScreen>
	//LCD_u8GoToXY(LCD_u8_LINE_ONE,0);
	LCD_voidSendString(Local_Au8LCDStr13);
    51f8:	ce 01       	movw	r24, r28
    51fa:	41 96       	adiw	r24, 0x11	; 17
    51fc:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <LCD_voidSendString>
	LCD_voidSendNum(Local_u16AnalogValue);
    5200:	8f 85       	ldd	r24, Y+15	; 0x0f
    5202:	98 89       	ldd	r25, Y+16	; 0x10
    5204:	cc 01       	movw	r24, r24
    5206:	a0 e0       	ldi	r26, 0x00	; 0
    5208:	b0 e0       	ldi	r27, 0x00	; 0
    520a:	bc 01       	movw	r22, r24
    520c:	cd 01       	movw	r24, r26
    520e:	0e 94 14 16 	call	0x2c28	; 0x2c28 <LCD_voidSendNum>

	/*Taking actions depending on the result of LDR Sensor*/
	if((Local_u16AnalogValue > 0) && (Local_u16AnalogValue <=1500))
    5212:	8f 85       	ldd	r24, Y+15	; 0x0f
    5214:	98 89       	ldd	r25, Y+16	; 0x10
    5216:	00 97       	sbiw	r24, 0x00	; 0
    5218:	f1 f0       	breq	.+60     	; 0x5256 <App_voidLightControlSystem+0x2ee>
    521a:	8f 85       	ldd	r24, Y+15	; 0x0f
    521c:	98 89       	ldd	r25, Y+16	; 0x10
    521e:	f5 e0       	ldi	r31, 0x05	; 5
    5220:	8d 3d       	cpi	r24, 0xDD	; 221
    5222:	9f 07       	cpc	r25, r31
    5224:	c0 f4       	brcc	.+48     	; 0x5256 <App_voidLightControlSystem+0x2ee>
	{
		LCD_u8GoToXY(LCD_u8_LINE_TWO , 0);
    5226:	82 e0       	ldi	r24, 0x02	; 2
    5228:	60 e0       	ldi	r22, 0x00	; 0
    522a:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <LCD_u8GoToXY>
		LCD_voidSendString(Local_Au8LCDStr14);							//Print "No Lights Needed"
    522e:	ce 01       	movw	r24, r28
    5230:	49 96       	adiw	r24, 0x19	; 25
    5232:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <LCD_voidSendString>
		DIO_u8SetPinValue(DIO_u8_PORTA , DIO_u8_PIN7 , DIO_u8_LOW);		//Turn off All LEDs
    5236:	80 e0       	ldi	r24, 0x00	; 0
    5238:	67 e0       	ldi	r22, 0x07	; 7
    523a:	40 e0       	ldi	r20, 0x00	; 0
    523c:	0e 94 a6 09 	call	0x134c	; 0x134c <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTA , DIO_u8_PIN6 , DIO_u8_LOW);
    5240:	80 e0       	ldi	r24, 0x00	; 0
    5242:	66 e0       	ldi	r22, 0x06	; 6
    5244:	40 e0       	ldi	r20, 0x00	; 0
    5246:	0e 94 a6 09 	call	0x134c	; 0x134c <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTA , DIO_u8_PIN5 , DIO_u8_LOW);
    524a:	80 e0       	ldi	r24, 0x00	; 0
    524c:	65 e0       	ldi	r22, 0x05	; 5
    524e:	40 e0       	ldi	r20, 0x00	; 0
    5250:	0e 94 a6 09 	call	0x134c	; 0x134c <DIO_u8SetPinValue>
    5254:	66 c0       	rjmp	.+204    	; 0x5322 <App_voidLightControlSystem+0x3ba>
	}
	//If the lights is medium -> Turn on LED1
	else if((Local_u16AnalogValue > 1500) && (Local_u16AnalogValue <=3000))
    5256:	8f 85       	ldd	r24, Y+15	; 0x0f
    5258:	98 89       	ldd	r25, Y+16	; 0x10
    525a:	25 e0       	ldi	r18, 0x05	; 5
    525c:	8d 3d       	cpi	r24, 0xDD	; 221
    525e:	92 07       	cpc	r25, r18
    5260:	f0 f0       	brcs	.+60     	; 0x529e <App_voidLightControlSystem+0x336>
    5262:	8f 85       	ldd	r24, Y+15	; 0x0f
    5264:	98 89       	ldd	r25, Y+16	; 0x10
    5266:	eb e0       	ldi	r30, 0x0B	; 11
    5268:	89 3b       	cpi	r24, 0xB9	; 185
    526a:	9e 07       	cpc	r25, r30
    526c:	c0 f4       	brcc	.+48     	; 0x529e <App_voidLightControlSystem+0x336>
	{
		LCD_u8GoToXY(LCD_u8_LINE_TWO , 0);
    526e:	82 e0       	ldi	r24, 0x02	; 2
    5270:	60 e0       	ldi	r22, 0x00	; 0
    5272:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <LCD_u8GoToXY>
		LCD_voidSendString(Local_Au8LCDStr15);							//Print "Mediun -LED1 ON"
    5276:	ce 01       	movw	r24, r28
    5278:	8a 96       	adiw	r24, 0x2a	; 42
    527a:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <LCD_voidSendString>
		DIO_u8SetPinValue(DIO_u8_PORTA , DIO_u8_PIN7 , DIO_u8_HIGH);	//Turn ON one LED
    527e:	80 e0       	ldi	r24, 0x00	; 0
    5280:	67 e0       	ldi	r22, 0x07	; 7
    5282:	41 e0       	ldi	r20, 0x01	; 1
    5284:	0e 94 a6 09 	call	0x134c	; 0x134c <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTA , DIO_u8_PIN6 , DIO_u8_LOW);
    5288:	80 e0       	ldi	r24, 0x00	; 0
    528a:	66 e0       	ldi	r22, 0x06	; 6
    528c:	40 e0       	ldi	r20, 0x00	; 0
    528e:	0e 94 a6 09 	call	0x134c	; 0x134c <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTA , DIO_u8_PIN5 , DIO_u8_LOW);
    5292:	80 e0       	ldi	r24, 0x00	; 0
    5294:	65 e0       	ldi	r22, 0x05	; 5
    5296:	40 e0       	ldi	r20, 0x00	; 0
    5298:	0e 94 a6 09 	call	0x134c	; 0x134c <DIO_u8SetPinValue>
    529c:	42 c0       	rjmp	.+132    	; 0x5322 <App_voidLightControlSystem+0x3ba>
	}
	else if((Local_u16AnalogValue > 3000) && (Local_u16AnalogValue <=4000))
    529e:	8f 85       	ldd	r24, Y+15	; 0x0f
    52a0:	98 89       	ldd	r25, Y+16	; 0x10
    52a2:	fb e0       	ldi	r31, 0x0B	; 11
    52a4:	89 3b       	cpi	r24, 0xB9	; 185
    52a6:	9f 07       	cpc	r25, r31
    52a8:	f0 f0       	brcs	.+60     	; 0x52e6 <App_voidLightControlSystem+0x37e>
    52aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    52ac:	98 89       	ldd	r25, Y+16	; 0x10
    52ae:	2f e0       	ldi	r18, 0x0F	; 15
    52b0:	81 3a       	cpi	r24, 0xA1	; 161
    52b2:	92 07       	cpc	r25, r18
    52b4:	c0 f4       	brcc	.+48     	; 0x52e6 <App_voidLightControlSystem+0x37e>
	{
		LCD_u8GoToXY(LCD_u8_LINE_TWO , 0);
    52b6:	82 e0       	ldi	r24, 0x02	; 2
    52b8:	60 e0       	ldi	r22, 0x00	; 0
    52ba:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <LCD_u8GoToXY>
		LCD_voidSendString(Local_Au8LCDStr16);							//Print "Darker" - 2LEDs ON
    52be:	ce 01       	movw	r24, r28
    52c0:	c9 96       	adiw	r24, 0x39	; 57
    52c2:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <LCD_voidSendString>
		DIO_u8SetPinValue(DIO_u8_PORTA , DIO_u8_PIN7 , DIO_u8_HIGH);
    52c6:	80 e0       	ldi	r24, 0x00	; 0
    52c8:	67 e0       	ldi	r22, 0x07	; 7
    52ca:	41 e0       	ldi	r20, 0x01	; 1
    52cc:	0e 94 a6 09 	call	0x134c	; 0x134c <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTA , DIO_u8_PIN6 , DIO_u8_HIGH);
    52d0:	80 e0       	ldi	r24, 0x00	; 0
    52d2:	66 e0       	ldi	r22, 0x06	; 6
    52d4:	41 e0       	ldi	r20, 0x01	; 1
    52d6:	0e 94 a6 09 	call	0x134c	; 0x134c <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTA , DIO_u8_PIN5 , DIO_u8_LOW);
    52da:	80 e0       	ldi	r24, 0x00	; 0
    52dc:	65 e0       	ldi	r22, 0x05	; 5
    52de:	40 e0       	ldi	r20, 0x00	; 0
    52e0:	0e 94 a6 09 	call	0x134c	; 0x134c <DIO_u8SetPinValue>
    52e4:	1e c0       	rjmp	.+60     	; 0x5322 <App_voidLightControlSystem+0x3ba>
	}
	else if((Local_u16AnalogValue > 4000))
    52e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    52e8:	98 89       	ldd	r25, Y+16	; 0x10
    52ea:	ef e0       	ldi	r30, 0x0F	; 15
    52ec:	81 3a       	cpi	r24, 0xA1	; 161
    52ee:	9e 07       	cpc	r25, r30
    52f0:	c0 f0       	brcs	.+48     	; 0x5322 <App_voidLightControlSystem+0x3ba>
	{
		LCD_u8GoToXY(LCD_u8_LINE_TWO , 0);
    52f2:	82 e0       	ldi	r24, 0x02	; 2
    52f4:	60 e0       	ldi	r22, 0x00	; 0
    52f6:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <LCD_u8GoToXY>
		LCD_voidSendString(Local_Au8LCDStr17);							//Print "It's dark" - Turn ON all LEDs
    52fa:	ce 01       	movw	r24, r28
    52fc:	88 5b       	subi	r24, 0xB8	; 184
    52fe:	9f 4f       	sbci	r25, 0xFF	; 255
    5300:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <LCD_voidSendString>
		DIO_u8SetPinValue(DIO_u8_PORTA , DIO_u8_PIN7 , DIO_u8_HIGH);
    5304:	80 e0       	ldi	r24, 0x00	; 0
    5306:	67 e0       	ldi	r22, 0x07	; 7
    5308:	41 e0       	ldi	r20, 0x01	; 1
    530a:	0e 94 a6 09 	call	0x134c	; 0x134c <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTA , DIO_u8_PIN6 , DIO_u8_HIGH);
    530e:	80 e0       	ldi	r24, 0x00	; 0
    5310:	66 e0       	ldi	r22, 0x06	; 6
    5312:	41 e0       	ldi	r20, 0x01	; 1
    5314:	0e 94 a6 09 	call	0x134c	; 0x134c <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8_PORTA , DIO_u8_PIN5 , DIO_u8_HIGH);
    5318:	80 e0       	ldi	r24, 0x00	; 0
    531a:	65 e0       	ldi	r22, 0x05	; 5
    531c:	41 e0       	ldi	r20, 0x01	; 1
    531e:	0e 94 a6 09 	call	0x134c	; 0x134c <DIO_u8SetPinValue>
    5322:	80 e0       	ldi	r24, 0x00	; 0
    5324:	90 e0       	ldi	r25, 0x00	; 0
    5326:	aa e7       	ldi	r26, 0x7A	; 122
    5328:	b4 e4       	ldi	r27, 0x44	; 68
    532a:	8b 87       	std	Y+11, r24	; 0x0b
    532c:	9c 87       	std	Y+12, r25	; 0x0c
    532e:	ad 87       	std	Y+13, r26	; 0x0d
    5330:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5332:	6b 85       	ldd	r22, Y+11	; 0x0b
    5334:	7c 85       	ldd	r23, Y+12	; 0x0c
    5336:	8d 85       	ldd	r24, Y+13	; 0x0d
    5338:	9e 85       	ldd	r25, Y+14	; 0x0e
    533a:	20 e0       	ldi	r18, 0x00	; 0
    533c:	30 e0       	ldi	r19, 0x00	; 0
    533e:	4a ef       	ldi	r20, 0xFA	; 250
    5340:	54 e4       	ldi	r21, 0x44	; 68
    5342:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5346:	dc 01       	movw	r26, r24
    5348:	cb 01       	movw	r24, r22
    534a:	8f 83       	std	Y+7, r24	; 0x07
    534c:	98 87       	std	Y+8, r25	; 0x08
    534e:	a9 87       	std	Y+9, r26	; 0x09
    5350:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5352:	6f 81       	ldd	r22, Y+7	; 0x07
    5354:	78 85       	ldd	r23, Y+8	; 0x08
    5356:	89 85       	ldd	r24, Y+9	; 0x09
    5358:	9a 85       	ldd	r25, Y+10	; 0x0a
    535a:	20 e0       	ldi	r18, 0x00	; 0
    535c:	30 e0       	ldi	r19, 0x00	; 0
    535e:	40 e8       	ldi	r20, 0x80	; 128
    5360:	5f e3       	ldi	r21, 0x3F	; 63
    5362:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5366:	88 23       	and	r24, r24
    5368:	2c f4       	brge	.+10     	; 0x5374 <App_voidLightControlSystem+0x40c>
		__ticks = 1;
    536a:	81 e0       	ldi	r24, 0x01	; 1
    536c:	90 e0       	ldi	r25, 0x00	; 0
    536e:	9e 83       	std	Y+6, r25	; 0x06
    5370:	8d 83       	std	Y+5, r24	; 0x05
    5372:	3f c0       	rjmp	.+126    	; 0x53f2 <App_voidLightControlSystem+0x48a>
	else if (__tmp > 65535)
    5374:	6f 81       	ldd	r22, Y+7	; 0x07
    5376:	78 85       	ldd	r23, Y+8	; 0x08
    5378:	89 85       	ldd	r24, Y+9	; 0x09
    537a:	9a 85       	ldd	r25, Y+10	; 0x0a
    537c:	20 e0       	ldi	r18, 0x00	; 0
    537e:	3f ef       	ldi	r19, 0xFF	; 255
    5380:	4f e7       	ldi	r20, 0x7F	; 127
    5382:	57 e4       	ldi	r21, 0x47	; 71
    5384:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5388:	18 16       	cp	r1, r24
    538a:	4c f5       	brge	.+82     	; 0x53de <App_voidLightControlSystem+0x476>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    538c:	6b 85       	ldd	r22, Y+11	; 0x0b
    538e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5390:	8d 85       	ldd	r24, Y+13	; 0x0d
    5392:	9e 85       	ldd	r25, Y+14	; 0x0e
    5394:	20 e0       	ldi	r18, 0x00	; 0
    5396:	30 e0       	ldi	r19, 0x00	; 0
    5398:	40 e2       	ldi	r20, 0x20	; 32
    539a:	51 e4       	ldi	r21, 0x41	; 65
    539c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53a0:	dc 01       	movw	r26, r24
    53a2:	cb 01       	movw	r24, r22
    53a4:	bc 01       	movw	r22, r24
    53a6:	cd 01       	movw	r24, r26
    53a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53ac:	dc 01       	movw	r26, r24
    53ae:	cb 01       	movw	r24, r22
    53b0:	9e 83       	std	Y+6, r25	; 0x06
    53b2:	8d 83       	std	Y+5, r24	; 0x05
    53b4:	0f c0       	rjmp	.+30     	; 0x53d4 <App_voidLightControlSystem+0x46c>
    53b6:	88 ec       	ldi	r24, 0xC8	; 200
    53b8:	90 e0       	ldi	r25, 0x00	; 0
    53ba:	9c 83       	std	Y+4, r25	; 0x04
    53bc:	8b 83       	std	Y+3, r24	; 0x03
    53be:	8b 81       	ldd	r24, Y+3	; 0x03
    53c0:	9c 81       	ldd	r25, Y+4	; 0x04
    53c2:	01 97       	sbiw	r24, 0x01	; 1
    53c4:	f1 f7       	brne	.-4      	; 0x53c2 <App_voidLightControlSystem+0x45a>
    53c6:	9c 83       	std	Y+4, r25	; 0x04
    53c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    53ca:	8d 81       	ldd	r24, Y+5	; 0x05
    53cc:	9e 81       	ldd	r25, Y+6	; 0x06
    53ce:	01 97       	sbiw	r24, 0x01	; 1
    53d0:	9e 83       	std	Y+6, r25	; 0x06
    53d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    53d4:	8d 81       	ldd	r24, Y+5	; 0x05
    53d6:	9e 81       	ldd	r25, Y+6	; 0x06
    53d8:	00 97       	sbiw	r24, 0x00	; 0
    53da:	69 f7       	brne	.-38     	; 0x53b6 <App_voidLightControlSystem+0x44e>
    53dc:	14 c0       	rjmp	.+40     	; 0x5406 <App_voidLightControlSystem+0x49e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    53de:	6f 81       	ldd	r22, Y+7	; 0x07
    53e0:	78 85       	ldd	r23, Y+8	; 0x08
    53e2:	89 85       	ldd	r24, Y+9	; 0x09
    53e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    53e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53ea:	dc 01       	movw	r26, r24
    53ec:	cb 01       	movw	r24, r22
    53ee:	9e 83       	std	Y+6, r25	; 0x06
    53f0:	8d 83       	std	Y+5, r24	; 0x05
    53f2:	8d 81       	ldd	r24, Y+5	; 0x05
    53f4:	9e 81       	ldd	r25, Y+6	; 0x06
    53f6:	9a 83       	std	Y+2, r25	; 0x02
    53f8:	89 83       	std	Y+1, r24	; 0x01
    53fa:	89 81       	ldd	r24, Y+1	; 0x01
    53fc:	9a 81       	ldd	r25, Y+2	; 0x02
    53fe:	01 97       	sbiw	r24, 0x01	; 1
    5400:	f1 f7       	brne	.-4      	; 0x53fe <App_voidLightControlSystem+0x496>
    5402:	9a 83       	std	Y+2, r25	; 0x02
    5404:	89 83       	std	Y+1, r24	; 0x01
	}

	_delay_ms(1000);
	LCD_voidClearScreen();
    5406:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <LCD_voidClearScreen>
}
    540a:	cd 58       	subi	r28, 0x8D	; 141
    540c:	df 4f       	sbci	r29, 0xFF	; 255
    540e:	0f b6       	in	r0, 0x3f	; 63
    5410:	f8 94       	cli
    5412:	de bf       	out	0x3e, r29	; 62
    5414:	0f be       	out	0x3f, r0	; 63
    5416:	cd bf       	out	0x3d, r28	; 61
    5418:	cf 91       	pop	r28
    541a:	df 91       	pop	r29
    541c:	08 95       	ret

0000541e <App_voidGetBackToMenuEXTI>:


void  App_voidGetBackToMenuEXTI(void)
/*Function to get back to the main menu by changing the value of the ChooseService variable*/
{
    541e:	df 93       	push	r29
    5420:	cf 93       	push	r28
    5422:	cd b7       	in	r28, 0x3d	; 61
    5424:	de b7       	in	r29, 0x3e	; 62
	Local_u8ChoosedService = '0';
    5426:	80 e3       	ldi	r24, 0x30	; 48
    5428:	80 93 07 02 	sts	0x0207, r24
}
    542c:	cf 91       	pop	r28
    542e:	df 91       	pop	r29
    5430:	08 95       	ret

00005432 <__mulsi3>:
    5432:	62 9f       	mul	r22, r18
    5434:	d0 01       	movw	r26, r0
    5436:	73 9f       	mul	r23, r19
    5438:	f0 01       	movw	r30, r0
    543a:	82 9f       	mul	r24, r18
    543c:	e0 0d       	add	r30, r0
    543e:	f1 1d       	adc	r31, r1
    5440:	64 9f       	mul	r22, r20
    5442:	e0 0d       	add	r30, r0
    5444:	f1 1d       	adc	r31, r1
    5446:	92 9f       	mul	r25, r18
    5448:	f0 0d       	add	r31, r0
    544a:	83 9f       	mul	r24, r19
    544c:	f0 0d       	add	r31, r0
    544e:	74 9f       	mul	r23, r20
    5450:	f0 0d       	add	r31, r0
    5452:	65 9f       	mul	r22, r21
    5454:	f0 0d       	add	r31, r0
    5456:	99 27       	eor	r25, r25
    5458:	72 9f       	mul	r23, r18
    545a:	b0 0d       	add	r27, r0
    545c:	e1 1d       	adc	r30, r1
    545e:	f9 1f       	adc	r31, r25
    5460:	63 9f       	mul	r22, r19
    5462:	b0 0d       	add	r27, r0
    5464:	e1 1d       	adc	r30, r1
    5466:	f9 1f       	adc	r31, r25
    5468:	bd 01       	movw	r22, r26
    546a:	cf 01       	movw	r24, r30
    546c:	11 24       	eor	r1, r1
    546e:	08 95       	ret

00005470 <__udivmodhi4>:
    5470:	aa 1b       	sub	r26, r26
    5472:	bb 1b       	sub	r27, r27
    5474:	51 e1       	ldi	r21, 0x11	; 17
    5476:	07 c0       	rjmp	.+14     	; 0x5486 <__udivmodhi4_ep>

00005478 <__udivmodhi4_loop>:
    5478:	aa 1f       	adc	r26, r26
    547a:	bb 1f       	adc	r27, r27
    547c:	a6 17       	cp	r26, r22
    547e:	b7 07       	cpc	r27, r23
    5480:	10 f0       	brcs	.+4      	; 0x5486 <__udivmodhi4_ep>
    5482:	a6 1b       	sub	r26, r22
    5484:	b7 0b       	sbc	r27, r23

00005486 <__udivmodhi4_ep>:
    5486:	88 1f       	adc	r24, r24
    5488:	99 1f       	adc	r25, r25
    548a:	5a 95       	dec	r21
    548c:	a9 f7       	brne	.-22     	; 0x5478 <__udivmodhi4_loop>
    548e:	80 95       	com	r24
    5490:	90 95       	com	r25
    5492:	bc 01       	movw	r22, r24
    5494:	cd 01       	movw	r24, r26
    5496:	08 95       	ret

00005498 <__udivmodsi4>:
    5498:	a1 e2       	ldi	r26, 0x21	; 33
    549a:	1a 2e       	mov	r1, r26
    549c:	aa 1b       	sub	r26, r26
    549e:	bb 1b       	sub	r27, r27
    54a0:	fd 01       	movw	r30, r26
    54a2:	0d c0       	rjmp	.+26     	; 0x54be <__udivmodsi4_ep>

000054a4 <__udivmodsi4_loop>:
    54a4:	aa 1f       	adc	r26, r26
    54a6:	bb 1f       	adc	r27, r27
    54a8:	ee 1f       	adc	r30, r30
    54aa:	ff 1f       	adc	r31, r31
    54ac:	a2 17       	cp	r26, r18
    54ae:	b3 07       	cpc	r27, r19
    54b0:	e4 07       	cpc	r30, r20
    54b2:	f5 07       	cpc	r31, r21
    54b4:	20 f0       	brcs	.+8      	; 0x54be <__udivmodsi4_ep>
    54b6:	a2 1b       	sub	r26, r18
    54b8:	b3 0b       	sbc	r27, r19
    54ba:	e4 0b       	sbc	r30, r20
    54bc:	f5 0b       	sbc	r31, r21

000054be <__udivmodsi4_ep>:
    54be:	66 1f       	adc	r22, r22
    54c0:	77 1f       	adc	r23, r23
    54c2:	88 1f       	adc	r24, r24
    54c4:	99 1f       	adc	r25, r25
    54c6:	1a 94       	dec	r1
    54c8:	69 f7       	brne	.-38     	; 0x54a4 <__udivmodsi4_loop>
    54ca:	60 95       	com	r22
    54cc:	70 95       	com	r23
    54ce:	80 95       	com	r24
    54d0:	90 95       	com	r25
    54d2:	9b 01       	movw	r18, r22
    54d4:	ac 01       	movw	r20, r24
    54d6:	bd 01       	movw	r22, r26
    54d8:	cf 01       	movw	r24, r30
    54da:	08 95       	ret

000054dc <__prologue_saves__>:
    54dc:	2f 92       	push	r2
    54de:	3f 92       	push	r3
    54e0:	4f 92       	push	r4
    54e2:	5f 92       	push	r5
    54e4:	6f 92       	push	r6
    54e6:	7f 92       	push	r7
    54e8:	8f 92       	push	r8
    54ea:	9f 92       	push	r9
    54ec:	af 92       	push	r10
    54ee:	bf 92       	push	r11
    54f0:	cf 92       	push	r12
    54f2:	df 92       	push	r13
    54f4:	ef 92       	push	r14
    54f6:	ff 92       	push	r15
    54f8:	0f 93       	push	r16
    54fa:	1f 93       	push	r17
    54fc:	cf 93       	push	r28
    54fe:	df 93       	push	r29
    5500:	cd b7       	in	r28, 0x3d	; 61
    5502:	de b7       	in	r29, 0x3e	; 62
    5504:	ca 1b       	sub	r28, r26
    5506:	db 0b       	sbc	r29, r27
    5508:	0f b6       	in	r0, 0x3f	; 63
    550a:	f8 94       	cli
    550c:	de bf       	out	0x3e, r29	; 62
    550e:	0f be       	out	0x3f, r0	; 63
    5510:	cd bf       	out	0x3d, r28	; 61
    5512:	09 94       	ijmp

00005514 <__epilogue_restores__>:
    5514:	2a 88       	ldd	r2, Y+18	; 0x12
    5516:	39 88       	ldd	r3, Y+17	; 0x11
    5518:	48 88       	ldd	r4, Y+16	; 0x10
    551a:	5f 84       	ldd	r5, Y+15	; 0x0f
    551c:	6e 84       	ldd	r6, Y+14	; 0x0e
    551e:	7d 84       	ldd	r7, Y+13	; 0x0d
    5520:	8c 84       	ldd	r8, Y+12	; 0x0c
    5522:	9b 84       	ldd	r9, Y+11	; 0x0b
    5524:	aa 84       	ldd	r10, Y+10	; 0x0a
    5526:	b9 84       	ldd	r11, Y+9	; 0x09
    5528:	c8 84       	ldd	r12, Y+8	; 0x08
    552a:	df 80       	ldd	r13, Y+7	; 0x07
    552c:	ee 80       	ldd	r14, Y+6	; 0x06
    552e:	fd 80       	ldd	r15, Y+5	; 0x05
    5530:	0c 81       	ldd	r16, Y+4	; 0x04
    5532:	1b 81       	ldd	r17, Y+3	; 0x03
    5534:	aa 81       	ldd	r26, Y+2	; 0x02
    5536:	b9 81       	ldd	r27, Y+1	; 0x01
    5538:	ce 0f       	add	r28, r30
    553a:	d1 1d       	adc	r29, r1
    553c:	0f b6       	in	r0, 0x3f	; 63
    553e:	f8 94       	cli
    5540:	de bf       	out	0x3e, r29	; 62
    5542:	0f be       	out	0x3f, r0	; 63
    5544:	cd bf       	out	0x3d, r28	; 61
    5546:	ed 01       	movw	r28, r26
    5548:	08 95       	ret

0000554a <_exit>:
    554a:	f8 94       	cli

0000554c <__stop_program>:
    554c:	ff cf       	rjmp	.-2      	; 0x554c <__stop_program>
